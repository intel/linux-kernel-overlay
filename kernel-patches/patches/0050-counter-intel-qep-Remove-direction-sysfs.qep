From 505a49bcd8b15ae95541609be9737a250ca6cc67 Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Thu, 7 Jan 2021 16:52:15 +0200
Subject: [PATCH 50/67] counter: intel-qep: Remove "direction" sysfs

The direction information to userspace is SW generated and is likely to
be wrong at the begining. The HW can tell the direction explicitly only
when count value does zero crossing and generates the QEPRST_UP or
QEPRST_DOWN interrupt. HW will also generate QEPDIR interrupt when
direction changes.

Now "direction" sysfs may show bogus "forward" direction right after
enabling despite if real direction is backward. Now if direction changes
before zero crossing it can only toggle and will get correct information
only when count value zero crosses.

Due these remove "direction" sysfs since it cannot show correct
information at the begining and mask the related interrupts.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/counter/intel-qep.c | 31 ++++---------------------------
 1 file changed, 4 insertions(+), 27 deletions(-)

diff --git a/drivers/counter/intel-qep.c b/drivers/counter/intel-qep.c
index 7733fcd35f41..e002da4b1224 100644
--- a/drivers/counter/intel-qep.c
+++ b/drivers/counter/intel-qep.c
@@ -60,12 +60,12 @@
 #define INTEL_QEPINT_QEPRST_DOWN	BIT(1)
 #define INTEL_QEPINT_WDT		BIT(0)
 
-#define INTEL_QEPINT_MASK_DEFAULT	INTEL_QEPINT_WDT
+#define INTEL_QEPINT_MASK_DEFAULT	(INTEL_QEPINT_WDT | \
+					INTEL_QEPINT_QEPRST_DOWN | \
+					INTEL_QEPINT_QEPRST_UP | \
+					INTEL_QEPINT_QEPDIR)
 #define INTEL_QEPINT_MASK_ALL		GENMASK(5, 0)
 
-#define INTEL_QEP_DIRECTION_FORWARD	1
-#define INTEL_QEP_DIRECTION_BACKWARD	!INTEL_QEP_DIRECTION_FORWARD
-
 #define INTEL_QEP_OP_MODE_QEP		0
 #define INTEL_QEP_OP_MODE_CC		1
 
@@ -101,7 +101,6 @@ struct intel_qep {
 	struct device *dev;
 	void __iomem *regs;
 	u32 int_stat;
-	int direction;
 	bool enabled;
 	bool phase_error;
 	int op_mode;
@@ -142,8 +141,6 @@ static void intel_qep_init(struct intel_qep *qep, bool reset)
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
 
 	intel_qep_writel(qep, INTEL_QEPINT_MASK, INTEL_QEPINT_MASK_DEFAULT);
-
-	qep->direction = INTEL_QEP_DIRECTION_FORWARD;
 }
 
 static irqreturn_t intel_qep_irq_thread(int irq, void *_qep)
@@ -168,15 +165,6 @@ static irqreturn_t intel_qep_irq_thread(int irq, void *_qep)
 	if (stat & INTEL_QEPINT_FIFOENTRY)
 		dev_dbg(qep->dev, "Fifo Entry\n");
 
-	if (stat & INTEL_QEPINT_QEPDIR)
-		qep->direction = !qep->direction;
-
-	if (stat & INTEL_QEPINT_QEPRST_UP)
-		qep->direction = INTEL_QEP_DIRECTION_FORWARD;
-
-	if (stat & INTEL_QEPINT_QEPRST_DOWN)
-		qep->direction = INTEL_QEP_DIRECTION_BACKWARD;
-
 	intel_qep_writel(qep, INTEL_QEPINT_MASK, INTEL_QEPINT_MASK_DEFAULT);
 	mutex_unlock(&qep->lock);
 
@@ -442,16 +430,6 @@ static ssize_t enable_write(struct counter_device *counter,
 	return len;
 }
 
-static ssize_t direction_read(struct counter_device *counter,
-			      struct counter_count *count,
-			      void *priv, char *buf)
-{
-	struct intel_qep *qep = counter_to_qep(counter);
-
-	return snprintf(buf, PAGE_SIZE, "%s\n", qep->direction ?
-			"forward" : "backward");
-}
-
 static ssize_t phase_error_read(struct counter_device *counter,
 				struct counter_count *count,
 				void *priv, char *buf)
@@ -555,7 +533,6 @@ static ssize_t capture_mode_write(struct counter_device *counter,
 static const struct counter_count_ext intel_qep_count_ext[] = {
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(ceiling),
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(enable),
-	INTEL_QEP_COUNTER_COUNT_EXT_RO(direction),
 	INTEL_QEP_COUNTER_COUNT_EXT_RO(phase_error),
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(operating_mode),
 	INTEL_QEP_COUNTER_COUNT_EXT_RO(capture_data),
-- 
2.25.1

