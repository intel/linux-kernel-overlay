From 494168bc4e3a22f3beb40ca953a24c53dd348ef1 Mon Sep 17 00:00:00 2001
From: Wei Qiao <wei.qiao@intel.com>
Date: Wed, 9 Nov 2022 09:28:17 +0800
Subject: [PATCH 03/33] Revert "net: wwan: t7xx: Avoid calls to
 skb_data_area_size()"

This reverts commit 4fbfb473589ea9eca236e68f54e7e788b4eaee9c.
---
 drivers/net/wwan/t7xx/t7xx_hif_cldma.c     | 12 +++++++++---
 drivers/net/wwan/t7xx/t7xx_hif_dpmaif_rx.c |  7 +++++--
 2 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/drivers/net/wwan/t7xx/t7xx_hif_cldma.c b/drivers/net/wwan/t7xx/t7xx_hif_cldma.c
index b908c532c04b..e78995ecb63e 100644
--- a/drivers/net/wwan/t7xx/t7xx_hif_cldma.c
+++ b/drivers/net/wwan/t7xx/t7xx_hif_cldma.c
@@ -101,6 +101,11 @@ static void t7xx_cldma_rgpd_set_next_ptr(struct cldma_rgpd *rgpd, dma_addr_t nex
 	rgpd->next_gpd_ptr_l = cpu_to_le32(lower_32_bits(next_ptr));
 }
 
+static unsigned int t7xx_skb_data_area_size(struct sk_buff *skb)
+{
+	return skb_end_pointer(skb) - skb->data;
+}
+
 static int t7xx_cldma_alloc_and_map_skb(struct cldma_ctrl *md_ctrl, struct cldma_request *req,
 					size_t size)
 {
@@ -108,7 +113,8 @@ static int t7xx_cldma_alloc_and_map_skb(struct cldma_ctrl *md_ctrl, struct cldma
 	if (!req->skb)
 		return -ENOMEM;
 
-	req->mapped_buff = dma_map_single(md_ctrl->dev, req->skb->data, size, DMA_FROM_DEVICE);
+	req->mapped_buff = dma_map_single(md_ctrl->dev, req->skb->data,
+					  t7xx_skb_data_area_size(req->skb), DMA_FROM_DEVICE);
 	if (dma_mapping_error(md_ctrl->dev, req->mapped_buff)) {
 		dev_kfree_skb_any(req->skb);
 		req->skb = NULL;
@@ -164,7 +170,7 @@ static int t7xx_cldma_gpd_rx_from_q(struct cldma_queue *queue, int budget, bool
 
 		if (req->mapped_buff) {
 			dma_unmap_single(md_ctrl->dev, req->mapped_buff,
-					 queue->tr_ring->pkt_size, DMA_FROM_DEVICE);
+					 t7xx_skb_data_area_size(skb), DMA_FROM_DEVICE);
 			req->mapped_buff = 0;
 		}
 
@@ -387,7 +393,7 @@ static void t7xx_cldma_ring_free(struct cldma_ctrl *md_ctrl,
 	list_for_each_entry_safe(req_cur, req_next, &ring->gpd_ring, entry) {
 		if (req_cur->mapped_buff && req_cur->skb) {
 			dma_unmap_single(md_ctrl->dev, req_cur->mapped_buff,
-					 ring->pkt_size, tx_rx);
+					 t7xx_skb_data_area_size(req_cur->skb), tx_rx);
 			req_cur->mapped_buff = 0;
 		}
 
diff --git a/drivers/net/wwan/t7xx/t7xx_hif_dpmaif_rx.c b/drivers/net/wwan/t7xx/t7xx_hif_dpmaif_rx.c
index 91a0eb19e0d8..57ec49f9fc11 100644
--- a/drivers/net/wwan/t7xx/t7xx_hif_dpmaif_rx.c
+++ b/drivers/net/wwan/t7xx/t7xx_hif_dpmaif_rx.c
@@ -151,12 +151,15 @@ static bool t7xx_alloc_and_map_skb_info(const struct dpmaif_ctrl *dpmaif_ctrl,
 {
 	dma_addr_t data_bus_addr;
 	struct sk_buff *skb;
+	size_t data_len;
 
 	skb = __dev_alloc_skb(size, GFP_KERNEL);
 	if (!skb)
 		return false;
 
-	data_bus_addr = dma_map_single(dpmaif_ctrl->dev, skb->data, size, DMA_FROM_DEVICE);
+	data_len = skb_end_pointer(skb) - skb->data;
+
+	data_bus_addr = dma_map_single(dpmaif_ctrl->dev, skb->data, data_len, DMA_FROM_DEVICE);
 	if (dma_mapping_error(dpmaif_ctrl->dev, data_bus_addr)) {
 		dev_err_ratelimited(dpmaif_ctrl->dev, "DMA mapping error\n");
 		dev_kfree_skb_any(skb);
@@ -165,7 +168,7 @@ static bool t7xx_alloc_and_map_skb_info(const struct dpmaif_ctrl *dpmaif_ctrl,
 
 	cur_skb->skb = skb;
 	cur_skb->data_bus_addr = data_bus_addr;
-	cur_skb->data_len = size;
+	cur_skb->data_len = data_len;
 
 	return true;
 }
-- 
2.25.1

