From 3f48397d490622b4f8ee707771a2551975a8db8b Mon Sep 17 00:00:00 2001
From: Michal Wajdeczko <michal.wajdeczko@intel.com>
Date: Thu, 19 Aug 2021 21:52:21 +0200
Subject: [PATCH 07/14] drm/i915/pf: Allow to save/restore GuC VF state
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add binary attribute 'state' under vf/gt/ to allow saving
and restoring GuC state:

/sys/class/drm/card*/iov/
├── vf*
│   ├── gt*
│   │   ├── state
│   │   └── ...

Note that some restrictions apply:
 - to save the state, VF must be paused
 - to restore the state, VF must be not running

v2: change permission to 0600
v3: define GuC buffer size used for state save/restore
v4: make the GuC buffer size dynamic
v5: Update GuC command to match Save/Restore v2 specification

GuC: 64.0.1
Signed-off-by: Michal Wajdeczko <michal.wajdeczko@intel.com> #v1 #v2 #v3
Signed-off-by: Tomasz Lis <tomasz.lis@intel.com> #v4 #v5
Acked-by: Piotr Piórkowski <piotr.piorkowski@intel.com> #v3
Acked-by: Michal Winiarski <michal.winiarski@intel.com> #v4 #v5
Signed-off-by: Zawawi, Muhammad Zul Husni <muhammad.zul.husni.zawawi@intel.com>
---
 drivers/gpu/drm/i915/gt/iov/intel_iov_state.c | 196 ++++++++++++++++++
 drivers/gpu/drm/i915/gt/iov/intel_iov_state.h |   3 +
 drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c |  45 ++++
 .../drm/i915/gt/uc/abi/guc_actions_pf_abi.h   |  61 ++++++
 4 files changed, 305 insertions(+)

diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
index 45a8cccdc998..c29a56c5d605 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
@@ -619,3 +619,199 @@ int intel_iov_state_restore_ggtt(struct intel_iov *iov, u32 vfid, const void *bu
 
 	return ret;
 }
+
+static int guc_action_save_restore_vf(struct intel_guc *guc, u32 vfid, u32 opcode,
+				       u64 offset, u32 size)
+{
+	u32 request[PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_LEN] = {
+		FIELD_PREP(GUC_HXG_MSG_0_ORIGIN, GUC_HXG_ORIGIN_HOST) |
+		FIELD_PREP(GUC_HXG_MSG_0_TYPE, GUC_HXG_TYPE_REQUEST) |
+		FIELD_PREP(GUC_HXG_REQUEST_MSG_0_ACTION, GUC_ACTION_PF2GUC_SAVE_RESTORE_VF) |
+		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_0_OPCODE, opcode),
+		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_1_VFID, vfid),
+		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_2_BUFF_LO, lower_32_bits(offset)),
+		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_3_BUFF_HI, upper_32_bits(offset)),
+		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_4_BUFF_SZ, size) |
+		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_4_MBZ, 0),
+	};
+	int ret;
+
+	ret = intel_guc_send(guc, request, ARRAY_SIZE(request));
+
+	return (offset && ret > size) ? -EPROTO : ret;
+}
+
+static int pf_save_vf_size(struct intel_iov *iov, u32 vfid)
+{
+	struct intel_guc *guc = iov_to_guc(iov);
+	int ret;
+
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+	GEM_BUG_ON(vfid > pf_get_totalvfs(iov));
+	GEM_BUG_ON(!vfid);
+
+	ret = guc_action_save_restore_vf(guc, vfid, GUC_PF_OPCODE_VF_SAVE, 0, 0);
+
+	if (unlikely(ret < 0)) {
+		IOV_ERROR(iov, "Failed to query VF%u save state size (%pe)\n", vfid, ERR_PTR(ret));
+		return ret;
+	}
+
+	return ret * sizeof(u32);
+}
+
+static int pf_save_vf(struct intel_iov *iov, u32 vfid, void *buf, u32 size)
+{
+	struct intel_guc *guc = iov_to_guc(iov);
+	struct i915_vma *vma;
+	void *blob;
+	int ret;
+	u32 rsize = 0;
+
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+	GEM_BUG_ON(vfid > pf_get_totalvfs(iov));
+	GEM_BUG_ON(!vfid);
+
+	ret = intel_guc_allocate_and_map_vma(guc, size, &vma, (void **)&blob);
+	if (unlikely(ret))
+		goto failed;
+
+	ret = guc_action_save_restore_vf(guc, vfid, GUC_PF_OPCODE_VF_SAVE,
+					 intel_guc_ggtt_offset(guc, vma),
+					 size / sizeof(u32));
+
+	if (likely(ret > 0)) {
+		memcpy(buf, blob, size);
+		rsize = ret * sizeof(u32);
+
+		if (IS_ENABLED(CONFIG_DRM_I915_SELFTEST) &&
+		    memchr_inv(buf + rsize, 0, size - rsize)) {
+			pr_err("non-zero state found beyond offset %u!\n", rsize);
+		}
+	}
+
+	i915_vma_unpin_and_release(&vma, I915_VMA_RELEASE_MAP);
+
+	if (unlikely(ret < 0))
+		goto failed;
+
+	IOV_DEBUG(iov, "VF%u: state saved (%u bytes) %*ph ..\n",
+		  vfid, rsize, min_t(u32, 16, rsize), buf);
+	return rsize;
+
+failed:
+	IOV_ERROR(iov, "Failed to save VF%u state (%pe)\n", vfid, ERR_PTR(ret));
+	return ret;
+}
+
+/*
+ * intel_iov_state_save_vf_size - Query VF save state size.
+ * @iov: the IOV struct
+ * @vfid: VF identifier
+ *
+ * This function is for PF only.
+ *
+ * Return: size in bytes on success or a negative error code on failure.
+ */
+int intel_iov_state_save_vf_size(struct intel_iov *iov, u32 vfid)
+{
+	struct intel_runtime_pm *rpm = iov_to_gt(iov)->uncore->rpm;
+	intel_wakeref_t wakeref;
+	int ret = -ENONET;
+
+	with_intel_runtime_pm(rpm, wakeref)
+		ret = pf_save_vf_size(iov, vfid);
+
+	return ret;
+}
+
+/**
+ * intel_iov_state_save_vf - Save VF state.
+ * @iov: the IOV struct
+ * @vfid: VF identifier
+ * @buf: buffer to save VF state
+ * @size: size of the buffer (in bytes)
+ *
+ * This function is for PF only.
+ *
+ * Return: saved state size (in bytes) on success or a negative error code on failure.
+ */
+int intel_iov_state_save_vf(struct intel_iov *iov, u32 vfid, void *buf, size_t size)
+{
+	struct intel_runtime_pm *rpm = iov_to_gt(iov)->uncore->rpm;
+	intel_wakeref_t wakeref;
+	int ret = -ENONET;
+
+	if (size < PF2GUC_SAVE_RESTORE_VF_BUFF_MIN_SIZE)
+		return -EINVAL;
+
+	with_intel_runtime_pm(rpm, wakeref)
+		ret = pf_save_vf(iov, vfid, buf, size);
+
+	return ret;
+}
+
+static int pf_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf, size_t size)
+{
+	struct intel_guc *guc = iov_to_guc(iov);
+	struct i915_vma *vma;
+	void *blob;
+	int ret;
+	u32 rsize = 0;
+
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+	GEM_BUG_ON(vfid > pf_get_totalvfs(iov));
+	GEM_BUG_ON(!vfid);
+
+	ret = intel_guc_allocate_and_map_vma(guc, size,
+					     &vma, (void **)&blob);
+	if (unlikely(ret < 0))
+		goto failed;
+
+	memcpy(blob, buf, size);
+
+	ret = guc_action_save_restore_vf(guc, vfid, GUC_PF_OPCODE_VF_RESTORE,
+					 intel_guc_ggtt_offset(guc, vma),
+					 size / sizeof(u32));
+
+	i915_vma_unpin_and_release(&vma, I915_VMA_RELEASE_MAP);
+
+	if (unlikely(ret < 0))
+		goto failed;
+
+	rsize = ret * sizeof(u32);
+	IOV_DEBUG(iov, "VF%u: state restored (%u bytes) %*ph\n",
+		  vfid, rsize, min_t(u32, 16, rsize), buf);
+	return rsize;
+
+failed:
+	IOV_ERROR(iov, "Failed to restore VF%u state (%pe) %*ph\n",
+		  vfid, ERR_PTR(ret), 16, buf);
+	return ret;
+}
+
+/**
+ * intel_iov_state_restore_vf - Restore VF state.
+ * @iov: the IOV struct
+ * @vfid: VF identifier
+ * @buf: buffer with VF state to restore
+ * @size: size of the buffer (in bytes)
+ *
+ * This function is for PF only.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int intel_iov_state_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf, size_t size)
+{
+	struct intel_runtime_pm *rpm = iov_to_gt(iov)->uncore->rpm;
+	intel_wakeref_t wakeref;
+	int err = -ENONET;
+
+	if (size != PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE)
+		return -EINVAL;
+
+	with_intel_runtime_pm(rpm, wakeref)
+		err = pf_restore_vf(iov, vfid, buf, size);
+
+	return err;
+}
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
index 2306f39472c7..0725d3d2824f 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
@@ -20,8 +20,11 @@ bool intel_iov_state_no_flr(struct intel_iov *iov, u32 vfid);
 int intel_iov_state_pause_vf(struct intel_iov *iov, u32 vfid);
 int intel_iov_state_resume_vf(struct intel_iov *iov, u32 vfid);
 int intel_iov_state_stop_vf(struct intel_iov *iov, u32 vfid);
+int intel_iov_state_save_vf_size(struct intel_iov *iov, u32 vfid);
 ssize_t intel_iov_state_save_ggtt(struct intel_iov *iov, u32 vfid, void *buf, size_t size);
 int intel_iov_state_restore_ggtt(struct intel_iov *iov, u32 vfid, const void *buf, size_t size);
+int intel_iov_state_save_vf(struct intel_iov *iov, u32 vfid, void *buf, size_t size);
+int intel_iov_state_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf, size_t size);
 
 int intel_iov_state_process_guc2pf(struct intel_iov *iov,
 				   const u32 *msg, u32 len);
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c b/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c
index 6f060e4d52e4..2be9b4a8d57a 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c
@@ -4,6 +4,7 @@
  */
 
 #include "intel_iov_provisioning.h"
+#include "intel_iov_state.h"
 #include "intel_iov_sysfs.h"
 #include "intel_iov_types.h"
 #include "intel_iov_utils.h"
@@ -485,9 +486,53 @@ static umode_t vf_attr_is_visible(struct kobject *kobj,
 	return attr->mode;
 }
 
+static ssize_t bin_attr_state_read(struct file *filp, struct kobject *kobj,
+				   struct bin_attribute *bin_attr, char *buf,
+				   loff_t off, size_t count)
+{
+	struct intel_iov *iov = kobj_to_iov(kobj);
+	unsigned int id = kobj_to_id(kobj);
+	int err;
+
+	if (off > 0)
+		return -EINVAL;
+
+	err = intel_iov_state_save_vf(iov, id, buf, count);
+	if (unlikely(err))
+		return err;
+
+	return SZ_4K;
+}
+
+static ssize_t bin_attr_state_write(struct file *filp, struct kobject *kobj,
+				    struct bin_attribute *bin_attr, char *buf,
+				    loff_t off, size_t count)
+{
+	struct intel_iov *iov = kobj_to_iov(kobj);
+	unsigned int id = kobj_to_id(kobj);
+	int err;
+
+	if (off > 0)
+		return -EINVAL;
+
+	err = intel_iov_state_restore_vf(iov, id, buf, count);
+	if (unlikely(err))
+		return err;
+
+	return count;
+}
+
+static BIN_ATTR(state, 0600, bin_attr_state_read, bin_attr_state_write, SZ_4K);
+
+static struct bin_attribute *vf_bin_attrs[] = {
+	&bin_attr_state,
+	NULL
+};
+
 static const struct attribute_group vf_attr_group = {
 	.attrs = vf_attrs,
 	.is_visible = vf_attr_is_visible,
+	.bin_attrs = vf_bin_attrs,
 };
 
 static const struct attribute_group vf_threshold_attr_group = {
diff --git a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h
index be2ea953587a..5ed78a237a14 100644
--- a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h
+++ b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h
@@ -448,4 +448,65 @@
 #define   GUC_PF_TRIGGER_VF_FLR_START			4
 #define   GUC_PF_TRIGGER_VF_FLR_FINISH			5
 
+/**
+ * DOC: PF2GUC_SAVE_RESTORE_VF
+ *
+ * This message is used by the PF to migrate VF info state maintained by the GuC.
+ *
+ * This message must be sent as `CTB HXG Message`_.
+ *
+ *  +---+-------+--------------------------------------------------------------+
+ *  |   | Bits  | Description                                                  |
+ *  +===+=======+==============================================================+
+ *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_HOST_                                |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 30:28 | TYPE = GUC_HXG_TYPE_REQUEST_                                 |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 27:16 | DATA0 = **OPCODE** - operation to take:                      |
+ *  |   |       |                                                              |
+ *  |   |       |   - _`GUC_PF_OPCODE_VF_SAVE` = 0                             |
+ *  |   |       |   - _`GUC_PF_OPCODE_VF_RESTORE` = 1                          |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   |  15:0 | ACTION = _`GUC_ACTION_PF2GUC_SAVE_RESTORE_VF` = 0x550B       |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 1 |  31:0 | DATA1 = **VFID** - VF identifier                             |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 2 |  31:0 | DATA2 = **BUFF_LO** - lower 32-bits of GGTT offset to the 4K |
+ *  |   |       | buffer where the VF info will be save to or restored from.   |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 3 |  31:0 | DATA3 = **BUFF_HI** - upper 32-bits of GGTT offset to the 4K |
+ *  |   |       | buffer where the VF info will be save to or restored from.   |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 4 |  27:0 | DATA4 = **BUFF_SZ** - size of the buffer provided (in dwords)|
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 31:28 | DATA5 = MBZ                                                  |
+ *  +---+-------+--------------------------------------------------------------+
+ *
+ *  +---+-------+--------------------------------------------------------------+
+ *  |   | Bits  | Description                                                  |
+ *  +===+=======+==============================================================+
+ *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_GUC_                                 |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 30:28 | TYPE = GUC_HXG_TYPE_RESPONSE_SUCCESS_                        |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   |  27:0 | DATA0 = **USED** - size of used buffer space (in dwords)     |
+ *  +---+-------+--------------------------------------------------------------+
+ */
+#define GUC_ACTION_PF2GUC_SAVE_RESTORE_VF		0x550B
+
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_LEN		(GUC_HXG_EVENT_MSG_MIN_LEN + 5u)
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_0_OPCODE	GUC_HXG_EVENT_MSG_0_DATA0
+#define   GUC_PF_OPCODE_VF_SAVE				0
+#define   GUC_PF_OPCODE_VF_RESTORE			1
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_1_VFID	GUC_HXG_EVENT_MSG_n_DATAn
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_2_BUFF_LO	GUC_HXG_EVENT_MSG_n_DATAn
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_3_BUFF_HI	GUC_HXG_EVENT_MSG_n_DATAn
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_4_BUFF_SZ	(0x0fffffff << 0)
+#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_4_MBZ	(0xf << 28)
+
+#define PF2GUC_SAVE_RESTORE_VF_RESPONSE_MSG_LEN		GUC_HXG_RESPONSE_MSG_MIN_LEN
+#define PF2GUC_SAVE_RESTORE_VF_RESPONSE_MSG_0_USED	GUC_HXG_RESPONSE_MSG_0_DATA0
+
+#define PF2GUC_SAVE_RESTORE_VF_BUFF_MIN_SIZE		32
+
 #endif /* __GUC_ACTIONS_PF_ABI_H__ */
-- 
2.25.1

