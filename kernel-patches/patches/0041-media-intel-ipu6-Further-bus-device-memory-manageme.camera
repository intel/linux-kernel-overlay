From c0171ab8e65b64b1e447822926286198a23d9604 Mon Sep 17 00:00:00 2001
From: Chen Meng J <meng.j.chen@intel.com>
Date: Wed, 12 Jul 2023 14:21:16 +0800
Subject: [PATCH 41/43] media: intel-ipu6: Further bus device memory management

Change Description:
Following commit 4dadba5980d9 ("device memory management"):
Replace the devm_kzalloc() with a regular kzalloc() and make
the release callback free the memory with kfree(), so that
the lifetime of the struct device is properly managed by
the refcount insted of being tied to the parent pci-device.
This patch also apply the change to 'pdata'.

Test Platform:
tglrvp
volteer

Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
---
 drivers/media/pci/intel/ipu-bus.c | 1 +
 drivers/media/pci/intel/ipu.c     | 8 ++++++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/drivers/media/pci/intel/ipu-bus.c b/drivers/media/pci/intel/ipu-bus.c
index 8020132e955e..b8a77dcdadc5 100644
--- a/drivers/media/pci/intel/ipu-bus.c
+++ b/drivers/media/pci/intel/ipu-bus.c
@@ -146,6 +146,7 @@ static void ipu_bus_release(struct device *dev)
 {
 	struct ipu_bus_device *adev = to_ipu_bus_device(dev);
 
+	kfree(adev->pdata);
 	kfree(adev);
 }
 
diff --git a/drivers/media/pci/intel/ipu.c b/drivers/media/pci/intel/ipu.c
index d0298f477eab..a17807f1a1b1 100644
--- a/drivers/media/pci/intel/ipu.c
+++ b/drivers/media/pci/intel/ipu.c
@@ -77,7 +77,7 @@ static struct ipu_bus_device *ipu_isys_init(struct pci_dev *pdev,
 #endif
 	int ret;
 
-	pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
+	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
 	if (!pdata)
 		return ERR_PTR(-ENOMEM);
 
@@ -96,6 +96,7 @@ static struct ipu_bus_device *ipu_isys_init(struct pci_dev *pdev,
 	if (IS_ERR(isys)) {
 		dev_err_probe(&pdev->dev, PTR_ERR(isys),
 			      "ipu_bus_initialize_device(isys) failed\n");
+		kfree(pdata);
 		return isys;
 	}
 #if IS_ENABLED(CONFIG_INTEL_IPU6_ACPI)
@@ -115,6 +116,7 @@ static struct ipu_bus_device *ipu_isys_init(struct pci_dev *pdev,
 	if (IS_ERR(isys->mmu)) {
 		dev_err_probe(&pdev->dev, PTR_ERR(isys->mmu),
 			      "ipu_mmu_init(isys->mmu) failed\n");
+		put_device(&isys->dev);
 		return ERR_CAST(isys->mmu);
 	}
 
@@ -138,7 +140,7 @@ static struct ipu_bus_device *ipu_psys_init(struct pci_dev *pdev,
 	struct ipu_psys_pdata *pdata;
 	int ret;
 
-	pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
+	pdata = kzalloc(sizeof(*pdata), GFP_KERNEL);
 	if (!pdata)
 		return ERR_PTR(-ENOMEM);
 
@@ -150,6 +152,7 @@ static struct ipu_bus_device *ipu_psys_init(struct pci_dev *pdev,
 	if (IS_ERR(psys)) {
 		dev_err_probe(&pdev->dev, PTR_ERR(psys),
 			      "ipu_bus_initialize_device(psys) failed\n");
+		kfree(pdata);
 		return psys;
 	}
 
@@ -158,6 +161,7 @@ static struct ipu_bus_device *ipu_psys_init(struct pci_dev *pdev,
 	if (IS_ERR(psys->mmu)) {
 		dev_err_probe(&pdev->dev, PTR_ERR(psys->mmu),
 			      "ipu_mmu_init(psys->mmu) failed\n");
+		put_device(&psys->dev);
 		return ERR_CAST(psys->mmu);
 	}
 
-- 
2.25.1

