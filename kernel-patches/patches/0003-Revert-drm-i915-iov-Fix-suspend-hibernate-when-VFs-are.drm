From 09cbef6d77f9730a74bdf2b2a57e41038e8d27a3 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Mon, 28 Nov 2022 13:11:35 +0800
Subject: [PATCH 0003/2779] Revert "drm/i915/iov: Fix suspend/hibernate when
 VFs are enabled"

This reverts commit 4e85965d46c47eb1b2cae8f417dee8deff078f3d.
---
 drivers/gpu/drm/i915/gt/intel_gt_pm.c   |  3 ---
 drivers/gpu/drm/i915/gt/iov/intel_iov.c | 33 -------------------------
 drivers/gpu/drm/i915/gt/iov/intel_iov.h |  6 -----
 drivers/gpu/drm/i915/i915_driver.c      |  3 ---
 drivers/gpu/drm/i915/i915_sriov.c       |  5 ++--
 5 files changed, 2 insertions(+), 48 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/intel_gt_pm.c b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
index 6ec762a049c2..ff306f18a522 100644
--- a/drivers/gpu/drm/i915/gt/intel_gt_pm.c
+++ b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
@@ -19,7 +19,6 @@
 #include "intel_rc6.h"
 #include "intel_rps.h"
 #include "intel_wakeref.h"
-#include "iov/intel_iov.h"
 #include "pxp/intel_pxp_pm.h"
 
 #define I915_GT_SUSPEND_IDLE_TIMEOUT (HZ / 2)
@@ -313,8 +312,6 @@ static void wait_for_suspend(struct intel_gt *gt)
 
 void intel_gt_suspend_prepare(struct intel_gt *gt)
 {
-	intel_iov_suspend(&gt->iov);
-
 	user_forcewake(gt, true);
 	wait_for_suspend(gt);
 
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov.c b/drivers/gpu/drm/i915/gt/iov/intel_iov.c
index 43ea2e9a7cba..dad94248d6e1 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov.c
@@ -10,7 +10,6 @@
 #include "intel_iov_service.h"
 #include "intel_iov_state.h"
 #include "intel_iov_utils.h"
-#include "gt/intel_gt_pm.h"
 
 /**
  * intel_iov_init_early - Prepare IOV data.
@@ -293,38 +292,6 @@ int intel_iov_init_late(struct intel_iov *iov)
 	return 0;
 }
 
-void intel_iov_pf_get_pm_vfs(struct intel_iov *iov)
-{
-	GEM_BUG_ON(!intel_iov_is_pf(iov));
-
-	intel_gt_pm_get_untracked(iov_to_gt(iov));
-}
-
-void intel_iov_pf_put_pm_vfs(struct intel_iov *iov)
-{
-	GEM_BUG_ON(!intel_iov_is_pf(iov));
-
-	intel_gt_pm_put_untracked(iov_to_gt(iov));
-}
-
-void intel_iov_suspend(struct intel_iov *iov)
-{
-	if (!intel_iov_is_pf(iov))
-		return;
-
-	if (pci_num_vf(to_pci_dev(iov_to_i915(iov)->drm.dev)) != 0)
-		intel_iov_pf_put_pm_vfs(iov);
-}
-
-void intel_iov_resume(struct intel_iov *iov)
-{
-	if (!intel_iov_is_pf(iov))
-		return;
-
-	if (pci_num_vf(to_pci_dev(iov_to_i915(iov)->drm.dev)) != 0)
-		intel_iov_pf_get_pm_vfs(iov);
-}
-
 #if IS_ENABLED(CONFIG_DRM_I915_SELFTEST)
 #include "selftests/selftest_live_iov_ggtt.c"
 #endif
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov.h b/drivers/gpu/drm/i915/gt/iov/intel_iov.h
index 7547fa24ea5c..3cc5d18f470c 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov.h
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov.h
@@ -21,10 +21,4 @@ int intel_iov_init_hw(struct intel_iov *iov);
 void intel_iov_fini_hw(struct intel_iov *iov);
 int intel_iov_init_late(struct intel_iov *iov);
 
-void intel_iov_pf_get_pm_vfs(struct intel_iov *iov);
-void intel_iov_pf_put_pm_vfs(struct intel_iov *iov);
-
-void intel_iov_suspend(struct intel_iov *iov);
-void intel_iov_resume(struct intel_iov *iov);
-
 #endif /* __INTEL_IOV_H__ */
diff --git a/drivers/gpu/drm/i915/i915_driver.c b/drivers/gpu/drm/i915/i915_driver.c
index 10ea4d7f33a4..25ac71a2088f 100644
--- a/drivers/gpu/drm/i915/i915_driver.c
+++ b/drivers/gpu/drm/i915/i915_driver.c
@@ -1453,11 +1453,8 @@ static int i915_drm_resume_early(struct drm_device *dev)
 
 	intel_power_domains_resume(dev_priv);
 
-	intel_iov_resume(&to_gt(dev_priv)->iov);
-
 	enable_rpm_wakeref_asserts(&dev_priv->runtime_pm);
 
-
 	return ret;
 }
 
diff --git a/drivers/gpu/drm/i915/i915_sriov.c b/drivers/gpu/drm/i915/i915_sriov.c
index 5c86dcdcb336..e6abee3edbb8 100644
--- a/drivers/gpu/drm/i915/i915_sriov.c
+++ b/drivers/gpu/drm/i915/i915_sriov.c
@@ -10,7 +10,6 @@
 
 #include "gt/intel_gt.h"
 #include "gt/intel_gt_pm.h"
-#include "gt/iov/intel_iov.h"
 #include "gt/iov/intel_iov_provisioning.h"
 #include "gt/iov/intel_iov_state.h"
 #include "gt/iov/intel_iov_utils.h"
@@ -434,7 +433,7 @@ int i915_sriov_pf_enable_vfs(struct drm_i915_private *i915, int num_vfs)
 		goto fail;
 
 	/* hold the reference to runtime pm as long as VFs are enabled */
-	intel_iov_pf_get_pm_vfs(&to_gt(i915)->iov);
+	intel_gt_pm_get_untracked(to_gt(i915));
 
 	err = intel_iov_provisioning_verify(&to_gt(i915)->iov, num_vfs);
 	if (err == -ENODATA) {
@@ -535,7 +534,7 @@ int i915_sriov_pf_disable_vfs(struct drm_i915_private *i915)
 
 	pf_update_guc_clients(&to_gt(i915)->iov, 0);
 	intel_iov_provisioning_auto(&to_gt(i915)->iov, 0);
-	intel_iov_pf_put_pm_vfs(&to_gt(i915)->iov);
+	intel_gt_pm_put_untracked(to_gt(i915));
 
 	dev_info(dev, "Disabled %u VFs\n", num_vfs);
 	return 0;
-- 
2.25.1

