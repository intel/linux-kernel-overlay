From 0f52708471eb73e267a0647f785a6a386fe635d7 Mon Sep 17 00:00:00 2001
From: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Date: Fri, 4 Jun 2021 11:03:50 +0800
Subject: [PATCH 05/24] stmmac: intel: Enable 2.5Gbps on Intel AlderLake

Intel AlderLake platform is capable of 2.5Gbps.

This patch enables the 2.5Gbps link speed by adding the callback
function in the AlderLake platform data.

Unlike any other platforms, Intel AlderLake has most of the SerDes
PLL clock configuration done in the BIOS. Hence, we need to avoid
performing a xPCS soft reset on driver load.

Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Signed-off-by: Wong Vee Khee <vee.khee.wong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac-intel.c    | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
index 8e8778cfbbad..aded6f79dbdf 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
@@ -770,13 +770,15 @@ static int adls_sgmii_phy0_data(struct pci_dev *pdev,
 {
 	plat->bus_id = 1;
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
+	plat->speed_mode_2500 = intel_speed_mode_2500;
+	plat->skip_reset = 1;
 
 	/* SerDes power up and power down are done in BIOS for ADL */
 
 	return tgl_common_data(pdev, plat);
 }
 
-static struct stmmac_pci_info adls_sgmii1g_phy0_info = {
+static struct stmmac_pci_info adls_sgmii_phy0_info = {
 	.setup = adls_sgmii_phy0_data,
 };
 
@@ -785,13 +787,15 @@ static int adls_sgmii_phy1_data(struct pci_dev *pdev,
 {
 	plat->bus_id = 2;
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
+	plat->speed_mode_2500 = intel_speed_mode_2500;
+	plat->skip_reset = 1;
 
 	/* SerDes power up and power down are done in BIOS for ADL */
 
 	return tgl_common_data(pdev, plat);
 }
 
-static struct stmmac_pci_info adls_sgmii1g_phy1_info = {
+static struct stmmac_pci_info adls_sgmii_phy1_info = {
 	.setup = adls_sgmii_phy1_data,
 };
 static const struct stmmac_pci_func_data galileo_stmmac_func_data[] = {
@@ -1158,8 +1162,8 @@ static SIMPLE_DEV_PM_OPS(intel_eth_pm_ops, intel_eth_pci_suspend,
 #define PCI_DEVICE_ID_INTEL_TGLH_SGMII1G_0	0x43ac
 #define PCI_DEVICE_ID_INTEL_TGLH_SGMII1G_1	0x43a2
 #define PCI_DEVICE_ID_INTEL_TGL_SGMII1G		0xa0ac
-#define PCI_DEVICE_ID_INTEL_ADLS_SGMII1G_0	0x7aac
-#define PCI_DEVICE_ID_INTEL_ADLS_SGMII1G_1	0x7aad
+#define PCI_DEVICE_ID_INTEL_ADLS_SGMII_0	0x7aac
+#define PCI_DEVICE_ID_INTEL_ADLS_SGMII_1	0x7aad
 
 static const struct pci_device_id intel_eth_pci_id_table[] = {
 	{ PCI_DEVICE_DATA(INTEL, QUARK, &quark_info) },
@@ -1175,8 +1179,8 @@ static const struct pci_device_id intel_eth_pci_id_table[] = {
 	{ PCI_DEVICE_DATA(INTEL, TGL_SGMII1G, &tgl_sgmii1g_phy0_info) },
 	{ PCI_DEVICE_DATA(INTEL, TGLH_SGMII1G_0, &tgl_sgmii1g_phy0_info) },
 	{ PCI_DEVICE_DATA(INTEL, TGLH_SGMII1G_1, &tgl_sgmii1g_phy1_info) },
-	{ PCI_DEVICE_DATA(INTEL, ADLS_SGMII1G_0, &adls_sgmii1g_phy0_info) },
-	{ PCI_DEVICE_DATA(INTEL, ADLS_SGMII1G_1, &adls_sgmii1g_phy1_info) },
+	{ PCI_DEVICE_DATA(INTEL, ADLS_SGMII_0, &adls_sgmii_phy0_info) },
+	{ PCI_DEVICE_DATA(INTEL, ADLS_SGMII_1, &adls_sgmii_phy1_info) },
 	{}
 };
 MODULE_DEVICE_TABLE(pci, intel_eth_pci_id_table);
-- 
2.32.0

