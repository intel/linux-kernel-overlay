From 61bfcd5cee716b41854b07c6b1c5d5e6ccfb8811 Mon Sep 17 00:00:00 2001
From: Ranjan Dutta <ranjan.dutta@intel.com>
Date: Mon, 6 Feb 2023 10:14:21 +0800
Subject: [PATCH 14/45] Revert "drm/panfrost: Fix GEM handle creation
 ref-counting"

This reverts commit 0b70f6ea4d4f2b4d4b291d86ab76b4d07394932c.
---
 drivers/gpu/drm/panfrost/panfrost_drv.c | 27 +++++++++----------------
 drivers/gpu/drm/panfrost/panfrost_gem.c | 16 ++++++++++++++-
 drivers/gpu/drm/panfrost/panfrost_gem.h |  5 ++++-
 3 files changed, 28 insertions(+), 20 deletions(-)

diff --git a/drivers/gpu/drm/panfrost/panfrost_drv.c b/drivers/gpu/drm/panfrost/panfrost_drv.c
index 4af25c0b6570f..1dfc457bbefc8 100644
--- a/drivers/gpu/drm/panfrost/panfrost_drv.c
+++ b/drivers/gpu/drm/panfrost/panfrost_drv.c
@@ -81,7 +81,6 @@ static int panfrost_ioctl_create_bo(struct drm_device *dev, void *data,
 	struct panfrost_gem_object *bo;
 	struct drm_panfrost_create_bo *args = data;
 	struct panfrost_gem_mapping *mapping;
-	int ret;
 
 	if (!args->size || args->pad ||
 	    (args->flags & ~(PANFROST_BO_NOEXEC | PANFROST_BO_HEAP)))
@@ -92,29 +91,21 @@ static int panfrost_ioctl_create_bo(struct drm_device *dev, void *data,
 	    !(args->flags & PANFROST_BO_NOEXEC))
 		return -EINVAL;
 
-	bo = panfrost_gem_create(dev, args->size, args->flags);
+	bo = panfrost_gem_create_with_handle(file, dev, args->size, args->flags,
+					     &args->handle);
 	if (IS_ERR(bo))
 		return PTR_ERR(bo);
 
-	ret = drm_gem_handle_create(file, &bo->base.base, &args->handle);
-	if (ret)
-		goto out;
-
 	mapping = panfrost_gem_mapping_get(bo, priv);
-	if (mapping) {
-		args->offset = mapping->mmnode.start << PAGE_SHIFT;
-		panfrost_gem_mapping_put(mapping);
-	} else {
-		/* This can only happen if the handle from
-		 * drm_gem_handle_create() has already been guessed and freed
-		 * by user space
-		 */
-		ret = -EINVAL;
+	if (!mapping) {
+		drm_gem_object_put(&bo->base.base);
+		return -EINVAL;
 	}
 
-out:
-	drm_gem_object_put(&bo->base.base);
-	return ret;
+	args->offset = mapping->mmnode.start << PAGE_SHIFT;
+	panfrost_gem_mapping_put(mapping);
+
+	return 0;
 }
 
 /**
diff --git a/drivers/gpu/drm/panfrost/panfrost_gem.c b/drivers/gpu/drm/panfrost/panfrost_gem.c
index c843fbfdb878e..1d917cea5ceb4 100644
--- a/drivers/gpu/drm/panfrost/panfrost_gem.c
+++ b/drivers/gpu/drm/panfrost/panfrost_gem.c
@@ -232,8 +232,12 @@ struct drm_gem_object *panfrost_gem_create_object(struct drm_device *dev, size_t
 }
 
 struct panfrost_gem_object *
-panfrost_gem_create(struct drm_device *dev, size_t size, u32 flags)
+panfrost_gem_create_with_handle(struct drm_file *file_priv,
+				struct drm_device *dev, size_t size,
+				u32 flags,
+				uint32_t *handle)
 {
+	int ret;
 	struct drm_gem_shmem_object *shmem;
 	struct panfrost_gem_object *bo;
 
@@ -249,6 +253,16 @@ panfrost_gem_create(struct drm_device *dev, size_t size, u32 flags)
 	bo->noexec = !!(flags & PANFROST_BO_NOEXEC);
 	bo->is_heap = !!(flags & PANFROST_BO_HEAP);
 
+	/*
+	 * Allocate an id of idr table where the obj is registered
+	 * and handle has the id what user can see.
+	 */
+	ret = drm_gem_handle_create(file_priv, &shmem->base, handle);
+	/* drop reference from allocate - handle holds it now. */
+	drm_gem_object_put(&shmem->base);
+	if (ret)
+		return ERR_PTR(ret);
+
 	return bo;
 }
 
diff --git a/drivers/gpu/drm/panfrost/panfrost_gem.h b/drivers/gpu/drm/panfrost/panfrost_gem.h
index ad2877eeeccdf..8088d5fd8480e 100644
--- a/drivers/gpu/drm/panfrost/panfrost_gem.h
+++ b/drivers/gpu/drm/panfrost/panfrost_gem.h
@@ -69,7 +69,10 @@ panfrost_gem_prime_import_sg_table(struct drm_device *dev,
 				   struct sg_table *sgt);
 
 struct panfrost_gem_object *
-panfrost_gem_create(struct drm_device *dev, size_t size, u32 flags);
+panfrost_gem_create_with_handle(struct drm_file *file_priv,
+				struct drm_device *dev, size_t size,
+				u32 flags,
+				uint32_t *handle);
 
 int panfrost_gem_open(struct drm_gem_object *obj, struct drm_file *file_priv);
 void panfrost_gem_close(struct drm_gem_object *obj,
-- 
2.25.1

