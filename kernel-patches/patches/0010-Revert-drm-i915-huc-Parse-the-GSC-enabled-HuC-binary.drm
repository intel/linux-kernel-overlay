From cd7c0fc6776c185fc6a0be05283f2a0cd6b77ed8 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Thu, 6 Jul 2023 15:01:14 +0800
Subject: [PATCH 0010/2351] Revert "drm/i915/huc: Parse the GSC-enabled HuC
 binary"

This reverts commit ed411f2127cc6828c52f3499d73313c70dcb768d.
---
 .../drm/i915/gt/uc/intel_gsc_meu_headers.h    |  74 -------------
 drivers/gpu/drm/i915/gt/uc/intel_huc.c        |  11 +-
 drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c     | 104 ------------------
 drivers/gpu/drm/i915/gt/uc/intel_huc_fw.h     |   3 +-
 drivers/gpu/drm/i915/gt/uc/intel_huc_print.h  |  21 ----
 drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c      |  55 ++++-----
 drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h      |   2 -
 7 files changed, 35 insertions(+), 235 deletions(-)
 delete mode 100644 drivers/gpu/drm/i915/gt/uc/intel_gsc_meu_headers.h
 delete mode 100644 drivers/gpu/drm/i915/gt/uc/intel_huc_print.h

diff --git a/drivers/gpu/drm/i915/gt/uc/intel_gsc_meu_headers.h b/drivers/gpu/drm/i915/gt/uc/intel_gsc_meu_headers.h
deleted file mode 100644
index df9c482a8052d..0000000000000
--- a/drivers/gpu/drm/i915/gt/uc/intel_gsc_meu_headers.h
+++ /dev/null
@@ -1,74 +0,0 @@
-/* SPDX-License-Identifier: MIT */
-/*
- * Copyright © 2023 Intel Corporation
- */
-
-#ifndef _INTEL_GSC_MEU_H_
-#define _INTEL_GSC_MEU_H_
-
-#include <linux/types.h>
-
-/* Code partition structures */
-struct intel_gsc_cpt_directory_header_v2 {
-	u32 header_marker;
-#define INTEL_GSC_CPT_HEADER_MARKER 0x44504324
-
-	u32 num_of_entries;
-	u8 header_version;
-	u8 entry_version;
-	u8 header_length; /* in bytes */
-	u8 flags;
-	u32 partition_name;
-	u32 crc32;
-} __packed;
-
-struct intel_gsc_cpt_directory_entry {
-	u8 name[12];
-
-	/*
-	 * Bits 0-24: offset from the beginning of the code partition
-	 * Bit 25: huffman compressed
-	 * Bits 26-31: reserved
-	 */
-	u32 offset;
-#define INTEL_GSC_CPT_ENTRY_OFFSET_MASK GENMASK(24, 0)
-#define INTEL_GSC_CPT_ENTRY_HUFFMAN_COMP BIT(25)
-
-	/*
-	 * Module/Item length, in bytes. For Huffman-compressed modules, this
-	 * refers to the uncompressed size. For software-compressed modules,
-	 * this refers to the compressed size.
-	 */
-	u32 length;
-
-	u8 reserved[4];
-} __packed;
-
-struct intel_gsc_meu_version {
-	u16 major;
-	u16 minor;
-	u16 hotfix;
-	u16 build;
-} __packed;
-
-struct intel_gsc_manifest_header {
-	u32 header_type; /* 0x4 for manifest type */
-	u32 header_length; /* in dwords */
-	u32 header_version;
-	u32 flags;
-	u32 vendor;
-	u32 date;
-	u32 size; /* In dwords, size of entire manifest (header + extensions) */
-	u32 header_id;
-	u32 internal_data;
-	struct intel_gsc_meu_version fw_version;
-	u32 security_version;
-	struct intel_gsc_meu_version meu_kit_version;
-	u32 meu_manifest_version;
-	u8 general_data[4];
-	u8 reserved3[56];
-	u32 modulus_size; /* in dwords */
-	u32 exponent_size; /* in dwords */
-} __packed;
-
-#endif
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_huc.c b/drivers/gpu/drm/i915/gt/uc/intel_huc.c
index 3db5bfc49fb6f..1bfb0426313c2 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_huc.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_huc.c
@@ -6,14 +6,23 @@
 #include <linux/types.h>
 
 #include "gt/intel_gt.h"
+#include "gt/intel_gt_print.h"
 #include "intel_guc_reg.h"
 #include "intel_huc.h"
-#include "intel_huc_print.h"
 #include "i915_drv.h"
 
 #include <linux/device/bus.h>
 #include <linux/mei_aux.h>
 
+#define huc_printk(_huc, _level, _fmt, ...) \
+	gt_##_level(huc_to_gt(_huc), "HuC: " _fmt, ##__VA_ARGS__)
+#define huc_err(_huc, _fmt, ...)	huc_printk((_huc), err, _fmt, ##__VA_ARGS__)
+#define huc_warn(_huc, _fmt, ...)	huc_printk((_huc), warn, _fmt, ##__VA_ARGS__)
+#define huc_notice(_huc, _fmt, ...)	huc_printk((_huc), notice, _fmt, ##__VA_ARGS__)
+#define huc_info(_huc, _fmt, ...)	huc_printk((_huc), info, _fmt, ##__VA_ARGS__)
+#define huc_dbg(_huc, _fmt, ...)	huc_printk((_huc), dbg, _fmt, ##__VA_ARGS__)
+#define huc_probe_error(_huc, _fmt, ...) huc_printk((_huc), probe_error, _fmt, ##__VA_ARGS__)
+
 /**
  * DOC: HuC
  *
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c b/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c
index 7ae96d883fb08..534b0aa433166 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c
@@ -5,115 +5,11 @@
 
 #include "gt/intel_gsc.h"
 #include "gt/intel_gt.h"
-#include "intel_gsc_meu_headers.h"
 #include "intel_huc.h"
 #include "intel_huc_fw.h"
-#include "intel_huc_print.h"
 #include "i915_drv.h"
 #include "pxp/intel_pxp_huc.h"
 
-static void get_version_from_meu_manifest(struct intel_uc_fw_ver *ver, const void *data)
-{
-	const struct intel_gsc_manifest_header *manifest = data;
-
-	ver->major = manifest->fw_version.major;
-	ver->minor = manifest->fw_version.minor;
-	ver->patch = manifest->fw_version.hotfix;
-}
-
-static inline u32 entry_offset(const struct intel_gsc_cpt_directory_entry *entry)
-{
-	return entry->offset & INTEL_GSC_CPT_ENTRY_OFFSET_MASK;
-}
-
-int intel_huc_fw_get_binary_info(struct intel_uc_fw *huc_fw, const void *data)
-{
-	struct intel_huc *huc = container_of(huc_fw, struct intel_huc, fw);
-	const struct intel_gsc_cpt_directory_header_v2 *header = data;
-	const struct intel_gsc_cpt_directory_entry *entry;
-	int i;
-
-	if (!huc_fw->loaded_via_gsc) {
-		huc_err(huc, "Invalid FW type for GSC load\n");
-		return -EINVAL;
-	}
-
-	/*
-	 * The meu HuC binary starts with a directory header, followed by a
-	 * series of entries. Each entry is identified by a name and points to
-	 * a specific section of the binary containing the relevant data.
-	 * The entries we're interested in are
-	 * - "HUCP.man": points to the GSC manifest header for the HuC, which
-	 *               contains the version info.
-	 * - "huc_fw": points to the legacy-style binary that can be used for
-	 *             load via the DMA. This entry only exists on binaries for
-	 *             platform that support 2-step HuC load via dma and auth
-	 *             via GSC (like MTL).
-	 *
-	 * --------------------------------------------------
-	 * [  intel_gsc_cpt_directory_header_v2             ]
-	 * --------------------------------------------------
-	 * [  intel_gsc_cpt_directory_entry[]               ]
-	 * [      entry1                                    ]
-	 * [      ...                                       ]
-	 * [      entryX                                    ]
-	 * [          "HUCP.man"                            ]
-	 * [           ...                                  ]
-	 * [           offset  >----------------------------]------o
-	 * [      ...                                       ]      |
-	 * [      entryY                                    ]      |
-	 * [          "huc_fw"                              ]      |
-	 * [           ...                                  ]      |
-	 * [           offset  >----------------------------]----------o
-	 * --------------------------------------------------      |   |
-	 *                                                         |   |
-	 * --------------------------------------------------      |   |
-	 * [ intel_gsc_manifest_header                      ]<-----o   |
-	 * [  ...                                           ]          |
-	 * [  intel_gsc_meu_version fw_version              ]          |
-	 * [  ...                                           ]          |
-	 * --------------------------------------------------          |
-	 *                                                             |
-	 * --------------------------------------------------          |
-	 * [ data[]                                         ]<---------o
-	 * [  ...                                           ]
-	 * [  ...                                           ]
-	 * --------------------------------------------------
-	 */
-
-	if (header->header_marker != INTEL_GSC_CPT_HEADER_MARKER) {
-		huc_err(huc, "invalid marker for meu CPT header: 0x%08x!\n",
-			header->header_marker);
-		return -EINVAL;
-	}
-
-	/* we only have binaries with header v2 and entry v1 for now */
-	if (header->header_version != 2 || header->entry_version != 1) {
-		huc_err(huc, "invalid meu CPT header/entry version %u:%u!\n",
-			header->header_version, header->entry_version);
-		return -EINVAL;
-	}
-
-	if (header->header_length < sizeof(struct intel_gsc_cpt_directory_header_v2)) {
-		huc_err(huc, "invalid meu CPT header length %u!\n",
-			header->header_length);
-		return -EINVAL;
-	}
-
-	entry = data + header->header_length;
-
-	for (i = 0; i < header->num_of_entries; i++, entry++) {
-		if (strcmp(entry->name, "HUCP.man") == 0)
-			get_version_from_meu_manifest(&huc_fw->file_selected.ver,
-						      data + entry_offset(entry));
-
-		if (strcmp(entry->name, "huc_fw") == 0)
-			huc_fw->dma_start_offset = entry_offset(entry);
-	}
-
-	return 0;
-}
-
 int intel_huc_fw_load_and_auth_via_gsc(struct intel_huc *huc)
 {
 	int ret;
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.h b/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.h
index 1355767efba6d..db42e238b45f2 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_huc_fw.h
@@ -7,9 +7,8 @@
 #define _INTEL_HUC_FW_H_
 
 struct intel_huc;
-struct intel_uc_fw;
 
 int intel_huc_fw_load_and_auth_via_gsc(struct intel_huc *huc);
 int intel_huc_fw_upload(struct intel_huc *huc);
-int intel_huc_fw_get_binary_info(struct intel_uc_fw *huc_fw, const void *data);
+
 #endif
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_huc_print.h b/drivers/gpu/drm/i915/gt/uc/intel_huc_print.h
deleted file mode 100644
index 915d310ee1df8..0000000000000
--- a/drivers/gpu/drm/i915/gt/uc/intel_huc_print.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/* SPDX-License-Identifier: MIT */
-/*
- * Copyright © 2023 Intel Corporation
- */
-
-#ifndef __INTEL_HUC_PRINT__
-#define __INTEL_HUC_PRINT__
-
-#include "gt/intel_gt.h"
-#include "gt/intel_gt_print.h"
-
-#define huc_printk(_huc, _level, _fmt, ...) \
-	gt_##_level(huc_to_gt(_huc), "HuC: " _fmt, ##__VA_ARGS__)
-#define huc_err(_huc, _fmt, ...)	huc_printk((_huc), err, _fmt, ##__VA_ARGS__)
-#define huc_warn(_huc, _fmt, ...)	huc_printk((_huc), warn, _fmt, ##__VA_ARGS__)
-#define huc_notice(_huc, _fmt, ...)	huc_printk((_huc), notice, _fmt, ##__VA_ARGS__)
-#define huc_info(_huc, _fmt, ...)	huc_printk((_huc), info, _fmt, ##__VA_ARGS__)
-#define huc_dbg(_huc, _fmt, ...)	huc_printk((_huc), dbg, _fmt, ##__VA_ARGS__)
-#define huc_probe_error(_huc, _fmt, ...) huc_printk((_huc), probe_error, _fmt, ##__VA_ARGS__)
-
-#endif /* __INTEL_HUC_PRINT__ */
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
index 59e7fc518e507..ca2d82b9ab68e 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.c
@@ -533,6 +533,20 @@ static void __force_fw_fetch_failures(struct intel_uc_fw *uc_fw, int e)
 	}
 }
 
+static int check_gsc_manifest(const struct firmware *fw,
+			      struct intel_uc_fw *uc_fw)
+{
+	u32 *dw = (u32 *)fw->data;
+	u32 version_hi = dw[HUC_GSC_VERSION_HI_DW];
+	u32 version_lo = dw[HUC_GSC_VERSION_LO_DW];
+
+	uc_fw->file_selected.ver.major = FIELD_GET(HUC_GSC_MAJOR_VER_HI_MASK, version_hi);
+	uc_fw->file_selected.ver.minor = FIELD_GET(HUC_GSC_MINOR_VER_HI_MASK, version_hi);
+	uc_fw->file_selected.ver.patch = FIELD_GET(HUC_GSC_PATCH_VER_LO_MASK, version_lo);
+
+	return 0;
+}
+
 static void uc_unpack_css_version(struct intel_uc_fw_ver *ver, u32 css_value)
 {
 	/* Get version numbers from the CSS header */
@@ -589,22 +603,22 @@ static void guc_read_css_info(struct intel_uc_fw *uc_fw, struct uc_css_header *c
 	uc_fw->private_data_size = css->private_data_size;
 }
 
-static int __check_ccs_header(struct intel_gt *gt,
-			      const void *fw_data, size_t fw_size,
-			      struct intel_uc_fw *uc_fw)
+static int check_ccs_header(struct intel_gt *gt,
+			    const struct firmware *fw,
+			    struct intel_uc_fw *uc_fw)
 {
 	struct uc_css_header *css;
 	size_t size;
 
 	/* Check the size of the blob before examining buffer contents */
-	if (unlikely(fw_size < sizeof(struct uc_css_header))) {
+	if (unlikely(fw->size < sizeof(struct uc_css_header))) {
 		gt_warn(gt, "%s firmware %s: invalid size: %zu < %zu\n",
 			intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
-			fw_size, sizeof(struct uc_css_header));
+			fw->size, sizeof(struct uc_css_header));
 		return -ENODATA;
 	}
 
-	css = (struct uc_css_header *)fw_data;
+	css = (struct uc_css_header *)fw->data;
 
 	/* Check integrity of size values inside CSS header */
 	size = (css->header_size_dw - css->key_size_dw - css->modulus_size_dw -
@@ -612,7 +626,7 @@ static int __check_ccs_header(struct intel_gt *gt,
 	if (unlikely(size != sizeof(struct uc_css_header))) {
 		gt_warn(gt, "%s firmware %s: unexpected header size: %zu != %zu\n",
 			intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
-			fw_size, sizeof(struct uc_css_header));
+			fw->size, sizeof(struct uc_css_header));
 		return -EPROTO;
 	}
 
@@ -624,10 +638,10 @@ static int __check_ccs_header(struct intel_gt *gt,
 
 	/* At least, it should have header, uCode and RSA. Size of all three. */
 	size = sizeof(struct uc_css_header) + uc_fw->ucode_size + uc_fw->rsa_size;
-	if (unlikely(fw_size < size)) {
+	if (unlikely(fw->size < size)) {
 		gt_warn(gt, "%s firmware %s: invalid size: %zu < %zu\n",
 			intel_uc_fw_type_repr(uc_fw->type), uc_fw->file_selected.path,
-			fw_size, size);
+			fw->size, size);
 		return -ENOEXEC;
 	}
 
@@ -648,27 +662,6 @@ static int __check_ccs_header(struct intel_gt *gt,
 	return 0;
 }
 
-static int check_gsc_manifest(struct intel_gt *gt,
-			      const struct firmware *fw,
-			      struct intel_uc_fw *uc_fw)
-{
-	intel_huc_fw_get_binary_info(uc_fw, fw->data);
-
-	if (uc_fw->dma_start_offset) {
-		u32 delta = uc_fw->dma_start_offset;
-		__check_ccs_header(gt, fw->data + delta, fw->size - delta, uc_fw);
-	}
-
-	return 0;
-}
-
-static int check_ccs_header(struct intel_gt *gt,
-			    const struct firmware *fw,
-			    struct intel_uc_fw *uc_fw)
-{
-	return __check_ccs_header(gt, fw->data, fw->size, uc_fw);
-}
-
 static bool is_ver_8bit(struct intel_uc_fw_ver *ver)
 {
 	return ver->major < 0xFF && ver->minor < 0xFF && ver->patch < 0xFF;
@@ -716,7 +709,7 @@ static int check_fw_header(struct intel_gt *gt,
 		return 0;
 
 	if (uc_fw->loaded_via_gsc)
-		err = check_gsc_manifest(gt, fw, uc_fw);
+		err = check_gsc_manifest(fw, uc_fw);
 	else
 		err = check_ccs_header(gt, fw, uc_fw);
 	if (err)
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h
index 00b44e28ef533..b48588f8a6b0b 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc_fw.h
@@ -114,8 +114,6 @@ struct intel_uc_fw {
 	u32 ucode_size;
 	u32 private_data_size;
 
-	u32 dma_start_offset;
-
 	bool loaded_via_gsc;
 };
 
-- 
2.25.1

