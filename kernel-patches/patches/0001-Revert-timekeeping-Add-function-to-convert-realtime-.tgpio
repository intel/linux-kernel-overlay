From be1aa8b5e554e6a204055ebce3d7d72f27153a57 Mon Sep 17 00:00:00 2001
From: Hao Li <hao3.li@intel.com>
Date: Wed, 25 Sep 2024 12:36:49 +0800
Subject: [PATCH 01/42] Revert "timekeeping: Add function to convert realtime
 to base clock"

This reverts commit 02ecee07ca30f76f2a0f1381661a688b8e501ab0.

Signed-off-by: Hao Li <hao3.li@intel.com>
---
 include/linux/timekeeping.h |  4 --
 kernel/time/timekeeping.c   | 86 -------------------------------------
 2 files changed, 90 deletions(-)

diff --git a/include/linux/timekeeping.h b/include/linux/timekeeping.h
index fc12a9ba2c88..b2ee182d891e 100644
--- a/include/linux/timekeeping.h
+++ b/include/linux/timekeeping.h
@@ -318,10 +318,6 @@ struct system_counterval_t {
 	bool			use_nsecs;
 };
 
-extern bool ktime_real_to_base_clock(ktime_t treal,
-				     enum clocksource_ids base_id, u64 *cycles);
-extern bool timekeeping_clocksource_has_base(enum clocksource_ids id);
-
 /*
  * Get cross timestamp between system clock and device clock
  */
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index 5391e4167d60..7f2155ab4430 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -1235,68 +1235,6 @@ static bool convert_base_to_cs(struct system_counterval_t *scv)
 	return true;
 }
 
-static bool convert_cs_to_base(u64 *cycles, enum clocksource_ids base_id)
-{
-	struct clocksource *cs = tk_core.timekeeper.tkr_mono.clock;
-	struct clocksource_base *base;
-
-	/*
-	 * Check whether base_id matches the base clock. Prevent the compiler from
-	 * re-evaluating @base as the clocksource might change concurrently.
-	 */
-	base = READ_ONCE(cs->base);
-	if (!base || base->id != base_id)
-		return false;
-
-	*cycles -= base->offset;
-	if (!convert_clock(cycles, base->denominator, base->numerator))
-		return false;
-	return true;
-}
-
-static bool convert_ns_to_cs(u64 *delta)
-{
-	struct tk_read_base *tkr = &tk_core.timekeeper.tkr_mono;
-
-	if (BITS_TO_BYTES(fls64(*delta) + tkr->shift) >= sizeof(*delta))
-		return false;
-
-	*delta = div_u64((*delta << tkr->shift) - tkr->xtime_nsec, tkr->mult);
-	return true;
-}
-
-/**
- * ktime_real_to_base_clock() - Convert CLOCK_REALTIME timestamp to a base clock timestamp
- * @treal:	CLOCK_REALTIME timestamp to convert
- * @base_id:	base clocksource id
- * @cycles:	pointer to store the converted base clock timestamp
- *
- * Converts a supplied, future realtime clock value to the corresponding base clock value.
- *
- * Return:  true if the conversion is successful, false otherwise.
- */
-bool ktime_real_to_base_clock(ktime_t treal, enum clocksource_ids base_id, u64 *cycles)
-{
-	struct timekeeper *tk = &tk_core.timekeeper;
-	unsigned int seq;
-	u64 delta;
-
-	do {
-		seq = read_seqcount_begin(&tk_core.seq);
-		if ((u64)treal < tk->tkr_mono.base_real)
-			return false;
-		delta = (u64)treal - tk->tkr_mono.base_real;
-		if (!convert_ns_to_cs(&delta))
-			return false;
-		*cycles = tk->tkr_mono.cycle_last + delta;
-		if (!convert_cs_to_base(cycles, base_id))
-			return false;
-	} while (read_seqcount_retry(&tk_core.seq, seq));
-
-	return true;
-}
-EXPORT_SYMBOL_GPL(ktime_real_to_base_clock);
-
 /**
  * get_device_system_crosststamp - Synchronously capture system/device timestamp
  * @get_time_fn:	Callback to get simultaneous device time and
@@ -1408,30 +1346,6 @@ int get_device_system_crosststamp(int (*get_time_fn)
 }
 EXPORT_SYMBOL_GPL(get_device_system_crosststamp);
 
-/**
- * timekeeping_clocksource_has_base - Check whether the current clocksource
- *				      is based on given a base clock
- * @id:		base clocksource ID
- *
- * Note:	The return value is a snapshot which can become invalid right
- *		after the function returns.
- *
- * Return:	true if the timekeeper clocksource has a base clock with @id,
- *		false otherwise
- */
-bool timekeeping_clocksource_has_base(enum clocksource_ids id)
-{
-	/*
-	 * This is a snapshot, so no point in using the sequence
-	 * count. Just prevent the compiler from re-evaluating @base as the
-	 * clocksource might change concurrently.
-	 */
-	struct clocksource_base *base = READ_ONCE(tk_core.timekeeper.tkr_mono.clock->base);
-
-	return base ? base->id == id : false;
-}
-EXPORT_SYMBOL_GPL(timekeeping_clocksource_has_base);
-
 /**
  * do_settimeofday64 - Sets the time of day.
  * @ts:     pointer to the timespec64 variable containing the new time
-- 
2.25.1

