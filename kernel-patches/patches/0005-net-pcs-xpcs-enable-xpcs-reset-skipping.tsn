From 40815d967ebf14a1acf53efcc13c19dfc3130599 Mon Sep 17 00:00:00 2001
From: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
Date: Wed, 9 Jun 2021 15:12:19 +0800
Subject: [PATCH 05/32] net: pcs: xpcs: enable xpcs reset skipping

Some platforms such as the Intel AlderLake configure the xPCS in the
BIOS and a xPCS Soft Reset is not required during driver init.

This changes the xpcs_create function to take in an additional argument
to check if the platform request to skip xpcs reset during device
initialization.

Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
---
 drivers/net/dsa/sja1105/sja1105_mdio.c        |  2 +-
 .../net/ethernet/stmicro/stmmac/stmmac_mdio.c |  4 +++-
 .../net/ethernet/wangxun/txgbe/txgbe_phy.c    |  2 +-
 drivers/net/pcs/pcs-xpcs.c                    | 21 +++++++++++++------
 include/linux/pcs/pcs-xpcs.h                  |  3 ++-
 include/linux/stmmac.h                        |  1 +
 6 files changed, 23 insertions(+), 10 deletions(-)

diff --git a/drivers/net/dsa/sja1105/sja1105_mdio.c b/drivers/net/dsa/sja1105/sja1105_mdio.c
index 52ddb4ef259e..5ab54f7dc0bd 100644
--- a/drivers/net/dsa/sja1105/sja1105_mdio.c
+++ b/drivers/net/dsa/sja1105/sja1105_mdio.c
@@ -409,7 +409,7 @@ static int sja1105_mdiobus_pcs_register(struct sja1105_private *priv)
 		    priv->phy_mode[port] != PHY_INTERFACE_MODE_2500BASEX)
 			continue;
 
-		xpcs = xpcs_create_mdiodev(bus, port, priv->phy_mode[port]);
+		xpcs = xpcs_create_mdiodev(bus, port, priv->phy_mode[port], false);
 		if (IS_ERR(xpcs)) {
 			rc = PTR_ERR(xpcs);
 			goto out_pcs_free;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
index 0542cfd1817e..451a5e58984d 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
@@ -500,14 +500,16 @@ int stmmac_xpcs_setup(struct mii_bus *bus)
 	struct net_device *ndev = bus->priv;
 	struct stmmac_priv *priv;
 	struct dw_xpcs *xpcs;
+	bool skip_reset;
 	int mode, addr;
 
 	priv = netdev_priv(ndev);
 	mode = priv->plat->phy_interface;
+	skip_reset = priv->plat->skip_reset;
 
 	/* Try to probe the XPCS by scanning all addresses. */
 	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
-		xpcs = xpcs_create_mdiodev(bus, addr, mode);
+		xpcs = xpcs_create_mdiodev(bus, addr, mode, skip_reset);
 		if (IS_ERR(xpcs))
 			continue;
 
diff --git a/drivers/net/ethernet/wangxun/txgbe/txgbe_phy.c b/drivers/net/ethernet/wangxun/txgbe/txgbe_phy.c
index 2fa511227eac..7fa5d159c02e 100644
--- a/drivers/net/ethernet/wangxun/txgbe/txgbe_phy.c
+++ b/drivers/net/ethernet/wangxun/txgbe/txgbe_phy.c
@@ -149,7 +149,7 @@ static int txgbe_mdio_pcs_init(struct txgbe *txgbe)
 	if (ret)
 		return ret;
 
-	xpcs = xpcs_create_mdiodev(mii_bus, 0, PHY_INTERFACE_MODE_10GBASER);
+	xpcs = xpcs_create_mdiodev(mii_bus, 0, PHY_INTERFACE_MODE_10GBASER, false);
 	if (IS_ERR(xpcs))
 		return PTR_ERR(xpcs);
 
diff --git a/drivers/net/pcs/pcs-xpcs.c b/drivers/net/pcs/pcs-xpcs.c
index 31525fe9c32e..13317b5992f3 100644
--- a/drivers/net/pcs/pcs-xpcs.c
+++ b/drivers/net/pcs/pcs-xpcs.c
@@ -1366,7 +1366,8 @@ static const struct phylink_pcs_ops xpcs_phylink_ops = {
 };
 
 static struct dw_xpcs *xpcs_create(struct mdio_device *mdiodev,
-				   phy_interface_t interface)
+				   phy_interface_t interface,
+				   bool skip_reset)
 {
 	struct dw_xpcs *xpcs;
 	u32 xpcs_id;
@@ -1406,9 +1407,16 @@ static struct dw_xpcs *xpcs_create(struct mdio_device *mdiodev,
 		if (xpcs->dev_flag != DW_DEV_TXGBE) {
 			xpcs->pcs.poll = true;
 
-			ret = xpcs_soft_reset(xpcs, compat);
-			if (ret)
-				goto out;
+			if (!skip_reset) {
+				dev_warn(&xpcs->mdiodev->dev, "%s: xpcs reset\n",
+					 __func__);
+				ret = xpcs_soft_reset(xpcs, compat);
+				if (ret)
+					goto out;
+			} else {
+				dev_warn(&xpcs->mdiodev->dev, "%s: skip xpcs reset\n",
+					  __func__);
+			}
 		}
 
 		return xpcs;
@@ -1432,7 +1440,8 @@ void xpcs_destroy(struct dw_xpcs *xpcs)
 EXPORT_SYMBOL_GPL(xpcs_destroy);
 
 struct dw_xpcs *xpcs_create_mdiodev(struct mii_bus *bus, int addr,
-				    phy_interface_t interface)
+				    phy_interface_t interface,
+				    bool skip_reset)
 {
 	struct mdio_device *mdiodev;
 	struct dw_xpcs *xpcs;
@@ -1441,7 +1450,7 @@ struct dw_xpcs *xpcs_create_mdiodev(struct mii_bus *bus, int addr,
 	if (IS_ERR(mdiodev))
 		return ERR_CAST(mdiodev);
 
-	xpcs = xpcs_create(mdiodev, interface);
+	xpcs = xpcs_create(mdiodev, interface, skip_reset);
 
 	/* xpcs_create() has taken a refcount on the mdiodev if it was
 	 * successful. If xpcs_create() fails, this will free the mdio
diff --git a/include/linux/pcs/pcs-xpcs.h b/include/linux/pcs/pcs-xpcs.h
index da3a6c30f6d2..33a00f381069 100644
--- a/include/linux/pcs/pcs-xpcs.h
+++ b/include/linux/pcs/pcs-xpcs.h
@@ -45,7 +45,8 @@ void xpcs_get_interfaces(struct dw_xpcs *xpcs, unsigned long *interfaces);
 int xpcs_config_eee(struct dw_xpcs *xpcs, int mult_fact_100ns,
 		    int enable);
 struct dw_xpcs *xpcs_create_mdiodev(struct mii_bus *bus, int addr,
-				    phy_interface_t interface);
+				    phy_interface_t interface,
+				    bool skip_reset);
 void xpcs_destroy(struct dw_xpcs *xpcs);
 
 #endif /* __LINUX_PCS_XPCS_H */
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index dfa1828cd756..34ee64090581 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -314,5 +314,6 @@ struct plat_stmmacenet_data {
 	int msi_tx_base_vec;
 	const struct dwmac4_addrs *dwmac4_addrs;
 	unsigned int flags;
+	bool skip_reset;
 };
 #endif
-- 
2.25.1

