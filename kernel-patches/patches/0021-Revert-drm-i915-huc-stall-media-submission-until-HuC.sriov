From 4c18859c7a028a01831bf3a23bb611d62d143476 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Wed, 22 Mar 2023 17:35:38 +0800
Subject: [PATCH 0021/2236] Revert "drm/i915/huc: stall media submission until
 HuC is loaded"

This reverts commit 9e7bed996340d46755fe0e37ff2eab389bfafbcd.
---
 drivers/gpu/drm/i915/gt/uc/intel_huc.h |  6 ------
 drivers/gpu/drm/i915/i915_request.c    | 24 ------------------------
 drivers/gpu/drm/i915/i915_request.h    |  5 -----
 3 files changed, 35 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/uc/intel_huc.h b/drivers/gpu/drm/i915/gt/uc/intel_huc.h
index 52db03620c60..915d281c1c72 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_huc.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_huc.h
@@ -81,12 +81,6 @@ static inline bool intel_huc_is_loaded_by_gsc(const struct intel_huc *huc)
 	return huc->fw.loaded_via_gsc;
 }
 
-static inline bool intel_huc_wait_required(struct intel_huc *huc)
-{
-	return intel_huc_is_used(huc) && intel_huc_is_loaded_by_gsc(huc) &&
-	       !intel_huc_is_authenticated(huc);
-}
-
 void intel_huc_load_status(struct intel_huc *huc, struct drm_printer *p);
 
 #endif
diff --git a/drivers/gpu/drm/i915/i915_request.c b/drivers/gpu/drm/i915/i915_request.c
index f949a9495758..62fad16a55e8 100644
--- a/drivers/gpu/drm/i915/i915_request.c
+++ b/drivers/gpu/drm/i915/i915_request.c
@@ -1621,20 +1621,6 @@ i915_request_await_object(struct i915_request *to,
 	return ret;
 }
 
-static void i915_request_await_huc(struct i915_request *rq)
-{
-	struct intel_huc *huc = &rq->context->engine->gt->uc.huc;
-
-	/* don't stall kernel submissions! */
-	if (!rcu_access_pointer(rq->context->gem_context))
-		return;
-
-	if (intel_huc_wait_required(huc))
-		i915_sw_fence_await_sw_fence(&rq->submit,
-					     &huc->delayed_load.fence,
-					     &rq->hucq);
-}
-
 static struct i915_request *
 __i915_request_ensure_parallel_ordering(struct i915_request *rq,
 					struct intel_timeline *timeline)
@@ -1716,16 +1702,6 @@ __i915_request_add_to_timeline(struct i915_request *rq)
 	struct intel_timeline *timeline = i915_request_timeline(rq);
 	struct i915_request *prev;
 
-	/*
-	 * Media workloads may require HuC, so stall them until HuC loading is
-	 * complete. Note that HuC not being loaded when a user submission
-	 * arrives can only happen when HuC is loaded via GSC and in that case
-	 * we still expect the window between us starting to accept submissions
-	 * and HuC loading completion to be small (a few hundred ms).
-	 */
-	if (rq->engine->class == VIDEO_DECODE_CLASS)
-		i915_request_await_huc(rq);
-
 	/*
 	 * Dependency tracking and request ordering along the timeline
 	 * is special cased so that we can eliminate redundant ordering
diff --git a/drivers/gpu/drm/i915/i915_request.h b/drivers/gpu/drm/i915/i915_request.h
index f5e1bb5e857a..47041ec68df8 100644
--- a/drivers/gpu/drm/i915/i915_request.h
+++ b/drivers/gpu/drm/i915/i915_request.h
@@ -348,11 +348,6 @@ struct i915_request {
 #define	GUC_PRIO_FINI	0xfe
 	u8 guc_prio;
 
-	/**
-	 * @hucq: wait queue entry used to wait on the HuC load to complete
-	 */
-	wait_queue_entry_t hucq;
-
 	I915_SELFTEST_DECLARE(struct {
 		struct list_head link;
 		unsigned long delay;
-- 
2.25.1

