From 4e85965d46c47eb1b2cae8f417dee8deff078f3d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Pi=C3=B3rkowski?= <piotr.piorkowski@intel.com>
Date: Tue, 10 May 2022 22:44:46 +0200
Subject: [PATCH 22/24] drm/i915/iov: Fix suspend/hibernate when VFs are
 enabled
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We take a GT PM wakeref while we are enabling the VFs .
During the transition to the S3/S4 state, the driver expects
GT PM to be idle.
However in case when we had VFs enabled, not all wakrefs were returned
which caused the hang.
Let's put GT PM wakrefe during suspend when we have enabled VFs

v2: move iov suspend to suspend prepare path

Patch for: branch IKT/v5.15/bullpen/linux

Signed-off-by: Piotr Pi√≥rkowski <piotr.piorkowski@intel.com>
Signed-off-by: Zawawi, Muhammad Zul Husni <muhammad.zul.husni.zawawi@intel.com>
---
 drivers/gpu/drm/i915/gt/intel_gt_pm.c   |  3 +++
 drivers/gpu/drm/i915/gt/iov/intel_iov.c | 33 +++++++++++++++++++++++++
 drivers/gpu/drm/i915/gt/iov/intel_iov.h |  6 +++++
 drivers/gpu/drm/i915/i915_driver.c      |  3 +++
 drivers/gpu/drm/i915/i915_sriov.c       |  5 ++--
 5 files changed, 48 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/intel_gt_pm.c b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
index ff306f18a522..6ec762a049c2 100644
--- a/drivers/gpu/drm/i915/gt/intel_gt_pm.c
+++ b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
@@ -19,6 +19,7 @@
 #include "intel_rc6.h"
 #include "intel_rps.h"
 #include "intel_wakeref.h"
+#include "iov/intel_iov.h"
 #include "pxp/intel_pxp_pm.h"
 
 #define I915_GT_SUSPEND_IDLE_TIMEOUT (HZ / 2)
@@ -312,6 +313,8 @@ static void wait_for_suspend(struct intel_gt *gt)
 
 void intel_gt_suspend_prepare(struct intel_gt *gt)
 {
+	intel_iov_suspend(&gt->iov);
+
 	user_forcewake(gt, true);
 	wait_for_suspend(gt);
 
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov.c b/drivers/gpu/drm/i915/gt/iov/intel_iov.c
index dad94248d6e1..43ea2e9a7cba 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov.c
@@ -10,6 +10,7 @@
 #include "intel_iov_service.h"
 #include "intel_iov_state.h"
 #include "intel_iov_utils.h"
+#include "gt/intel_gt_pm.h"
 
 /**
  * intel_iov_init_early - Prepare IOV data.
@@ -292,6 +293,38 @@ int intel_iov_init_late(struct intel_iov *iov)
 	return 0;
 }
 
+void intel_iov_pf_get_pm_vfs(struct intel_iov *iov)
+{
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+
+	intel_gt_pm_get_untracked(iov_to_gt(iov));
+}
+
+void intel_iov_pf_put_pm_vfs(struct intel_iov *iov)
+{
+	GEM_BUG_ON(!intel_iov_is_pf(iov));
+
+	intel_gt_pm_put_untracked(iov_to_gt(iov));
+}
+
+void intel_iov_suspend(struct intel_iov *iov)
+{
+	if (!intel_iov_is_pf(iov))
+		return;
+
+	if (pci_num_vf(to_pci_dev(iov_to_i915(iov)->drm.dev)) != 0)
+		intel_iov_pf_put_pm_vfs(iov);
+}
+
+void intel_iov_resume(struct intel_iov *iov)
+{
+	if (!intel_iov_is_pf(iov))
+		return;
+
+	if (pci_num_vf(to_pci_dev(iov_to_i915(iov)->drm.dev)) != 0)
+		intel_iov_pf_get_pm_vfs(iov);
+}
+
 #if IS_ENABLED(CONFIG_DRM_I915_SELFTEST)
 #include "selftests/selftest_live_iov_ggtt.c"
 #endif
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov.h b/drivers/gpu/drm/i915/gt/iov/intel_iov.h
index 3cc5d18f470c..7547fa24ea5c 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov.h
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov.h
@@ -21,4 +21,10 @@ int intel_iov_init_hw(struct intel_iov *iov);
 void intel_iov_fini_hw(struct intel_iov *iov);
 int intel_iov_init_late(struct intel_iov *iov);
 
+void intel_iov_pf_get_pm_vfs(struct intel_iov *iov);
+void intel_iov_pf_put_pm_vfs(struct intel_iov *iov);
+
+void intel_iov_suspend(struct intel_iov *iov);
+void intel_iov_resume(struct intel_iov *iov);
+
 #endif /* __INTEL_IOV_H__ */
diff --git a/drivers/gpu/drm/i915/i915_driver.c b/drivers/gpu/drm/i915/i915_driver.c
index 25ac71a2088f..10ea4d7f33a4 100644
--- a/drivers/gpu/drm/i915/i915_driver.c
+++ b/drivers/gpu/drm/i915/i915_driver.c
@@ -1453,8 +1453,11 @@ static int i915_drm_resume_early(struct drm_device *dev)
 
 	intel_power_domains_resume(dev_priv);
 
+	intel_iov_resume(&to_gt(dev_priv)->iov);
+
 	enable_rpm_wakeref_asserts(&dev_priv->runtime_pm);
 
+
 	return ret;
 }
 
diff --git a/drivers/gpu/drm/i915/i915_sriov.c b/drivers/gpu/drm/i915/i915_sriov.c
index e6abee3edbb8..5c86dcdcb336 100644
--- a/drivers/gpu/drm/i915/i915_sriov.c
+++ b/drivers/gpu/drm/i915/i915_sriov.c
@@ -10,6 +10,7 @@
 
 #include "gt/intel_gt.h"
 #include "gt/intel_gt_pm.h"
+#include "gt/iov/intel_iov.h"
 #include "gt/iov/intel_iov_provisioning.h"
 #include "gt/iov/intel_iov_state.h"
 #include "gt/iov/intel_iov_utils.h"
@@ -433,7 +434,7 @@ int i915_sriov_pf_enable_vfs(struct drm_i915_private *i915, int num_vfs)
 		goto fail;
 
 	/* hold the reference to runtime pm as long as VFs are enabled */
-	intel_gt_pm_get_untracked(to_gt(i915));
+	intel_iov_pf_get_pm_vfs(&to_gt(i915)->iov);
 
 	err = intel_iov_provisioning_verify(&to_gt(i915)->iov, num_vfs);
 	if (err == -ENODATA) {
@@ -534,7 +535,7 @@ int i915_sriov_pf_disable_vfs(struct drm_i915_private *i915)
 
 	pf_update_guc_clients(&to_gt(i915)->iov, 0);
 	intel_iov_provisioning_auto(&to_gt(i915)->iov, 0);
-	intel_gt_pm_put_untracked(to_gt(i915));
+	intel_iov_pf_put_pm_vfs(&to_gt(i915)->iov);
 
 	dev_info(dev, "Disabled %u VFs\n", num_vfs);
 	return 0;
-- 
2.25.1

