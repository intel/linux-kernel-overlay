From 9617a45fa8ac98729c80e6515a038761b172ebbc Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Fri, 16 Oct 2020 10:48:51 -0700
Subject: [PATCH 52/72] x86/entry: Call HRESET when exiting kernel mode

By definition, when entering kernel mode, the execution of the user space
program has been suspended. At this point hardware has been accumulating
task classification history from the task that was running before entering
kernel mode. Furthermore, when exiting kernel mode, a different task may
run.

In order to not pollute classification history or leak kernel activity,
clobber task classification before exiting kernel mode.

If after returning to user mode the same tasks resumes execution, the
classification history will be lost. This should be OK since hardware will
report such classification invalid until it is able to classify the task
again. Until then, the kernel will not update the task's classification
value.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/entry/entry_64.S        | 13 +++++++++++++
 arch/x86/entry/entry_64_compat.S |  7 +++++++
 arch/x86/include/asm/hreset.h    | 19 +++++++++++++++++++
 3 files changed, 39 insertions(+)

diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index a16a5294d55f..cf6860a965dd 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -26,6 +26,7 @@
 #include <asm/msr.h>
 #include <asm/unistd.h>
 #include <asm/thread_info.h>
+#include <asm/hreset.h>
 #include <asm/hw_irq.h>
 #include <asm/page_types.h>
 #include <asm/irqflags.h>
@@ -202,6 +203,12 @@ syscall_return_via_sysret:
 	pushq	RSP-RDI(%rdi)	/* RSP */
 	pushq	(%rdi)		/* RDI */
 
+	/*
+	 * We don't want to leak or pollute thread classification with kernel activity.
+	 * clobber classification history before returning to user space.
+	 */
+	HRESET
+
 	/*
 	 * We are on the trampoline stack.  All regs except RDI are live.
 	 * We can do future final exit work right here.
@@ -593,6 +600,12 @@ SYM_INNER_LABEL(swapgs_restore_regs_and_return_to_usermode, SYM_L_GLOBAL)
 	/* Push user RDI on the trampoline stack. */
 	pushq	(%rdi)
 
+	/*
+	 * We don't want to leak or pollute thread classification with kernel activity.
+	 * clobber classification history before returning to user space.
+	 */
+	HRESET
+
 	/*
 	 * We are on the trampoline stack.  All regs except RDI are live.
 	 * We can do future final exit work right here.
diff --git a/arch/x86/entry/entry_64_compat.S b/arch/x86/entry/entry_64_compat.S
index 0051cf5c792d..677df51b5e81 100644
--- a/arch/x86/entry/entry_64_compat.S
+++ b/arch/x86/entry/entry_64_compat.S
@@ -9,6 +9,7 @@
 #include <asm/current.h>
 #include <asm/errno.h>
 #include <asm/ia32_unistd.h>
+#include <asm/hreset.h>
 #include <asm/thread_info.h>
 #include <asm/segment.h>
 #include <asm/irqflags.h>
@@ -260,6 +261,12 @@ SYM_INNER_LABEL(entry_SYSCALL_compat_after_hwframe, SYM_L_GLOBAL)
 
 	/* Opportunistic SYSRET */
 sysret32_from_system_call:
+	/*
+	 * We don't want to leak or pollute thread classification with kernel activity.
+	 * clobber classification history before returning to user space.
+	 */
+	HRESET
+
 	/*
 	 * We are not going to return to userspace from the trampoline
 	 * stack. So let's erase the thread stack right now.
diff --git a/arch/x86/include/asm/hreset.h b/arch/x86/include/asm/hreset.h
index 2232cbc7b49b..735e389b6516 100644
--- a/arch/x86/include/asm/hreset.h
+++ b/arch/x86/include/asm/hreset.h
@@ -1,6 +1,8 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 #ifndef _ASM_X86_HRESET_H
 
+#include <asm/cpufeatures.h>
+
 /* Find the supported HRESET features in this leaf */
 #define CPUID_HRESET_LEAF_EAX		0x20
 
@@ -30,6 +32,23 @@
 
 #define __ASM_HRESET  .byte 0xf3, 0xf, 0x3a, 0xf0, 0xc0, 0x0
 
+#ifdef CONFIG_X86_64
+.macro HRESET
+	/*
+	 * Argument of HRESET. It can't be put in an ALTERNATIVE
+	 * due to the IP-relative indirection
+	 */
+	ALTERNATIVE "jmp 1f", "", X86_FEATURE_HRESET
+	push	%rax
+	mov hreset_features, %eax
+	__ASM_HRESET
+	pop	%rax
+	1:
+.endm
+#else /* CONFIG_X86_64 */
+#define HRESET
+#endif /* CONFIG_X86_64 */
+
 #endif /* __ASSEMBLY */
 
 #endif /* _ASM_X86_HRESET_H */
-- 
2.27.0

