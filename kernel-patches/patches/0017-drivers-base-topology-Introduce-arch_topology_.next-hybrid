From 7986f8da398e74d1147a4af11d996cb8cb18a1f5 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Fri, 18 Sep 2020 10:56:23 -0700
Subject: [PATCH 17/72] drivers base/topology: Introduce
 arch_topology_get_factor()

A subsequent changeset will relocate topology_normalize_cpu_scale() to
topology.c to make it available to computer architectures that do not use
arch_topology.c. topology_normalize_cpu_scale() uses a per-CPU freq_factor
variable in the computation CPUs' capacities. However, not all platforms
need such a factor. For instance, the Intel's Hardware Feedback Interface
(HFI) to set CPUs' capacities. HFI already factors in maximum frequencies
in the performance ratings it provides (a subsequent patch will use HFI to
set CPUs' capacities).

Introduce a stub arch_topology_get_factor() that returns 1 and can be
overridden if needed. The existing generic arch_topology implementation
overrides the stub to continue using per-CPU freq_factor variables it
defines.

Cc: Andi Kleen <ak@linux.intel.com>
Cc: Len Brown <len.brown@intel.com>
Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
Changes since v4:
  * Introduced this patch.

Changes since v3:
  * N/A

Changes since v2:
  * N/A

Changes since v1:
  * N/A
---
 drivers/base/arch_topology.c | 13 +++++++++++--
 drivers/base/topology.c      |  5 +++++
 include/linux/topology.h     |  1 +
 3 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/drivers/base/arch_topology.c b/drivers/base/arch_topology.c
index 678224a3d91c..ac7a52682ccf 100644
--- a/drivers/base/arch_topology.c
+++ b/drivers/base/arch_topology.c
@@ -167,6 +167,12 @@ static void update_topology_flags_workfn(struct work_struct *work)
 }
 
 static DEFINE_PER_CPU(u32, freq_factor) = 1;
+
+u32 arch_topology_get_factor(int cpu)
+{
+	return per_cpu(freq_factor, cpu);
+}
+
 static u32 *raw_capacity;
 
 static int free_raw_capacity(void)
@@ -181,6 +187,7 @@ void topology_normalize_cpu_scale(void)
 {
 	u64 capacity;
 	u64 capacity_scale;
+	u32 freq_factor;
 	int cpu;
 
 	if (!raw_capacity)
@@ -188,13 +195,15 @@ void topology_normalize_cpu_scale(void)
 
 	capacity_scale = 1;
 	for_each_possible_cpu(cpu) {
-		capacity = raw_capacity[cpu] * per_cpu(freq_factor, cpu);
+		freq_factor = arch_topology_get_factor(cpu);
+		capacity = raw_capacity[cpu] * freq_factor;
 		capacity_scale = max(capacity, capacity_scale);
 	}
 
 	pr_debug("cpu_capacity: capacity_scale=%llu\n", capacity_scale);
 	for_each_possible_cpu(cpu) {
-		capacity = raw_capacity[cpu] * per_cpu(freq_factor, cpu);
+		freq_factor = arch_topology_get_factor(cpu);
+		capacity = raw_capacity[cpu] * freq_factor;
 		capacity = div64_u64(capacity << SCHED_CAPACITY_SHIFT,
 			capacity_scale);
 		topology_set_cpu_scale(cpu, capacity);
diff --git a/drivers/base/topology.c b/drivers/base/topology.c
index b825393feaeb..49af9a8c1aee 100644
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@ -178,3 +178,8 @@ static int register_cpu_capacity_sysctl(void)
 	return 0;
 }
 subsys_initcall(register_cpu_capacity_sysctl);
+
+u32 __weak arch_topology_get_factor(int cpu)
+{
+	return 1;
+}
diff --git a/include/linux/topology.h b/include/linux/topology.h
index 0c279c2f1f8f..4fbfb41b5cd2 100644
--- a/include/linux/topology.h
+++ b/include/linux/topology.h
@@ -220,4 +220,5 @@ static inline unsigned long topology_get_cpu_scale(int cpu)
 
 void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);
 
+u32 arch_topology_get_factor(int cpu);
 #endif /* _LINUX_TOPOLOGY_H */
-- 
2.27.0

