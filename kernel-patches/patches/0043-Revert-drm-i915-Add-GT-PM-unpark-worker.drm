From abf27854952ef78ae63304c4ece2e8b215026a30 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Wed, 24 Nov 2021 13:16:40 +0800
Subject: [PATCH 043/888] Revert "drm/i915: Add GT PM unpark worker"

This reverts commit 8e1111117fbe30845015136df77ef4889af9033b.
---
 drivers/gpu/drm/i915/Makefile                 |  1 -
 drivers/gpu/drm/i915/gt/intel_gt.c            |  3 --
 drivers/gpu/drm/i915/gt/intel_gt_pm.c         |  8 ----
 .../gpu/drm/i915/gt/intel_gt_pm_unpark_work.c | 35 ----------------
 .../gpu/drm/i915/gt/intel_gt_pm_unpark_work.h | 40 -------------------
 drivers/gpu/drm/i915/gt/intel_gt_types.h      | 10 -----
 drivers/gpu/drm/i915/gt/uc/intel_guc.h        |  8 ++--
 .../gpu/drm/i915/gt/uc/intel_guc_submission.c | 15 ++-----
 drivers/gpu/drm/i915/intel_wakeref.c          |  5 ---
 drivers/gpu/drm/i915/intel_wakeref.h          |  1 -
 10 files changed, 7 insertions(+), 119 deletions(-)
 delete mode 100644 drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.c
 delete mode 100644 drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.h

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index d88b2ccc2de2..bf0c13e70ebd 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -103,7 +103,6 @@ gt-y += \
 	gt/intel_gt_clock_utils.o \
 	gt/intel_gt_irq.o \
 	gt/intel_gt_pm.o \
-	gt/intel_gt_pm_unpark_work.o \
 	gt/intel_gt_pm_irq.o \
 	gt/intel_gt_requests.o \
 	gt/intel_gtt.o \
diff --git a/drivers/gpu/drm/i915/gt/intel_gt.c b/drivers/gpu/drm/i915/gt/intel_gt.c
index 7e690e74baa2..62d40c986642 100644
--- a/drivers/gpu/drm/i915/gt/intel_gt.c
+++ b/drivers/gpu/drm/i915/gt/intel_gt.c
@@ -29,9 +29,6 @@ void intel_gt_init_early(struct intel_gt *gt, struct drm_i915_private *i915)
 
 	spin_lock_init(&gt->irq_lock);
 
-	spin_lock_init(&gt->pm_unpark_work_lock);
-	INIT_LIST_HEAD(&gt->pm_unpark_work_list);
-
 	INIT_LIST_HEAD(&gt->closed_vma);
 	spin_lock_init(&gt->closed_lock);
 
diff --git a/drivers/gpu/drm/i915/gt/intel_gt_pm.c b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
index 564c11a3748b..dea8e2479897 100644
--- a/drivers/gpu/drm/i915/gt/intel_gt_pm.c
+++ b/drivers/gpu/drm/i915/gt/intel_gt_pm.c
@@ -90,13 +90,6 @@ static int __gt_unpark(struct intel_wakeref *wf)
 	return 0;
 }
 
-static void __gt_unpark_work_queue(struct intel_wakeref *wf)
-{
-	struct intel_gt *gt = container_of(wf, typeof(*gt), wakeref);
-
-	intel_gt_pm_unpark_work_queue(gt);
-}
-
 static int __gt_park(struct intel_wakeref *wf)
 {
 	struct intel_gt *gt = container_of(wf, typeof(*gt), wakeref);
@@ -125,7 +118,6 @@ static int __gt_park(struct intel_wakeref *wf)
 
 static const struct intel_wakeref_ops wf_ops = {
 	.get = __gt_unpark,
-	.post_get = __gt_unpark_work_queue,
 	.put = __gt_park,
 };
 
diff --git a/drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.c b/drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.c
deleted file mode 100644
index 23162dbd0c35..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.c
+++ /dev/null
@@ -1,35 +0,0 @@
-// SPDX-License-Identifier: MIT
-/*
- * Copyright © 2021 Intel Corporation
- */
-
-#include "i915_drv.h"
-#include "intel_runtime_pm.h"
-#include "intel_gt_pm.h"
-
-void intel_gt_pm_unpark_work_queue(struct intel_gt *gt)
-{
-	struct intel_gt_pm_unpark_work *work, *next;
-	unsigned long flags;
-
-	spin_lock_irqsave(&gt->pm_unpark_work_lock, flags);
-	list_for_each_entry_safe(work, next,
-				 &gt->pm_unpark_work_list, link) {
-		list_del_init(&work->link);
-		queue_work(system_unbound_wq, &work->worker);
-	}
-	spin_unlock_irqrestore(&gt->pm_unpark_work_lock, flags);
-}
-
-void intel_gt_pm_unpark_work_add(struct intel_gt *gt,
-				 struct intel_gt_pm_unpark_work *work)
-{
-	unsigned long flags;
-
-	spin_lock_irqsave(&gt->pm_unpark_work_lock, flags);
-	if (intel_gt_pm_is_awake(gt))
-		queue_work(system_unbound_wq, &work->worker);
-	else if (list_empty(&work->link))
-		list_add_tail(&work->link, &gt->pm_unpark_work_list);
-	spin_unlock_irqrestore(&gt->pm_unpark_work_lock, flags);
-}
diff --git a/drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.h b/drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.h
deleted file mode 100644
index eaf1dc313aa2..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_gt_pm_unpark_work.h
+++ /dev/null
@@ -1,40 +0,0 @@
-/* SPDX-License-Identifier: MIT */
-/*
- * Copyright © 2021 Intel Corporation
- */
-
-#ifndef INTEL_GT_PM_UNPARK_WORK_H
-#define INTEL_GT_PM_UNPARK_WORK_H
-
-#include <linux/list.h>
-#include <linux/workqueue.h>
-
-struct intel_gt;
-
-/**
- * struct intel_gt_pm_unpark_work - work to be scheduled when GT unparked
- */
-struct intel_gt_pm_unpark_work {
-	/**
-	 * @link: link into gt->pm_unpark_work_list of workers that need to be
-	 * scheduled when GT is unpark, protected by gt->pm_unpark_work_lock
-	 */
-	struct list_head link;
-	/** @worker: will be scheduled when GT unparked */
-	struct work_struct worker;
-};
-
-void intel_gt_pm_unpark_work_queue(struct intel_gt *gt);
-
-void intel_gt_pm_unpark_work_add(struct intel_gt *gt,
-				 struct intel_gt_pm_unpark_work *work);
-
-static inline void
-intel_gt_pm_unpark_work_init(struct intel_gt_pm_unpark_work *work,
-			     work_func_t fn)
-{
-	INIT_LIST_HEAD(&work->link);
-	INIT_WORK(&work->worker, fn);
-}
-
-#endif /* INTEL_GT_PM_UNPARK_WORK_H */
diff --git a/drivers/gpu/drm/i915/gt/intel_gt_types.h b/drivers/gpu/drm/i915/gt/intel_gt_types.h
index 4480312f0add..a81e21bf1bd1 100644
--- a/drivers/gpu/drm/i915/gt/intel_gt_types.h
+++ b/drivers/gpu/drm/i915/gt/intel_gt_types.h
@@ -96,16 +96,6 @@ struct intel_gt {
 	struct intel_wakeref wakeref;
 	atomic_t user_wakeref;
 
-	/**
-	 * @pm_unpark_work_list: list of delayed work to scheduled which GT is
-	 * unparked, protected by pm_unpark_work_lock
-	 */
-	struct list_head pm_unpark_work_list;
-	/**
-	 * @pm_unpark_work_lock: protects pm_unpark_work_list
-	 */
-	spinlock_t pm_unpark_work_lock;
-
 	struct list_head closed_vma;
 	spinlock_t closed_lock; /* guards the list of closed_vma */
 
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc.h b/drivers/gpu/drm/i915/gt/uc/intel_guc.h
index 023953e77553..7358883f1540 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc.h
@@ -19,7 +19,6 @@
 #include "intel_uc_fw.h"
 #include "i915_utils.h"
 #include "i915_vma.h"
-#include "gt/intel_gt_pm_unpark_work.h"
 
 struct __guc_ads_blob;
 
@@ -79,12 +78,11 @@ struct intel_guc {
 		 */
 		struct list_head destroyed_contexts;
 		/**
-		 * @destroyed_worker: Worker to deregister contexts, need as we
+		 * @destroyed_worker: worker to deregister contexts, need as we
 		 * need to take a GT PM reference and can't from destroy
-		 * function as it might be in an atomic context (no sleeping).
-		 * Worker only issues deregister when GT is unparked.
+		 * function as it might be in an atomic context (no sleeping)
 		 */
-		struct intel_gt_pm_unpark_work destroyed_worker;
+		struct work_struct destroyed_worker;
 	} submission_state;
 
 	bool submission_supported;
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
index ae8fc3a48126..741030a21543 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
@@ -1138,8 +1138,7 @@ int intel_guc_submission_init(struct intel_guc *guc)
 	INIT_LIST_HEAD(&guc->submission_state.guc_id_list);
 	ida_init(&guc->submission_state.guc_ids);
 	INIT_LIST_HEAD(&guc->submission_state.destroyed_contexts);
-	intel_gt_pm_unpark_work_init(&guc->submission_state.destroyed_worker,
-				     destroyed_worker_func);
+	INIT_WORK(&guc->submission_state.destroyed_worker, destroyed_worker_func);
 
 	return 0;
 }
@@ -1946,18 +1945,13 @@ static void deregister_destroyed_contexts(struct intel_guc *guc)
 
 static void destroyed_worker_func(struct work_struct *w)
 {
-	struct intel_gt_pm_unpark_work *destroyed_worker =
-		container_of(w, struct intel_gt_pm_unpark_work, worker);
-	struct intel_guc *guc = container_of(destroyed_worker, struct intel_guc,
+	struct intel_guc *guc = container_of(w, struct intel_guc,
 					     submission_state.destroyed_worker);
 	struct intel_gt *gt = guc_to_gt(guc);
 	int tmp;
 
-	with_intel_gt_pm_if_awake(gt, tmp)
+	with_intel_gt_pm(gt, tmp)
 		deregister_destroyed_contexts(guc);
-
-	if (!list_empty(&guc->submission_state.destroyed_contexts))
-		intel_gt_pm_unpark_work_add(gt, destroyed_worker);
 }
 
 static void guc_context_destroy(struct kref *kref)
@@ -1994,8 +1988,7 @@ static void guc_context_destroy(struct kref *kref)
 	 * take the GT PM for the first time which isn't allowed from an atomic
 	 * context.
 	 */
-	intel_gt_pm_unpark_work_add(guc_to_gt(guc),
-				    &guc->submission_state.destroyed_worker);
+	queue_work(system_unbound_wq, &guc->submission_state.destroyed_worker);
 }
 
 static int guc_context_alloc(struct intel_context *ce)
diff --git a/drivers/gpu/drm/i915/intel_wakeref.c b/drivers/gpu/drm/i915/intel_wakeref.c
index 282fc4f312e3..dfd87d082218 100644
--- a/drivers/gpu/drm/i915/intel_wakeref.c
+++ b/drivers/gpu/drm/i915/intel_wakeref.c
@@ -24,8 +24,6 @@ static void rpm_put(struct intel_wakeref *wf)
 
 int __intel_wakeref_get_first(struct intel_wakeref *wf)
 {
-	bool do_post = false;
-
 	/*
 	 * Treat get/put as different subclasses, as we may need to run
 	 * the put callback from under the shrinker and do not want to
@@ -46,11 +44,8 @@ int __intel_wakeref_get_first(struct intel_wakeref *wf)
 		}
 
 		smp_mb__before_atomic(); /* release wf->count */
-		do_post = true;
 	}
 	atomic_inc(&wf->count);
-	if (do_post && wf->ops->post_get)
-		wf->ops->post_get(wf);
 	mutex_unlock(&wf->mutex);
 
 	INTEL_WAKEREF_BUG_ON(atomic_read(&wf->count) <= 0);
diff --git a/drivers/gpu/drm/i915/intel_wakeref.h b/drivers/gpu/drm/i915/intel_wakeref.h
index ef7e6a698e8a..545c8f277c46 100644
--- a/drivers/gpu/drm/i915/intel_wakeref.h
+++ b/drivers/gpu/drm/i915/intel_wakeref.h
@@ -30,7 +30,6 @@ typedef depot_stack_handle_t intel_wakeref_t;
 
 struct intel_wakeref_ops {
 	int (*get)(struct intel_wakeref *wf);
-	void (*post_get)(struct intel_wakeref *wf);
 	int (*put)(struct intel_wakeref *wf);
 };
 
-- 
2.25.1

