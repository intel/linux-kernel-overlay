From 3fc1aabf17924bbbb8eecaf05d8cdb60f606487a Mon Sep 17 00:00:00 2001
From: zouxiaoh <xiaohong.zou@intel.com>
Date: Wed, 22 Mar 2023 15:43:25 +0800
Subject: [PATCH 04/60] media: i2c: Fix kernel 5.14+ support of IMX390 and
 TI960

Signed-off-by: Hao Yao <hao.yao@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/media/i2c/imx390.c    | 18 +++++++++---------
 drivers/media/i2c/ti960-des.c | 29 ++++++++++++++---------------
 drivers/media/i2c/ti964.c     | 29 ++++++++++++++---------------
 3 files changed, 37 insertions(+), 39 deletions(-)

diff --git a/drivers/media/i2c/imx390.c b/drivers/media/i2c/imx390.c
index 2bdcf4c50c97..b4e5141278b6 100644
--- a/drivers/media/i2c/imx390.c
+++ b/drivers/media/i2c/imx390.c
@@ -1685,7 +1685,7 @@ static int __maybe_unused imx390_resume(struct device *dev)
 }
 
 static int imx390_set_format(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_pad_config *cfg,
+			     struct v4l2_subdev_state *sd_state,
 			     struct v4l2_subdev_format *fmt)
 {
 	struct imx390 *imx390 = to_imx390(sd);
@@ -1714,7 +1714,7 @@ static int imx390_set_format(struct v4l2_subdev *sd,
 
 	imx390_update_pad_format(mode, &fmt->format);
 	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
-		*v4l2_subdev_get_try_format(sd, cfg, fmt->pad) = fmt->format;
+		*v4l2_subdev_get_try_format(sd, sd_state, fmt->pad) = fmt->format;
 	} else {
 		imx390->cur_mode = mode;
 		__v4l2_ctrl_s_ctrl(imx390->link_freq, mode->link_freq_index);
@@ -1746,14 +1746,14 @@ static int imx390_set_format(struct v4l2_subdev *sd,
 }
 
 static int imx390_get_format(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_pad_config *cfg,
+			     struct v4l2_subdev_state *sd_state,
 			     struct v4l2_subdev_format *fmt)
 {
 	struct imx390 *imx390 = to_imx390(sd);
 
 	mutex_lock(&imx390->mutex);
 	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY)
-		fmt->format = *v4l2_subdev_get_try_format(&imx390->sd, cfg,
+		fmt->format = *v4l2_subdev_get_try_format(&imx390->sd, sd_state,
 							  fmt->pad);
 	else
 		imx390_update_pad_format(imx390->cur_mode, &fmt->format);
@@ -1780,7 +1780,7 @@ static int imx390_get_frame_desc(struct v4l2_subdev *sd,
 }
 
 static int imx390_enum_mbus_code(struct v4l2_subdev *sd,
-				 struct v4l2_subdev_pad_config *cfg,
+				 struct v4l2_subdev_state *sd_state,
 				 struct v4l2_subdev_mbus_code_enum *code)
 {
 	if (code->index >= ARRAY_SIZE(supported_formats))
@@ -1792,7 +1792,7 @@ static int imx390_enum_mbus_code(struct v4l2_subdev *sd,
 }
 
 static int imx390_enum_frame_size(struct v4l2_subdev *sd,
-				  struct v4l2_subdev_pad_config *cfg,
+				  struct v4l2_subdev_state *sd_state,
 				  struct v4l2_subdev_frame_size_enum *fse)
 {
 	if (fse->index >= ARRAY_SIZE(supported_modes))
@@ -1809,7 +1809,7 @@ static int imx390_enum_frame_size(struct v4l2_subdev *sd,
 static int imx390_frame_rate[] = { 40, 20 };
 
 static int imx390_enum_frame_interval(struct v4l2_subdev *subdev,
-		struct v4l2_subdev_pad_config *cfg,
+		struct v4l2_subdev_state *sd_state,
 		struct v4l2_subdev_frame_interval_enum *fie)
 {
 	int mode_size = ARRAY_SIZE(supported_modes);
@@ -1839,7 +1839,7 @@ static int imx390_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 
 	mutex_lock(&imx390->mutex);
 	imx390_update_pad_format(&supported_modes[0],
-				 v4l2_subdev_get_try_format(sd, fh->pad, 0));
+				 v4l2_subdev_get_try_format(sd, fh->state, 0));
 	mutex_unlock(&imx390->mutex);
 
 	return 0;
@@ -1993,7 +1993,7 @@ static int imx390_probe(struct i2c_client *client)
 		goto probe_error_v4l2_ctrl_handler_free;
 	}
 
-	ret = v4l2_async_register_subdev_sensor_common(&imx390->sd);
+	ret = v4l2_async_register_subdev_sensor(&imx390->sd);
 	if (ret < 0) {
 		dev_err(&client->dev, "failed to register V4L2 subdev: %d",
 			ret);
diff --git a/drivers/media/i2c/ti960-des.c b/drivers/media/i2c/ti960-des.c
index 1178117ad61d..14bd94a26e28 100644
--- a/drivers/media/i2c/ti960-des.c
+++ b/drivers/media/i2c/ti960-des.c
@@ -386,8 +386,8 @@ static int ti960_fsin_gpio_init(struct ti960 *va, unsigned short rx_port,
 }
 
 static int ti960_enum_mbus_code(struct v4l2_subdev *sd,
-				      struct v4l2_subdev_pad_config *cfg,
-				      struct v4l2_subdev_mbus_code_enum *code)
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_mbus_code_enum *code)
 {
 	struct ti960 *va = to_ti960(sd);
 	const uint32_t *supported_code =
@@ -441,27 +441,27 @@ static int ti960_get_frame_desc(struct v4l2_subdev *sd,
 
 static struct v4l2_mbus_framefmt *
 __ti960_get_ffmt(struct v4l2_subdev *subdev,
-			 struct v4l2_subdev_pad_config *cfg,
-			 unsigned int pad, unsigned int which,
-			 unsigned int stream)
+		 struct v4l2_subdev_state *sd_state,
+		 unsigned int pad, unsigned int which,
+		 unsigned int stream)
 {
 	struct ti960 *va = to_ti960(subdev);
 
 	if (which == V4L2_SUBDEV_FORMAT_TRY)
-		return v4l2_subdev_get_try_format(subdev, cfg, pad);
+		return v4l2_subdev_get_try_format(subdev, sd_state, pad);
 	else
 		return &va->ffmts[pad][stream];
 }
 
 static int ti960_get_format(struct v4l2_subdev *subdev,
-				  struct v4l2_subdev_pad_config *cfg,
-				struct v4l2_subdev_format *fmt)
+			    struct v4l2_subdev_state *sd_state,
+			    struct v4l2_subdev_format *fmt)
 {
 	struct ti960 *va = to_ti960(subdev);
 
 	mutex_lock(&va->mutex);
-	fmt->format = *__ti960_get_ffmt(subdev, cfg, fmt->pad,
-						    fmt->which, 0);
+	fmt->format = *__ti960_get_ffmt(subdev, sd_state, fmt->pad,
+					fmt->which, 0);
 	mutex_unlock(&va->mutex);
 
 	dev_dbg(subdev->dev, "subdev_format: which: %s, pad: %d.\n",
@@ -476,8 +476,8 @@ static int ti960_get_format(struct v4l2_subdev *subdev,
 }
 
 static int ti960_set_format(struct v4l2_subdev *subdev,
-				  struct v4l2_subdev_pad_config *cfg,
-				struct v4l2_subdev_format *fmt)
+			    struct v4l2_subdev_state *sd_state,
+			    struct v4l2_subdev_format *fmt)
 {
 	struct ti960 *va = to_ti960(subdev);
 	const struct ti960_csi_data_format *csi_format;
@@ -487,8 +487,7 @@ static int ti960_set_format(struct v4l2_subdev *subdev,
 		fmt->format.code);
 
 	mutex_lock(&va->mutex);
-	ffmt = __ti960_get_ffmt(subdev, cfg, fmt->pad, fmt->which,
-				      0);
+	ffmt = __ti960_get_ffmt(subdev, sd_state, fmt->pad, fmt->which, 0);
 
 	if (fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
 		ffmt->width = fmt->format.width;
@@ -523,7 +522,7 @@ static int ti960_open(struct v4l2_subdev *subdev,
 				struct v4l2_subdev_fh *fh)
 {
 	struct v4l2_mbus_framefmt *try_fmt =
-		v4l2_subdev_get_try_format(subdev, fh->pad, 0);
+		v4l2_subdev_get_try_format(subdev, fh->state, 0);
 
 	struct v4l2_subdev_format fmt = {
 		.which = V4L2_SUBDEV_FORMAT_TRY,
diff --git a/drivers/media/i2c/ti964.c b/drivers/media/i2c/ti964.c
index aff55c827871..4d80d75d1658 100644
--- a/drivers/media/i2c/ti964.c
+++ b/drivers/media/i2c/ti964.c
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
-// Copyright (C) 2016 - 2020 Intel Corporation
+// Copyright (C) 2016 - 2022 Intel Corporation
 
 #include <linux/device.h>
 #include <linux/gpio.h>
@@ -283,8 +283,8 @@ static int ti964_set_routing(struct v4l2_subdev *sd,
 }
 
 static int ti964_enum_mbus_code(struct v4l2_subdev *sd,
-				      struct v4l2_subdev_pad_config *cfg,
-				      struct v4l2_subdev_mbus_code_enum *code)
+				struct v4l2_subdev_state *sd_state,
+				struct v4l2_subdev_mbus_code_enum *code)
 {
 	struct ti964 *va = to_ti964(sd);
 	const uint32_t *supported_code =
@@ -364,21 +364,21 @@ static int ti964_get_frame_desc(struct v4l2_subdev *sd,
 
 static struct v4l2_mbus_framefmt *
 __ti964_get_ffmt(struct v4l2_subdev *subdev,
-			 struct v4l2_subdev_pad_config *cfg,
+			 struct v4l2_subdev_state *sd_state,
 			 unsigned int pad, unsigned int which,
 			 unsigned int stream)
 {
 	struct ti964 *va = to_ti964(subdev);
 
 	if (which == V4L2_SUBDEV_FORMAT_TRY)
-		return v4l2_subdev_get_try_format(subdev, cfg, pad);
+		return v4l2_subdev_get_try_format(subdev, sd_state, pad);
 	else
 		return &va->ffmts[pad][stream];
 }
 
 static int ti964_get_format(struct v4l2_subdev *subdev,
-				  struct v4l2_subdev_pad_config *cfg,
-				struct v4l2_subdev_format *fmt)
+			    struct v4l2_subdev_state *sd_state,
+			    struct v4l2_subdev_format *fmt)
 {
 	struct ti964 *va = to_ti964(subdev);
 
@@ -386,8 +386,8 @@ static int ti964_get_format(struct v4l2_subdev *subdev,
 		return -EINVAL;
 
 	mutex_lock(&va->mutex);
-	fmt->format = *__ti964_get_ffmt(subdev, cfg, fmt->pad,
-						    fmt->which, fmt->stream);
+	fmt->format = *__ti964_get_ffmt(subdev, sd_state, fmt->pad,
+					fmt->which, fmt->stream);
 	mutex_unlock(&va->mutex);
 
 	dev_dbg(subdev->dev, "subdev_format: which: %s, pad: %d, stream: %d.\n",
@@ -402,8 +402,8 @@ static int ti964_get_format(struct v4l2_subdev *subdev,
 }
 
 static int ti964_set_format(struct v4l2_subdev *subdev,
-				  struct v4l2_subdev_pad_config *cfg,
-				struct v4l2_subdev_format *fmt)
+			    struct v4l2_subdev_state *sd_state,
+			    struct v4l2_subdev_format *fmt)
 {
 	struct ti964 *va = to_ti964(subdev);
 	const struct ti964_csi_data_format *csi_format;
@@ -416,8 +416,8 @@ static int ti964_set_format(struct v4l2_subdev *subdev,
 		fmt->format.code);
 
 	mutex_lock(&va->mutex);
-	ffmt = __ti964_get_ffmt(subdev, cfg, fmt->pad, fmt->which,
-				      fmt->stream);
+	ffmt = __ti964_get_ffmt(subdev, sd_state, fmt->pad, fmt->which,
+				fmt->stream);
 
 	if (fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
 		ffmt->width = fmt->format.width;
@@ -437,8 +437,7 @@ static int ti964_open(struct v4l2_subdev *subdev,
 				struct v4l2_subdev_fh *fh)
 {
 	struct v4l2_mbus_framefmt *try_fmt =
-		v4l2_subdev_get_try_format(subdev, fh->pad, 0);
-
+		v4l2_subdev_get_try_format(subdev, fh->state, 0);
 	struct v4l2_subdev_format fmt = {
 		.which = V4L2_SUBDEV_FORMAT_TRY,
 		.pad = TI964_PAD_SOURCE,
-- 
2.25.1

