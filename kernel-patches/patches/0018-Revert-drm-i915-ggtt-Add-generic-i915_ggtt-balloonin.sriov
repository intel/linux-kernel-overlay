From 29da3cc00c71f70c7df761ed2000d5244317db4a Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Wed, 22 Mar 2023 17:35:37 +0800
Subject: [PATCH 0018/2236] Revert "drm/i915/ggtt: Add generic i915_ggtt
 ballooning support"

This reverts commit 26cc3b465def0bd5eab87294929650c967c8dd64.
---
 drivers/gpu/drm/i915/gt/intel_ggtt.c | 68 ++++++----------------------
 drivers/gpu/drm/i915/gt/intel_gtt.h  |  4 --
 drivers/gpu/drm/i915/i915_vgpu.c     | 64 +++++++++++++++++++++-----
 3 files changed, 66 insertions(+), 70 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/intel_ggtt.c b/drivers/gpu/drm/i915/gt/intel_ggtt.c
index ab74245e231a..2049a00417af 100644
--- a/drivers/gpu/drm/i915/gt/intel_ggtt.c
+++ b/drivers/gpu/drm/i915/gt/intel_ggtt.c
@@ -502,18 +502,29 @@ void intel_ggtt_unbind_vma(struct i915_address_space *vm,
 
 static int ggtt_reserve_guc_top(struct i915_ggtt *ggtt)
 {
+	u64 size;
+	int ret;
+
 	if (!intel_uc_uses_guc(&ggtt->vm.gt->uc))
 		return 0;
 
 	GEM_BUG_ON(ggtt->vm.total <= GUC_GGTT_TOP);
+	size = ggtt->vm.total - GUC_GGTT_TOP;
+
+	ret = i915_gem_gtt_reserve(&ggtt->vm, NULL, &ggtt->uc_fw, size,
+				   GUC_GGTT_TOP, I915_COLOR_UNEVICTABLE,
+				   PIN_NOEVICT);
+	if (ret)
+		drm_dbg(&ggtt->vm.i915->drm,
+			"Failed to reserve top of GGTT for GuC\n");
 
-	return i915_ggtt_balloon(ggtt, GUC_GGTT_TOP, ggtt->vm.total,
-				 &ggtt->uc_fw);
+	return ret;
 }
 
 static void ggtt_release_guc_top(struct i915_ggtt *ggtt)
 {
-	i915_ggtt_deballoon(ggtt, &ggtt->uc_fw);
+	if (drm_mm_node_allocated(&ggtt->uc_fw))
+		drm_mm_remove_node(&ggtt->uc_fw);
 }
 
 static void cleanup_init_ggtt(struct i915_ggtt *ggtt)
@@ -1302,57 +1313,6 @@ void i915_ggtt_resume(struct i915_ggtt *ggtt)
 	intel_ggtt_restore_fences(ggtt);
 }
 
-/**
- * i915_ggtt_balloon - reserve fixed space in an GGTT
- * @ggtt: the &struct i915_ggtt
- * @start: start offset inside the GGTT,
- *          must be #I915_GTT_MIN_ALIGNMENT aligned
- * @end: end offset inside the GGTT,
- *        must be #I915_GTT_PAGE_SIZE aligned
- * @node: the &struct drm_mm_node
- *
- * i915_ggtt_balloon() tries to reserve the @node from @start to @end inside
- * GGTT the address space.
- *
- * Returns: 0 on success, -ENOSPC if no suitable hole is found.
- */
-int i915_ggtt_balloon(struct i915_ggtt *ggtt, u64 start, u64 end,
-		      struct drm_mm_node *node)
-{
-	u64 size = end - start;
-	int err;
-
-	GEM_BUG_ON(start >= end);
-	drm_dbg(&ggtt->vm.i915->drm, "%sGGTT [%#llx-%#llx] %lluK\n",
-		"ballooning ", start, end, size / SZ_1K);
-
-	err = i915_gem_gtt_reserve(&ggtt->vm, NULL, node, size, start,
-				   I915_COLOR_UNEVICTABLE, PIN_NOEVICT);
-	if (unlikely(err)) {
-		drm_err(&ggtt->vm.i915->drm, "%sGGTT [%#llx-%#llx] %lluK\n",
-			"Failed to balloon ", node->start,
-			node->start + node->size, node->size / SZ_1K);
-		return err;
-	}
-
-	ggtt->vm.reserved += node->size;
-	return 0;
-}
-
-void i915_ggtt_deballoon(struct i915_ggtt *ggtt, struct drm_mm_node *node)
-{
-	if (!drm_mm_node_allocated(node))
-		return;
-
-	drm_dbg(&ggtt->vm.i915->drm, "%sGGTT [%#llx-%#llx] %lluK\n",
-		"deballooning ", node->start, node->start + node->size,
-		node->size / SZ_1K);
-
-	GEM_BUG_ON(ggtt->vm.reserved < node->size);
-	ggtt->vm.reserved -= node->size;
-	drm_mm_remove_node(node);
-}
-
 void i915_ggtt_mark_pte_lost(struct drm_i915_private *i915, bool val)
 {
 	to_gt(i915)->ggtt->pte_lost = val;
diff --git a/drivers/gpu/drm/i915/gt/intel_gtt.h b/drivers/gpu/drm/i915/gt/intel_gtt.h
index 9e156f981a5e..062b78333fb2 100644
--- a/drivers/gpu/drm/i915/gt/intel_gtt.h
+++ b/drivers/gpu/drm/i915/gt/intel_gtt.h
@@ -590,10 +590,6 @@ static inline bool i915_ggtt_has_aperture(const struct i915_ggtt *ggtt)
 	return ggtt->mappable_end > 0;
 }
 
-int i915_ggtt_balloon(struct i915_ggtt *ggtt, u64 start, u64 end,
-		      struct drm_mm_node *node);
-void i915_ggtt_deballoon(struct i915_ggtt *ggtt, struct drm_mm_node *node);
-
 int i915_ppgtt_init_hw(struct intel_gt *gt);
 
 struct i915_ppgtt *i915_ppgtt_create(struct intel_gt *gt,
diff --git a/drivers/gpu/drm/i915/i915_vgpu.c b/drivers/gpu/drm/i915/i915_vgpu.c
index 8b10bb0aa46e..c97323973f9b 100644
--- a/drivers/gpu/drm/i915/i915_vgpu.c
+++ b/drivers/gpu/drm/i915/i915_vgpu.c
@@ -145,6 +145,23 @@ struct _balloon_info_ {
 
 static struct _balloon_info_ bl_info;
 
+static void vgt_deballoon_space(struct i915_ggtt *ggtt,
+				struct drm_mm_node *node)
+{
+	struct drm_i915_private *dev_priv = ggtt->vm.i915;
+	if (!drm_mm_node_allocated(node))
+		return;
+
+	drm_dbg(&dev_priv->drm,
+		"deballoon space: range [0x%llx - 0x%llx] %llu KiB.\n",
+		node->start,
+		node->start + node->size,
+		node->size / 1024);
+
+	ggtt->vm.reserved -= node->size;
+	drm_mm_remove_node(node);
+}
+
 /**
  * intel_vgt_deballoon - deballoon reserved graphics address trunks
  * @ggtt: the global GGTT from which we reserved earlier
@@ -163,7 +180,30 @@ void intel_vgt_deballoon(struct i915_ggtt *ggtt)
 	drm_dbg(&dev_priv->drm, "VGT deballoon.\n");
 
 	for (i = 0; i < 4; i++)
-		i915_ggtt_deballoon(ggtt, &bl_info.space[i]);
+		vgt_deballoon_space(ggtt, &bl_info.space[i]);
+}
+
+static int vgt_balloon_space(struct i915_ggtt *ggtt,
+			     struct drm_mm_node *node,
+			     unsigned long start, unsigned long end)
+{
+	struct drm_i915_private *dev_priv = ggtt->vm.i915;
+	unsigned long size = end - start;
+	int ret;
+
+	if (start >= end)
+		return -EINVAL;
+
+	drm_info(&dev_priv->drm,
+		 "balloon space: range [ 0x%lx - 0x%lx ] %lu KiB.\n",
+		 start, end, size / 1024);
+	ret = i915_gem_gtt_reserve(&ggtt->vm, NULL, node,
+				   size, start, I915_COLOR_UNEVICTABLE,
+				   0);
+	if (!ret)
+		ggtt->vm.reserved += size;
+
+	return ret;
 }
 
 /**
@@ -252,32 +292,32 @@ int intel_vgt_balloon(struct i915_ggtt *ggtt)
 
 	/* Unmappable graphic memory ballooning */
 	if (unmappable_base > ggtt->mappable_end) {
-		ret = i915_ggtt_balloon(ggtt, ggtt->mappable_end,
-					unmappable_base, &bl_info.space[2]);
+		ret = vgt_balloon_space(ggtt, &bl_info.space[2],
+					ggtt->mappable_end, unmappable_base);
 
 		if (ret)
 			goto err;
 	}
 
 	if (unmappable_end < ggtt_end) {
-		ret = i915_ggtt_balloon(ggtt, unmappable_end, ggtt_end,
-					&bl_info.space[3]);
+		ret = vgt_balloon_space(ggtt, &bl_info.space[3],
+					unmappable_end, ggtt_end);
 		if (ret)
 			goto err_upon_mappable;
 	}
 
 	/* Mappable graphic memory ballooning */
 	if (mappable_base) {
-		ret = i915_ggtt_balloon(ggtt, 0, mappable_base,
-					&bl_info.space[0]);
+		ret = vgt_balloon_space(ggtt, &bl_info.space[0],
+					0, mappable_base);
 
 		if (ret)
 			goto err_upon_unmappable;
 	}
 
 	if (mappable_end < ggtt->mappable_end) {
-		ret = i915_ggtt_balloon(ggtt, mappable_end, ggtt->mappable_end,
-					&bl_info.space[1]);
+		ret = vgt_balloon_space(ggtt, &bl_info.space[1],
+					mappable_end, ggtt->mappable_end);
 
 		if (ret)
 			goto err_below_mappable;
@@ -287,11 +327,11 @@ int intel_vgt_balloon(struct i915_ggtt *ggtt)
 	return 0;
 
 err_below_mappable:
-	i915_ggtt_deballoon(ggtt, &bl_info.space[0]);
+	vgt_deballoon_space(ggtt, &bl_info.space[0]);
 err_upon_unmappable:
-	i915_ggtt_deballoon(ggtt, &bl_info.space[3]);
+	vgt_deballoon_space(ggtt, &bl_info.space[3]);
 err_upon_mappable:
-	i915_ggtt_deballoon(ggtt, &bl_info.space[2]);
+	vgt_deballoon_space(ggtt, &bl_info.space[2]);
 err:
 	drm_err(&dev_priv->drm, "VGT balloon fail\n");
 	return ret;
-- 
2.25.1

