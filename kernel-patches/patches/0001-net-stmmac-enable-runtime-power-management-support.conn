From 7fb711aa58ba856e286b7587a9ce2cbd1c70984e Mon Sep 17 00:00:00 2001
From: Song Yoong Siang <yoong.siang.song@intel.com>
Date: Wed, 8 Sep 2021 12:46:41 +0800
Subject: [PATCH] net: stmmac: enable runtime power management support

Add basic runtime power management support such that
  1. suspend the device when the link is not present
  2. set it up after the link has been detected again

According to Documentation/power/pci.rst, the driver itself should not
call pm_runtime_allow(). Instead, it should let user space or
some platform-specific code do that. Therefore, this feature is
disabled until the user space enables it with the help of
/sys/devices/.../power/control device attribute.

Signed-off-by: Song Yoong Siang <yoong.siang.song@intel.com>
Signed-off-by: Michael Sit Wei Hong <michael.wei.hong.sit@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac-intel.c | 95 ++++++++++++++++++-
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  6 ++
 .../ethernet/stmicro/stmmac/stmmac_ethtool.c  | 19 ++++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 35 +++++++
 4 files changed, 153 insertions(+), 2 deletions(-)

Index: b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
@@ -5,6 +5,7 @@
 #include <linux/clk-provider.h>
 #include <linux/pci.h>
 #include <linux/dmi.h>
+#include <linux/pm_runtime.h>
 #include "dwmac-intel.h"
 #include "dwmac4.h"
 #include "stmmac.h"
@@ -1139,8 +1140,98 @@ static int __maybe_unused intel_eth_pci_
 	return stmmac_resume(dev);
 }
 
-static SIMPLE_DEV_PM_OPS(intel_eth_pm_ops, intel_eth_pci_suspend,
-			 intel_eth_pci_resume);
+static int __maybe_unused intel_eth_runtime_suspend(struct device *dev)
+{
+	struct pci_dev *pdev = to_pci_dev(dev);
+	struct net_device *ndev = dev_get_drvdata(&pdev->dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	struct ethtool_wolinfo wol;
+	int ret;
+
+	rtnl_lock();
+	/* Save current WoL operation */
+	phylink_ethtool_get_wol(priv->phylink, &wol);
+#ifdef CONFIG_PM
+	priv->saved_wolopts = wol.wolopts;
+#endif
+	/* Enable WoL to wake on PHY activity */
+	wol.wolopts = WAKE_PHY;
+	phylink_ethtool_set_wol(priv->phylink, &wol);
+	rtnl_unlock();
+
+	device_set_wakeup_enable(priv->device, 1);
+
+	ret = intel_eth_pci_suspend(dev);
+	if (!ret)
+		dev_info(dev, "%s: Device is runtime suspended.\n", __func__);
+
+	return ret;
+}
+
+static int __maybe_unused intel_eth_runtime_resume(struct device *dev)
+{
+	struct ethtool_wolinfo wol;
+	struct pci_dev *pdev = to_pci_dev(dev);
+	struct net_device *ndev = dev_get_drvdata(&pdev->dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+	int ret;
+
+	ret = intel_eth_pci_resume(dev);
+	if (!ret)
+		dev_info(dev, "%s: Device is runtime resumed.\n", __func__);
+
+	rtnl_lock();
+	/* Restore saved WoL operation */
+#ifdef CONFIG_PM
+	wol.wolopts = priv->saved_wolopts;
+#endif
+	phylink_ethtool_set_wol(priv->phylink, &wol);
+#ifdef CONFIG_PM
+	priv->saved_wolopts = 0;
+#endif
+	rtnl_unlock();
+
+	if (!wol.wolopts)
+		device_set_wakeup_enable(priv->device, 0);
+
+	return ret;
+}
+
+/* Runtime suspend delay set to 10000 millisecond */
+#define INTEL_RUNTIME_SUSPEND_DELAY	10000
+
+static int __maybe_unused intel_eth_runtime_idle(struct device *dev)
+{
+	struct ethtool_wolinfo wol;
+	struct pci_dev *pdev = to_pci_dev(dev);
+	struct net_device *ndev = dev_get_drvdata(&pdev->dev);
+	struct stmmac_priv *priv = netdev_priv(ndev);
+
+#ifdef CONFIG_PM
+	/* Allow runtime suspend only if link is down */
+	if (priv->phylink_up)
+		return -EBUSY;
+#endif
+
+	/* Allow runtime suspend only if PHY support wake on PHY activity */
+	rtnl_lock();
+	phylink_ethtool_get_wol(priv->phylink, &wol);
+	rtnl_unlock();
+	if (!(wol.supported & WAKE_PHY))
+		return -EBUSY;
+
+	/* Schedule the execution of delayed runtime suspend */
+	pm_schedule_suspend(dev, INTEL_RUNTIME_SUSPEND_DELAY);
+
+	/* Return non-zero value to prevent PM core from calling autosuspend */
+	return -EBUSY;
+}
+
+static const struct dev_pm_ops intel_eth_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(intel_eth_pci_suspend, intel_eth_pci_resume)
+	SET_RUNTIME_PM_OPS(intel_eth_runtime_suspend, intel_eth_runtime_resume,
+			   intel_eth_runtime_idle)
+};
 
 #define PCI_DEVICE_ID_INTEL_QUARK		0x0937
 #define PCI_DEVICE_ID_INTEL_EHL_RGMII1G		0x4b30
Index: b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -319,6 +319,12 @@ struct stmmac_priv {
 	/* XDP BPF Program */
 	unsigned long *af_xdp_zc_qps;
 	struct bpf_prog *xdp_prog;
+
+#ifdef CONFIG_PM
+	/* Runtime PM */
+	int saved_wolopts;
+	bool phylink_up;
+#endif
 };
 
 enum stmmac_state {
Index: b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
@@ -13,6 +13,7 @@
 #include <linux/interrupt.h>
 #include <linux/mii.h>
 #include <linux/phylink.h>
+#include <linux/pm_runtime.h>
 #include <linux/net_tstamp.h>
 #include <asm/io.h>
 
@@ -432,11 +433,28 @@ static void stmmac_ethtool_setmsglevel(s
 
 static int stmmac_check_if_running(struct net_device *dev)
 {
+	struct stmmac_priv *priv __maybe_unused = netdev_priv(dev);
+
 	if (!netif_running(dev))
 		return -EBUSY;
+
+	/* Increase the device's usage_count and cancel any scheduled runtime
+	 * suspend, so that race condition between runtime suspend and ethtool
+	 * operation can be avoided.
+	 */
+	pm_runtime_get_sync(priv->device);
+
 	return 0;
 }
 
+static void stmmac_ethtool_complete(struct net_device *dev)
+{
+	struct stmmac_priv *priv = netdev_priv(dev);
+
+	/* Decrease the device's usage_count after ethtool operation. */
+	pm_runtime_put(priv->device);
+}
+
 static int stmmac_ethtool_get_regs_len(struct net_device *dev)
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
@@ -1150,6 +1168,7 @@ static const struct ethtool_ops stmmac_e
 	.supported_coalesce_params = ETHTOOL_COALESCE_USECS |
 				     ETHTOOL_COALESCE_MAX_FRAMES,
 	.begin = stmmac_check_if_running,
+	.complete = stmmac_ethtool_complete,
 	.get_drvinfo = stmmac_ethtool_getdrvinfo,
 	.get_msglevel = stmmac_ethtool_getmsglevel,
 	.set_msglevel = stmmac_ethtool_setmsglevel,
Index: b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
===================================================================
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -1060,6 +1060,10 @@ static void stmmac_mac_link_down(struct
 {
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 
+#ifdef CONFIG_PM
+	priv->phylink_up = false;
+#endif
+
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	priv->eee_active = false;
 	priv->tx_lpi_enabled = false;
@@ -1068,6 +1072,11 @@ static void stmmac_mac_link_down(struct
 
 	if (priv->dma_cap.fpesel)
 		stmmac_fpe_link_state_handle(priv, false);
+
+	/* Schedule runtime suspend if the device's runtime PM status allows it
+	 * to be suspended.
+	 */
+	pm_runtime_idle(priv->device);
 }
 
 static void stmmac_mac_link_up(struct phylink_config *config,
@@ -1079,6 +1088,13 @@ static void stmmac_mac_link_up(struct ph
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 	u32 old_ctrl, ctrl;
 
+#ifdef CONFIG_PM
+	priv->phylink_up = true;
+#endif
+
+	/* Cancel any scheduled runtime suspend request */
+	pm_runtime_resume(priv->device);
+
 	old_ctrl = readl(priv->ioaddr + MAC_CTRL_REG);
 	ctrl = old_ctrl & ~priv->hw->link.speed_mask;
 
@@ -3778,6 +3794,7 @@ static int stmmac_open(struct net_device
 	netif_tx_start_all_queues(priv->dev);
 	stmmac_enable_all_dma_irq(priv);
 
+	pm_runtime_put(priv->device);
 	return 0;
 
 irq_error:
@@ -3818,6 +3835,11 @@ static int stmmac_release(struct net_dev
 	u32 chan;
 
 	netif_tx_disable(dev);
+	/* Use pm_runtime_get_sync() call paired with pm_runtime_put() call to
+	 * ensure that the device is not put into runtime suspend during the
+	 * operation.
+	 */
+	pm_runtime_get_sync(priv->device);
 
 	if (device_may_wakeup(priv->device))
 		phylink_speed_down(priv->phylink, false);
@@ -7235,6 +7257,16 @@ int stmmac_dvr_probe(struct device *devi
 	 */
 	pm_runtime_put(device);
 
+#ifdef CONFIG_PM
+	/* To support runtime PM, we need to make sure usage_count is equal to 0
+	 * when runtime_auto flag is set. Otherwise, it should be equal to 1.
+	 */
+	if (priv->device->power.runtime_auto)
+		atomic_set(&priv->device->power.usage_count, 0);
+	else
+		atomic_set(&priv->device->power.usage_count, 1);
+#endif
+
 	return ret;
 
 error_serdes_powerup:
@@ -7267,6 +7299,9 @@ int stmmac_dvr_remove(struct device *dev
 	struct net_device *ndev = dev_get_drvdata(dev);
 	struct stmmac_priv *priv = netdev_priv(ndev);
 
+	/* Increase deviceâ€™s usage_count so that runtime PM is disabled */
+	pm_runtime_get_noresume(dev);
+
 	netdev_info(priv->dev, "%s: removing driver", __func__);
 
 	pm_runtime_get_sync(dev);
