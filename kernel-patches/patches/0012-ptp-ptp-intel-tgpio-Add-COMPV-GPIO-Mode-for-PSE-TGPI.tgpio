From 17299ae5ca9df8a098ed888d5f3e0a7b97bedcd0 Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Mon, 13 Jan 2020 12:26:51 +0800
Subject: [PATCH 12/27] ptp: ptp-intel-tgpio: Add COMPV GPIO Mode for PSE TGPIO

In the COMPV GPIO Mode, instead of generating interrupts for each
input event received, each input events will increment the event
counter register only.

The event counter value will be fed as Input Event Counter to the
comparator which then be matched against the programmed COMPV value.
Interrupt will be generated when they matches.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
---
 drivers/ptp/ptp-intel-tgpio.c  | 35 +++++++++++++++++++++++++++-------
 drivers/ptp/ptp_chardev.c      |  5 ++++-
 include/uapi/linux/ptp_clock.h |  4 +++-
 3 files changed, 35 insertions(+), 9 deletions(-)

diff --git a/drivers/ptp/ptp-intel-tgpio.c b/drivers/ptp/ptp-intel-tgpio.c
index 3c21ba0a6779..15fb6571d768 100644
--- a/drivers/ptp/ptp-intel-tgpio.c
+++ b/drivers/ptp/ptp-intel-tgpio.c
@@ -90,6 +90,7 @@
 #define TGPIOCTL_OEC		BIT(12)
 #define TGPIOCTL_FIT		BIT(13)
 #define TGPIOCTL_IEC		GENMASK(15, 14)
+#define TGPIOCTL_IEC_EC	BIT(14)
 #define TGPIOCTL_ECC		BIT(16)
 #define TGPIOCTL_PSL		GENMASK(24, 17)
 #define TGPIOCTL_TS		GENMASK(29, 28)
@@ -289,19 +290,38 @@ static int intel_tgpio_config_input(struct intel_tgpio *tgpio,
 
 	offset = TGPIOCTL(index);
 	ctrl = intel_tgpio_readl(tgpio->base, offset);
-	ctrl &= ~(TGPIOCTL_TS | TGPIOCTL_EP | TGPIOCTL_DIR | TGPIOCTL_PWS);
+	ctrl &= ~(TGPIOCTL_TS | TGPIOCTL_EP | TGPIOCTL_DIR | TGPIOCTL_PWS |
+			TGPIOCTL_IEC_EC | TGPIOCTL_ICS);
 
 	if (on) {
+		int rising_cap, falling_cap;
+
 		tgpio->irq_mask |= TGPIOINT_EVENT_INTERRUPT(index);
 		ctrl |= TGPIOCTL_DIR | TGPIOCTL_TS_TMT0;
 
-		if ((extts->flags & PTP_RISING_EDGE) &&
-				(extts->flags & PTP_FALLING_EDGE))
-			ctrl |= TGPIOCTL_EP_TOGGLE_EDGE;
-		else if (extts->flags & PTP_RISING_EDGE)
+		/* To enable for Input Event Counter & Input Event Control */
+		/* TODO: temporarily using rsv0 to store the counter */
+		if ((extts->flags & PTP_EVENT_COUNTER_MODE) && extts->rsv[0]) {
+			ctrl |= TGPIOCTL_IEC_EC;
+			ctrl |= TGPIOCTL_ICS;
+
+			intel_tgpio_writel(tgpio->base, TGPIOCOMPV31_0(index),
+				extts->rsv[0]);
+			intel_tgpio_writel(tgpio->base, TGPIOCOMPV63_32(index),
+				0);
+		}
+
+		/* To enable Event Polarity for inout mode, */
+		/* default to capture both rising & failling */
+		rising_cap = extts->flags & PTP_RISING_EDGE;
+		falling_cap = extts->flags & PTP_FALLING_EDGE;
+
+		if (rising_cap && !falling_cap)
 			ctrl |= TGPIOCTL_EP_RISING_EDGE;
-		else if (extts->flags & PTP_FALLING_EDGE)
+		else if (!rising_cap && falling_cap)
 			ctrl |= TGPIOCTL_EP_FALLING_EDGE;
+		else
+			ctrl |= TGPIOCTL_EP_TOGGLE_EDGE;
 
 		/* gotta program all other bits before EN bit is set */
 		intel_tgpio_writel(tgpio->base, offset, ctrl);
@@ -327,7 +347,8 @@ static int intel_tgpio_config_output(struct intel_tgpio *tgpio,
 
 	offset = TGPIOCTL(index);
 	ctrl = intel_tgpio_readl(tgpio->base, offset);
-	ctrl &= ~(TGPIOCTL_TS | TGPIOCTL_EP | TGPIOCTL_DIR | TGPIOCTL_PWS);
+	ctrl &= ~(TGPIOCTL_TS | TGPIOCTL_EP | TGPIOCTL_DIR | TGPIOCTL_PWS |
+				TGPIOCTL_IEC_EC | TGPIOCTL_ICS);
 
 	if (on) {
 		struct ptp_clock_time *period = &perout->period;
diff --git a/drivers/ptp/ptp_chardev.c b/drivers/ptp/ptp_chardev.c
index 0d9393f0ad88..c46f1a941117 100644
--- a/drivers/ptp/ptp_chardev.c
+++ b/drivers/ptp/ptp_chardev.c
@@ -191,7 +191,10 @@ long ptp_ioctl(struct posix_clock *pc, unsigned int cmd, unsigned long arg)
 			}
 		} else if (cmd == PTP_EXTTS_REQUEST) {
 			req.extts.flags &= PTP_EXTTS_V1_VALID_FLAGS;
-			zero_rsv_field(req.extts.rsv);
+			/* zero_rsv_field(req.extts.rsv); */
+			/* TOFIX: Temporarily uses RESERVED field to */
+			/* pass event count value */
+			req.extts.rsv[1] = 0;
 		}
 		if (req.extts.index >= ops->n_ext_ts) {
 			err = -EINVAL;
diff --git a/include/uapi/linux/ptp_clock.h b/include/uapi/linux/ptp_clock.h
index aa96bce8d3c9..efec2e962a30 100644
--- a/include/uapi/linux/ptp_clock.h
+++ b/include/uapi/linux/ptp_clock.h
@@ -32,6 +32,7 @@
 #define PTP_RISING_EDGE    (1<<1)
 #define PTP_FALLING_EDGE   (1<<2)
 #define PTP_STRICT_FLAGS   (1<<3)
+#define PTP_EVENT_COUNTER_MODE	(1<<4)
 #define PTP_EXTTS_EDGES    (PTP_RISING_EDGE | PTP_FALLING_EDGE)
 
 /*
@@ -54,7 +55,8 @@
  */
 #define PTP_EXTTS_V1_VALID_FLAGS	(PTP_ENABLE_FEATURE |	\
 					 PTP_RISING_EDGE |	\
-					 PTP_FALLING_EDGE)
+					 PTP_FALLING_EDGE |	\
+					 PTP_EVENT_COUNTER_MODE)
 
 /*
  * Bits of the ptp_perout_request.flags field:
-- 
2.25.1

