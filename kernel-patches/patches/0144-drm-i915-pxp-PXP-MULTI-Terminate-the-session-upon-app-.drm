From d7db498a34e2bc949171616e341270dcc3b1e97d Mon Sep 17 00:00:00 2001
From: "Huang, Sean Z" <sean.z.huang@intel.com>
Date: Wed, 9 Dec 2020 22:45:02 -0800
Subject: [PATCH 144/184] drm/i915/pxp:[PXP-MULTI] Terminate the session upon
 app crash

PXP should terminate the hardware session and cleanup the software
state gracefully when the application has established the
protection session, but doesn't close the session correctly due to
some cases like application crash.

Signed-off-by: Huang, Sean Z <sean.z.huang@intel.com>
Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
Reviewed by: Alan Previn <alan.previn.teres.alexis@intel.com>
Signed-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>
---
 drivers/gpu/drm/i915/i915_driver.c           |  1 +
 drivers/gpu/drm/i915/pxp/intel_pxp.c         | 15 ++++++++++++++
 drivers/gpu/drm/i915/pxp/intel_pxp.h         |  1 +
 drivers/gpu/drm/i915/pxp/intel_pxp_session.c | 21 ++++++++++++++++++++
 drivers/gpu/drm/i915/pxp/intel_pxp_session.h |  2 ++
 5 files changed, 40 insertions(+)

diff --git a/drivers/gpu/drm/i915/i915_driver.c b/drivers/gpu/drm/i915/i915_driver.c
index 1aa4f7a5c5fa..5c7703b2e5fa 100644
--- a/drivers/gpu/drm/i915/i915_driver.c
+++ b/drivers/gpu/drm/i915/i915_driver.c
@@ -953,6 +953,7 @@ static void i915_driver_postclose(struct drm_device *dev, struct drm_file *file)
 
 	/* Catch up with all the deferred frees from "this" client */
 	i915_gem_flush_free_objects(to_i915(dev));
+	intel_pxp_close(to_i915(dev)->pxp, file);
 }
 
 static void intel_suspend_encoders(struct drm_i915_private *dev_priv)
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp.c b/drivers/gpu/drm/i915/pxp/intel_pxp.c
index 8cd368de93b8..e9fe3a0e0c6c 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp.c
@@ -689,7 +689,22 @@ int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmf
 	return ret;
 }
 
+void intel_pxp_close(struct intel_pxp *pxp, struct drm_file *drmfile)
+{
+	if (!intel_pxp_is_enabled(pxp) || !drmfile)
+		return;
+
+	mutex_lock(&pxp->session_mutex);
+	intel_pxp_file_close(pxp, drmfile);
+	mutex_unlock(&pxp->session_mutex);
+}
+
 #else
+
+void intel_pxp_close(struct intel_pxp *pxp, struct drm_file *drmfile)
+{
+}
+
 int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmfile)
 {
 	return -ENODEV;
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp.h b/drivers/gpu/drm/i915/pxp/intel_pxp.h
index a182d4a2961a..12d4f90f75e5 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp.h
@@ -40,5 +40,6 @@ int intel_pxp_key_check(struct intel_pxp *pxp,
 
 void intel_pxp_invalidate(struct intel_pxp *pxp);
 int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmfile);
+void intel_pxp_close(struct intel_pxp *pxp, struct drm_file *drmfile);
 
 #endif /* __INTEL_PXP_H__ */
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
index 872131a3393c..f2e3de367758 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
@@ -302,6 +302,27 @@ int intel_pxp_sm_ioctl_mark_session_in_play(struct intel_pxp *pxp,
 	return 0;
 }
 
+void intel_pxp_file_close(struct intel_pxp *pxp, struct drm_file *drmfile)
+{
+	int idx, ret;
+
+	lockdep_assert_held(&pxp->session_mutex);
+
+	for_each_set_bit(idx, pxp->reserved_sessions, INTEL_PXP_MAX_HWDRM_SESSIONS) {
+		if (pxp->hwdrm_sessions[idx]->drmfile == drmfile) {
+			ret = intel_pxp_terminate_session(pxp, idx);
+			if (ret)
+				drm_err(&pxp->ctrl_gt->i915->drm,
+					"failed to correctly close PXP session %u\n",
+					idx);
+
+			free_session_entry(pxp, idx);
+		}
+	}
+
+	return;
+}
+
 static int pxp_create_arb_session(struct intel_pxp *pxp)
 {
 	struct intel_gt *gt = pxp->ctrl_gt;
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.h b/drivers/gpu/drm/i915/pxp/intel_pxp_session.h
index 9d34094864c4..fa91b7103842 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.h
@@ -30,6 +30,8 @@ int intel_pxp_sm_ioctl_terminate_session(struct intel_pxp *pxp,
 int intel_pxp_sm_ioctl_query_pxp_tag(struct intel_pxp *pxp,
 				     u32 *session_is_alive, u32 *pxp_tag);
 
+void intel_pxp_file_close(struct intel_pxp *pxp, struct drm_file *drmfile);
+
 bool intel_pxp_session_is_in_play(struct intel_pxp *pxp, u32 id);
 
 #else
-- 
2.25.1

