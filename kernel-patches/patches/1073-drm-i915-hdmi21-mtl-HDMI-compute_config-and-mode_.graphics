From cd900ee91ffe1bc167a9dcae1fc5bcda9e4849b1 Mon Sep 17 00:00:00 2001
From: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date: Sat, 2 Apr 2022 12:22:20 +0530
Subject: [PATCH 1073/1096] drm/i915/hdmi21/mtl: HDMI compute_config and
 mode_valid big joiner changes

Added basic required changes for bigjoiner enabling to
intel_hdmi_compute_config and intel_hdmi_mode_valid
functions.

Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Signed-off-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Reviewed-by: Uma Shankar <uma.shankar@intel.com>
---
 drivers/gpu/drm/i915/display/intel_hdmi.c | 35 +++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/display/intel_hdmi.c b/drivers/gpu/drm/i915/display/intel_hdmi.c
index 5f7c786ec0aa..99c6e58f5131 100644
--- a/drivers/gpu/drm/i915/display/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/display/intel_hdmi.c
@@ -2214,6 +2214,18 @@ intel_hdmi_src_dsc_supported(struct drm_i915_private *dev_priv)
 	return DISPLAY_VER(dev_priv) >= 14;
 }
 
+static bool
+intel_hdmi_can_bigjoiner(struct intel_hdmi *intel_hdmi)
+{
+	struct intel_digital_port *intel_dig_port = hdmi_to_dig_port(intel_hdmi);
+	struct intel_encoder *encoder = &intel_dig_port->base;
+	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
+
+	return DISPLAY_VER(dev_priv) >= 12 ||
+		(DISPLAY_VER(dev_priv) == 11 &&
+		 encoder->port != PORT_A);
+}
+
 static enum drm_mode_status
 intel_hdmi_mode_valid(struct drm_connector *connector,
 		      struct drm_display_mode *mode)
@@ -2224,6 +2236,7 @@ intel_hdmi_mode_valid(struct drm_connector *connector,
 	int clock = mode->clock;
 	int max_dotclk = to_i915(connector->dev)->max_dotclk_freq;
 	bool has_hdmi_sink = intel_has_hdmi_sink(hdmi, connector->state);
+	bool bigjoiner = false;
 	bool ycbcr_420_only, dsc;
 
 	dsc = intel_hdmi_src_dsc_supported(dev_priv) &&
@@ -2232,7 +2245,16 @@ intel_hdmi_mode_valid(struct drm_connector *connector,
 	if ((mode->flags & DRM_MODE_FLAG_3D_MASK) == DRM_MODE_FLAG_3D_FRAME_PACKING)
 		clock *= 2;
 
-	if (clock > max_dotclk)
+	if ((clock > max_dotclk || mode->hdisplay > 5120) &&
+	    intel_hdmi_can_bigjoiner(hdmi)) {
+		bigjoiner = true;
+		max_dotclk *= 2;
+	}
+
+	if (clock > max_dotclk && !bigjoiner)
+		return MODE_CLOCK_HIGH;
+
+	if (DISPLAY_VER(dev_priv) < 13 && bigjoiner && !dsc)
 		return MODE_CLOCK_HIGH;
 
 	if (mode->flags & DRM_MODE_FLAG_DBLCLK) {
@@ -2271,7 +2293,7 @@ intel_hdmi_mode_valid(struct drm_connector *connector,
 	if (status != MODE_OK)
 		return status;
 
-	return intel_mode_valid_max_plane_size(dev_priv, mode, false);
+	return intel_mode_valid_max_plane_size(dev_priv, mode, bigjoiner);
 }
 
 bool intel_hdmi_bpc_possible(const struct intel_crtc_state *crtc_state,
@@ -2960,6 +2982,7 @@ int intel_hdmi_compute_config(struct intel_encoder *encoder,
 	struct drm_display_mode *adjusted_mode = &pipe_config->hw.adjusted_mode;
 	struct drm_connector *connector = conn_state->connector;
 	struct drm_scdc *scdc = &connector->display_info.hdmi.scdc;
+	struct intel_crtc *crtc = to_intel_crtc(pipe_config->uapi.crtc);
 	int ret;
 
 	if (adjusted_mode->flags & DRM_MODE_FLAG_DBLSCAN)
@@ -2984,6 +3007,11 @@ int intel_hdmi_compute_config(struct intel_encoder *encoder,
 		intel_hdmi_has_audio(encoder, pipe_config, conn_state) &&
 		intel_audio_compute_config(encoder, pipe_config, conn_state);
 
+	if ((adjusted_mode->crtc_clock > dev_priv->max_dotclk_freq ||
+	     adjusted_mode->crtc_hdisplay > 5120) &&
+	     intel_hdmi_can_bigjoiner(intel_hdmi))
+		pipe_config->bigjoiner_pipes = GENMASK(crtc->pipe + 1, crtc->pipe);
+
 	if (intel_bios_hdmi_max_frl_rate(encoder) &&
 	    intel_hdmi->has_sink_hdmi_21 &&
 	    intel_hdmi_compute_output_format(encoder, pipe_config, conn_state, false, true) == 0) {
@@ -2995,6 +3023,9 @@ int intel_hdmi_compute_config(struct intel_encoder *encoder,
 		pipe_config->frl.enable = true;
 		pipe_config->lane_count = pipe_config->frl.required_lanes;
 	} else {
+		/* Modes that need Bigjoiner cannot work without FRL */
+		if (pipe_config->bigjoiner_pipes)
+			return -EINVAL;
 		/*
 		 * Try to respect downstream TMDS clock limits first, if
 		 * that fails assume the user might know something we don't.
-- 
2.25.1

