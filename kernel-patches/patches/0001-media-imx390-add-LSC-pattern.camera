From 3f88f1014b20b4b99c82f05233cd92453c0bfec4 Mon Sep 17 00:00:00 2001
From: zouxiaoh <xiaohong.zou@intel.com>
Date: Tue, 26 Oct 2021 09:37:56 +0800
Subject: [PATCH 1/8] media: imx390: add LSC pattern

Change Description:
add len shading correction pattern.

Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/media/i2c/imx390.c | 493 +++++++++++++++++++++++++++++++++++++
 1 file changed, 493 insertions(+)

diff --git a/drivers/media/i2c/imx390.c b/drivers/media/i2c/imx390.c
index 4b041ebfba6b..4f9d6930cbef 100644
--- a/drivers/media/i2c/imx390.c
+++ b/drivers/media/i2c/imx390.c
@@ -264,6 +264,7 @@ struct imx390 {
 	struct v4l2_ctrl *dummy_ag_l;
 	struct v4l2_ctrl *dummy_ag_s;
 	struct v4l2_ctrl *dummy_ag_vs;
+	struct v4l2_ctrl *lsc_pattern;
 
 	/* Current mode */
 	const struct imx390_mode *cur_mode;
@@ -284,6 +285,466 @@ struct imx390 {
 
 static int imx390_group_hold_enable(struct imx390 *imx390, s32 val);
 
+enum {
+	LSC_PATTERN_DISABLED = 0,
+	LSC_PATTERN_UNITY,
+	LSC_PATTERN_TABLE,
+};
+
+static const char * const lsc_qmenu[] = {
+	"Disabled",
+	"all 0x80",
+	"table",
+};
+
+static const struct imx390_reg imx390_lsc_pattern_unity[] = {
+	{0x4000, 0x80},
+	{0x4001, 0x80},
+	{0x4002, 0x80},
+	{0x4003, 0x80},
+	{0x4004, 0x80},
+	{0x4005, 0x80},
+	{0x4006, 0x80},
+	{0x4007, 0x80},
+	{0x4008, 0x80},
+	{0x4009, 0x80},
+	{0x400A, 0x80},
+	{0x400B, 0x80},
+	{0x400C, 0x80},
+	{0x400D, 0x80},
+	{0x400E, 0x80},
+	{0x400F, 0x80},
+	{0x4010, 0x80},
+	{0x4011, 0x80},
+	{0x4012, 0x80},
+	{0x4013, 0x80},
+	{0x4014, 0x80},
+	{0x4015, 0x80},
+	{0x4016, 0x80},
+	{0x4017, 0x80},
+	{0x4018, 0x80},
+	{0x4019, 0x80},
+	{0x401A, 0x80},
+	{0x401B, 0x80},
+	{0x401C, 0x80},
+	{0x401D, 0x80},
+	{0x401E, 0x80},
+	{0x401F, 0x80},
+	{0x4020, 0x80},
+	{0x4021, 0x80},
+	{0x4022, 0x80},
+	{0x4023, 0x80},
+	{0x4024, 0x80},
+	{0x4025, 0x80},
+	{0x4026, 0x80},
+	{0x4027, 0x80},
+	{0x4028, 0x80},
+	{0x4029, 0x80},
+	{0x402A, 0x80},
+	{0x402B, 0x80},
+	{0x402C, 0x80},
+	{0x402D, 0x80},
+	{0x402E, 0x80},
+	{0x402F, 0x80},
+	{0x4030, 0x80},
+	{0x4031, 0x80},
+	{0x4032, 0x80},
+	{0x4033, 0x80},
+	{0x4034, 0x80},
+	{0x4035, 0x80},
+	{0x4036, 0x80},
+	{0x4037, 0x80},
+	{0x4038, 0x80},
+	{0x4039, 0x80},
+	{0x403A, 0x80},
+	{0x403B, 0x80},
+	{0x403C, 0x80},
+	{0x403D, 0x80},
+	{0x403E, 0x80},
+	{0x403F, 0x80},
+	{0x4040, 0x80},
+	{0x4041, 0x80},
+	{0x4042, 0x80},
+	{0x4043, 0x80},
+	{0x4044, 0x80},
+	{0x4045, 0x80},
+	{0x4046, 0x80},
+	{0x4047, 0x80},
+	{0x4048, 0x80},
+	{0x4049, 0x80},
+	{0x404A, 0x80},
+	{0x404B, 0x80},
+	{0x404C, 0x80},
+	{0x404D, 0x80},
+	{0x404E, 0x80},
+	{0x404F, 0x80},
+	{0x4050, 0x80},
+	{0x4051, 0x80},
+	{0x4052, 0x80},
+	{0x4053, 0x80},
+	{0x4054, 0x80},
+	{0x4055, 0x80},
+	{0x4056, 0x80},
+	{0x4057, 0x80},
+	{0x4058, 0x80},
+	{0x4059, 0x80},
+	{0x405A, 0x80},
+	{0x405B, 0x80},
+	{0x405C, 0x80},
+	{0x405D, 0x80},
+	{0x405E, 0x80},
+	{0x405F, 0x80},
+	{0x4060, 0x80},
+	{0x4061, 0x80},
+	{0x4062, 0x80},
+	{0x4063, 0x80},
+	{0x4064, 0x80},
+	{0x4065, 0x80},
+	{0x4066, 0x80},
+	{0x4067, 0x80},
+	{0x4068, 0x80},
+	{0x4069, 0x80},
+	{0x406A, 0x80},
+	{0x406B, 0x80},
+	{0x406C, 0x80},
+	{0x406D, 0x80},
+	{0x406E, 0x80},
+	{0x406F, 0x80},
+	{0x4070, 0x80},
+	{0x4071, 0x80},
+	{0x4072, 0x80},
+	{0x4073, 0x80},
+	{0x4074, 0x80},
+	{0x4075, 0x80},
+	{0x4076, 0x80},
+	{0x4077, 0x80},
+	{0x4078, 0x80},
+	{0x4079, 0x80},
+	{0x407A, 0x80},
+	{0x407B, 0x80},
+	{0x407C, 0x80},
+	{0x407D, 0x80},
+	{0x407E, 0x80},
+	{0x407F, 0x80},
+	{0x4080, 0x80},
+	{0x4081, 0x80},
+	{0x4082, 0x80},
+	{0x4083, 0x80},
+	{0x4084, 0x80},
+	{0x4085, 0x80},
+	{0x4086, 0x80},
+	{0x4087, 0x80},
+	{0x4088, 0x80},
+	{0x4089, 0x80},
+	{0x408A, 0x80},
+	{0x408B, 0x80},
+	{0x408C, 0x80},
+	{0x408D, 0x80},
+	{0x408E, 0x80},
+	{0x408F, 0x80},
+	{0x4090, 0x80},
+	{0x4091, 0x80},
+	{0x4092, 0x80},
+	{0x4093, 0x80},
+	{0x4094, 0x80},
+	{0x4095, 0x80},
+	{0x4096, 0x80},
+	{0x4097, 0x80},
+	{0x4098, 0x80},
+	{0x4099, 0x80},
+	{0x409A, 0x80},
+	{0x409B, 0x80},
+	{0x409C, 0x80},
+	{0x409D, 0x80},
+	{0x409E, 0x80},
+	{0x409F, 0x80},
+	{0x40A0, 0x80},
+	{0x40A1, 0x80},
+	{0x40A2, 0x80},
+	{0x40A3, 0x80},
+	{0x40A4, 0x80},
+	{0x40A5, 0x80},
+	{0x40A6, 0x80},
+	{0x40A7, 0x80},
+	{0x40A8, 0x80},
+	{0x40A9, 0x80},
+	{0x40AA, 0x80},
+	{0x40AB, 0x80},
+	{0x40AC, 0x80},
+	{0x40AD, 0x80},
+	{0x40AE, 0x80},
+	{0x40AF, 0x80},
+	{0x40B0, 0x80},
+	{0x40B1, 0x80},
+	{0x40B2, 0x80},
+	{0x40B3, 0x80},
+	{0x40B4, 0x80},
+	{0x40B5, 0x80},
+	{0x40B6, 0x80},
+	{0x40B7, 0x80},
+	{0x40B8, 0x80},
+	{0x40B9, 0x80},
+	{0x40BA, 0x80},
+	{0x40BB, 0x80},
+	{0x40BC, 0x80},
+	{0x40BD, 0x80},
+	{0x40BE, 0x80},
+	{0x40BF, 0x80},
+	{0x40C0, 0x80},
+	{0x40C1, 0x80},
+	{0x40C2, 0x80},
+	{0x40C3, 0x80},
+	{0x40C4, 0x80},
+	{0x40C5, 0x80},
+	{0x40C6, 0x80},
+	{0x40C7, 0x80},
+	{0x40C8, 0x80},
+	{0x40C9, 0x80},
+	{0x40CA, 0x80},
+	{0x40CB, 0x80},
+	{0x40CC, 0x80},
+	{0x40CD, 0x80},
+	{0x40CE, 0x80},
+	{0x40CF, 0x80},
+	{0x40D0, 0x80},
+	{0x40D1, 0x80},
+	{0x40D2, 0x80},
+	{0x40D3, 0x80},
+	{0x40D4, 0x80},
+	{0x40D5, 0x80},
+	{0x40D6, 0x80},
+	{0x40D7, 0x80},
+};
+
+static const struct imx390_reg_list lsc_unity_list = {
+	.num_of_regs = ARRAY_SIZE(imx390_lsc_pattern_unity),
+	.regs = imx390_lsc_pattern_unity,
+};
+
+static const struct imx390_reg imx390_lsc_pattern_vendor_def[] = {
+	{0x4000, 0xD0},
+	{0x4001, 0xC8},
+	{0x4002, 0xC8},
+	{0x4003, 0xC6},
+	{0x4004, 0xBA},
+	{0x4005, 0xB5},
+	{0x4006, 0xB5},
+	{0x4007, 0xB4},
+	{0x4008, 0xAA},
+	{0x4009, 0xA7},
+	{0x400A, 0xA7},
+	{0x400B, 0xA7},
+	{0x400C, 0xA1},
+	{0x400D, 0x9F},
+	{0x400E, 0x9F},
+	{0x400F, 0x9F},
+	{0x4010, 0x9C},
+	{0x4011, 0x9B},
+	{0x4012, 0x9B},
+	{0x4013, 0x9B},
+	{0x4014, 0x9F},
+	{0x4015, 0x9E},
+	{0x4016, 0x9D},
+	{0x4017, 0x9E},
+	{0x4018, 0xA7},
+	{0x4019, 0xA4},
+	{0x401A, 0xA4},
+	{0x401B, 0xA4},
+	{0x401C, 0xB5},
+	{0x401D, 0xB0},
+	{0x401E, 0xB0},
+	{0x401F, 0xB0},
+	{0x4020, 0xC9},
+	{0x4021, 0xC1},
+	{0x4022, 0xC1},
+	{0x4023, 0xC0},
+	{0x4024, 0xC3},
+	{0x4025, 0xBB},
+	{0x4026, 0xBC},
+	{0x4027, 0xBA},
+	{0x4028, 0xA5},
+	{0x4029, 0xA1},
+	{0x402A, 0xA1},
+	{0x402B, 0xA0},
+	{0x402C, 0x99},
+	{0x402D, 0x97},
+	{0x402E, 0x97},
+	{0x402F, 0x96},
+	{0x4030, 0x8F},
+	{0x4031, 0x8E},
+	{0x4032, 0x8E},
+	{0x4033, 0x8E},
+	{0x4034, 0x8A},
+	{0x4035, 0x8A},
+	{0x4036, 0x8A},
+	{0x4037, 0x8A},
+	{0x4038, 0x8D},
+	{0x4039, 0x8D},
+	{0x403A, 0x8D},
+	{0x403B, 0x8D},
+	{0x403C, 0x96},
+	{0x403D, 0x94},
+	{0x403E, 0x94},
+	{0x403F, 0x94},
+	{0x4040, 0xA2},
+	{0x4041, 0x9E},
+	{0x4042, 0x9E},
+	{0x4043, 0x9D},
+	{0x4044, 0xBC},
+	{0x4045, 0xB5},
+	{0x4046, 0xB5},
+	{0x4047, 0xB4},
+	{0x4048, 0xBC},
+	{0x4049, 0xB5},
+	{0x404A, 0xB5},
+	{0x404B, 0xB3},
+	{0x404C, 0xA3},
+	{0x404D, 0x9F},
+	{0x404E, 0x9F},
+	{0x404F, 0x9E},
+	{0x4050, 0x95},
+	{0x4051, 0x93},
+	{0x4052, 0x93},
+	{0x4053, 0x93},
+	{0x4054, 0x89},
+	{0x4055, 0x88},
+	{0x4056, 0x88},
+	{0x4057, 0x88},
+	{0x4058, 0x81},
+	{0x4059, 0x81},
+	{0x405A, 0x81},
+	{0x405B, 0x81},
+	{0x405C, 0x86},
+	{0x405D, 0x86},
+	{0x405E, 0x86},
+	{0x405F, 0x86},
+	{0x4060, 0x92},
+	{0x4061, 0x90},
+	{0x4062, 0x90},
+	{0x4063, 0x90},
+	{0x4064, 0x9E},
+	{0x4065, 0x9B},
+	{0x4066, 0x9B},
+	{0x4067, 0x9A},
+	{0x4068, 0xB5},
+	{0x4069, 0xAE},
+	{0x406A, 0xAE},
+	{0x406B, 0xAE},
+	{0x406C, 0xBE},
+	{0x406D, 0xB6},
+	{0x406E, 0xB7},
+	{0x406F, 0xB5},
+	{0x4070, 0xA4},
+	{0x4071, 0xA0},
+	{0x4072, 0xA0},
+	{0x4073, 0x9F},
+	{0x4074, 0x96},
+	{0x4075, 0x94},
+	{0x4076, 0x94},
+	{0x4077, 0x94},
+	{0x4078, 0x8A},
+	{0x4079, 0x8A},
+	{0x407A, 0x8A},
+	{0x407B, 0x8A},
+	{0x407C, 0x83},
+	{0x407D, 0x83},
+	{0x407E, 0x83},
+	{0x407F, 0x83},
+	{0x4080, 0x88},
+	{0x4081, 0x87},
+	{0x4082, 0x87},
+	{0x4083, 0x88},
+	{0x4084, 0x93},
+	{0x4085, 0x91},
+	{0x4086, 0x91},
+	{0x4087, 0x91},
+	{0x4088, 0xA0},
+	{0x4089, 0x9C},
+	{0x408A, 0x9C},
+	{0x408B, 0x9C},
+	{0x408C, 0xB6},
+	{0x408D, 0xAF},
+	{0x408E, 0xAF},
+	{0x408F, 0xAF},
+	{0x4090, 0xCA},
+	{0x4091, 0xC1},
+	{0x4092, 0xC1},
+	{0x4093, 0xBF},
+	{0x4094, 0xAB},
+	{0x4095, 0xA5},
+	{0x4096, 0xA5},
+	{0x4097, 0xA4},
+	{0x4098, 0x9E},
+	{0x4099, 0x9A},
+	{0x409A, 0x9A},
+	{0x409B, 0x9A},
+	{0x409C, 0x94},
+	{0x409D, 0x92},
+	{0x409E, 0x92},
+	{0x409F, 0x92},
+	{0x40A0, 0x8F},
+	{0x40A1, 0x8E},
+	{0x40A2, 0x8E},
+	{0x40A3, 0x8E},
+	{0x40A4, 0x92},
+	{0x40A5, 0x90},
+	{0x40A6, 0x90},
+	{0x40A7, 0x90},
+	{0x40A8, 0x9A},
+	{0x40A9, 0x97},
+	{0x40AA, 0x97},
+	{0x40AB, 0x97},
+	{0x40AC, 0xA6},
+	{0x40AD, 0xA0},
+	{0x40AE, 0xA0},
+	{0x40AF, 0xA0},
+	{0x40B0, 0xC1},
+	{0x40B1, 0xB9},
+	{0x40B2, 0xB9},
+	{0x40B3, 0xB8},
+	{0x40B4, 0xDD},
+	{0x40B5, 0xD2},
+	{0x40B6, 0xD2},
+	{0x40B7, 0xCF},
+	{0x40B8, 0xC6},
+	{0x40B9, 0xBF},
+	{0x40BA, 0xBF},
+	{0x40BB, 0xBD},
+	{0x40BC, 0xB5},
+	{0x40BD, 0xB0},
+	{0x40BE, 0xB0},
+	{0x40BF, 0xAF},
+	{0x40C0, 0xAB},
+	{0x40C1, 0xA8},
+	{0x40C2, 0xA8},
+	{0x40C3, 0xA7},
+	{0x40C4, 0xA7},
+	{0x40C5, 0xA3},
+	{0x40C6, 0xA3},
+	{0x40C7, 0xA3},
+	{0x40C8, 0xA9},
+	{0x40C9, 0xA6},
+	{0x40CA, 0xA6},
+	{0x40CB, 0xA6},
+	{0x40CC, 0xB0},
+	{0x40CD, 0xAB},
+	{0x40CE, 0xAB},
+	{0x40CF, 0xAB},
+	{0x40D0, 0xBF},
+	{0x40D1, 0xB7},
+	{0x40D2, 0xB7},
+	{0x40D3, 0xB7},
+	{0x40D4, 0xD2},
+	{0x40D5, 0xC8},
+	{0x40D6, 0xC7},
+	{0x40D7, 0xC7},
+};
+
+static const struct imx390_reg_list lsc_vendor_def_list = {
+	.num_of_regs = ARRAY_SIZE(imx390_lsc_pattern_vendor_def),
+	.regs = imx390_lsc_pattern_vendor_def,
+};
+
 static const s64 link_freq_menu_items[] = {
 	IMX390_LINK_FREQ_360MHZ,
 	IMX390_LINK_FREQ_300MHZ,
@@ -586,6 +1047,30 @@ static int imx390_white_balance_set(struct imx390 *self)
 	return 0;
 }
 
+/*
+ * imx390_set_lsc_pattern
+ * len shading correction pattern
+ */
+static int imx390_set_lsc_pattern(struct imx390 *self, int val)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&self->sd);
+	int ret = 0;
+
+	if (val == LSC_PATTERN_UNITY)
+		ret = imx390_write_reg_list(self, &lsc_unity_list);
+
+	if (val == LSC_PATTERN_TABLE)
+		ret = imx390_write_reg_list(self, &lsc_vendor_def_list);
+
+	if (!ret)
+		dev_dbg(&client->dev,
+			"%s : LSC PATTERN control success\n", __func__);
+	else
+		dev_err(&client->dev, "%s ret = %d\n", __func__, ret);
+
+	return ret;
+}
+
 static int imx390_set_ctrl(struct v4l2_ctrl *ctrl)
 {
 	struct imx390 *imx390 = container_of(ctrl->handler,
@@ -624,6 +1109,9 @@ static int imx390_set_ctrl(struct v4l2_ctrl *ctrl)
 	case V4L2_CID_BLUE_BALANCE:
 		ret = imx390_white_balance_set(imx390);
 		break;
+	case V4L2_CID_TEST_PATTERN:
+		ret = imx390_set_lsc_pattern(imx390, ctrl->val);
+		break;
 	default:
 		ret = -EINVAL;
 		break;
@@ -764,6 +1252,11 @@ static int imx390_init_controls(struct imx390 *imx390)
 	cfg.name = "IMX390_CID_ANALOG_GAIN_VS";
 	imx390->dummy_ag_vs = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
 
+	imx390->lsc_pattern = v4l2_ctrl_new_std_menu_items(
+		ctrl_hdlr, &imx390_ctrl_ops,
+		V4L2_CID_TEST_PATTERN,
+		ARRAY_SIZE(lsc_qmenu) - 1, 0, 0, lsc_qmenu);
+
 	if (ctrl_hdlr->error)
 		return ctrl_hdlr->error;
 
-- 
2.25.1

