From fb747b5c957573a326bc1b50a94395bb1f7c3e36 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Tue, 19 Jul 2016 00:08:05 +0300
Subject: [PATCH 116/128] char: rpmb: Document Replay Protected Memory Block
 (RPMB) subsystem

Add rpmb documentatin in sphinx format.

V7: new in the series
V8: Rebase for v4.10 fix conf.py
V9: 1. Rebase for v4.17
    2. Add SPDX intentifiers.
    3. Move under driver-api
    4. Drop req_cmd()
V10: Update docs.
V11: index.rst update

Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
---
 Documentation/driver-api/index.rst            |   1 +
 Documentation/driver-api/rpmb/index.rst       |  18 +++
 .../driver-api/rpmb/introduction.rst          | 125 ++++++++++++++++++
 Documentation/driver-api/rpmb/rpmb-tool.rst   |  19 +++
 .../driver-api/rpmb/simulation-device.rst     |  21 +++
 MAINTAINERS                                   |   1 +
 6 files changed, 185 insertions(+)
 create mode 100644 Documentation/driver-api/rpmb/index.rst
 create mode 100644 Documentation/driver-api/rpmb/introduction.rst
 create mode 100644 Documentation/driver-api/rpmb/rpmb-tool.rst
 create mode 100644 Documentation/driver-api/rpmb/simulation-device.rst

diff --git a/Documentation/driver-api/index.rst b/Documentation/driver-api/index.rst
index f357f3eb400c..2efafcc424ed 100644
--- a/Documentation/driver-api/index.rst
+++ b/Documentation/driver-api/index.rst
@@ -104,6 +104,7 @@ available subsections can be seen below.
    xilinx/index
    xillybus
    zorro
+   rpmb/index
 
 .. only::  subproject and html
 
diff --git a/Documentation/driver-api/rpmb/index.rst b/Documentation/driver-api/rpmb/index.rst
new file mode 100644
index 000000000000..15ebd67dde0f
--- /dev/null
+++ b/Documentation/driver-api/rpmb/index.rst
@@ -0,0 +1,18 @@
+.. SPDX-License-Identifier: GPL-2.0
+
+==============================================
+Replay Protected Memory Block (RPMB) subsystem
+==============================================
+
+.. toctree::
+
+   introduction
+   simulation-device.rst
+   rpmb-tool.rst
+
+.. only::  subproject
+
+   Indices
+   =======
+
+   * :ref:`genindex`
diff --git a/Documentation/driver-api/rpmb/introduction.rst b/Documentation/driver-api/rpmb/introduction.rst
new file mode 100644
index 000000000000..fbd64c57c235
--- /dev/null
+++ b/Documentation/driver-api/rpmb/introduction.rst
@@ -0,0 +1,125 @@
+.. SPDX-License-Identifier: GPL-2.0
+
+=============
+Introduction:
+=============
+
+Some storage technologies such is EMMC, UFS, and NVMe support RPMB
+hardware partition with common protocol and frame layout.
+The RPMB partition `cannot` be accessed via standard block layer,
+but by a set of specific commands:
+
+WRITE, READ, GET_WRITE_COUNTER, and PROGRAM_KEY.
+
+The commands and the data are embedded within :c:type:`rpmb_frame <rpmb_frame>`.
+
+An RPMB partition provides authenticated and replay protected access,
+hence it is suitable as a secure storage.
+
+In-kernel API
+-------------
+The RPMB layer aims to provide in-kernel API for Trusted Execution
+Environment (TEE) devices that are capable to securely compute the block
+frame signature. In case a TEE device wish to store a replay protected
+data, it creates an RPMB frame with requested data and computes HMAC of
+the frame, then it requests the storage device via RPMB layer to store
+the data.
+
+The layer provides APIs, for :c:func:`rpmb_cmd_seq()` for issuing sequence
+of raw RPMB protocol frames, which is close to the functionality provided
+by emmc multi ioctl interface.
+
+.. c:function:: int rpmb_cmd_seq(struct rpmb_dev *rdev, struct rpmb_cmd *cmds, u32 ncmds);
+
+In addition the layer provides API for :c:func:`rpmb_get_capacity()` that returns
+the capacity of the rbmp device in units of 128K
+
+.. c:function:: int rpmb_get_capacity(struct rpmb_dev *rdev)
+
+
+A TEE driver can claim the RPMB interface, for example, via
+:c:func:`class_interface_register`:
+
+.. code-block:: c
+
+        struct class_interface tee_rpmb_intf = {
+                .class      = &rpmb_class;
+                .add_dev    = rpmb_add_device;
+                .remove_dev = rpmb_remove_device;
+        }
+        class_interface_register(&tee_rpmb_intf);
+
+
+RPMB device registration
+----------------------------
+
+A storage device registers its RPMB hardware (eMMC or NVMe) partition
+or RPMB W-LUN (UFS) with the RPMB layer :c:func:`rpmb_dev_register`
+providing an implementation for :c:func:`rpmb_seq_cmd()` handler.
+The interface enables sending sequence of RPMB standard frames.
+
+.. code-block:: c
+
+        struct rpmb_ops mmc_rpmb_dev_ops = {
+                .cmd_seq = mmc_blk_rpmb_cmd_seq,
+                .type = RPMB_TYPE_EMMC,
+                ...
+        }
+        rpmb_dev_register(disk_to_dev(part_md->disk), &mmc_rpmb_dev_ops);
+
+
+User space API
+--------------
+
+A parallel user space API is provided via /dev/rpmbX character
+device with two IOCTL commands.
+- First ``RPMB_IOC_VER_CMD``, return driver protocol version,
+- second ``RPMB_IOC_CAP_CMD`` return capability structure,
+- last ``RPMB_IOC_SEQ_CMD`` where the whole RPMB sequence, and
+  including ``RESULT_READ`` is supplied by the caller.
+https://android.googlesource.com/trusty/app/storage/
+
+.. code-block:: c
+
+        struct rpmb_ioc_req_cmd ireq;
+        int ret;
+
+        ireq.req_type = RPMB_WRITE_DATA;
+        rpmb_ioc_cmd_set(ireq.icmd, RPMB_F_WRITE, frames_in, cnt_in);
+        rpmb_ioc_cmd_set(ireq.ocmd, 0, frames_out, cnt_out);
+
+        ret = ioctl(fd, RPMB_IOC_REQ_CMD, &ireq);
+
+There are some differences in RPMB API usage over NVMe, eMMC and UFS cases,
+such as RPMB frame structure and size, big/little endian fields etc
+
+UFS and eMMC use the JDEC RPMB Data Frame described in JESD220B standard.
+Each frame includes 256B of data that is being encrypted along
+with other fields. If several data frames are sent as part of one
+request or response then the input message to MAC is the concatenation
+of bytes [228:511] of each data frame in the order in which the data
+frames are sent. The MAC is added only to the last data frame.
+All the fields in the JDEC frame have big endian bit order.
+
+
+NVMe RPMB Data Frame is described in NVM Express standard.
+Each frame includes data of 512B * block_count size.
+The capabilities of the device (such as capacity, rd/wr_cnt_max) are taken
+from the Replay Protected Memory Block Support (RPMBS) of the Identify
+Control Data Structure of NVMe.
+All the fields in the NVMe frame have little endian bit order.
+
+The only Authentication Method that is currently supported for all
+device types is HMAC SHA-256.
+
+
+API
+---
+.. kernel-doc:: include/linux/rpmb.h
+
+.. kernel-doc:: drivers/char/rpmb/core.c
+
+.. kernel-doc:: include/uapi/linux/rpmb.h
+
+.. kernel-doc:: drivers/char/rpmb/cdev.c
+
diff --git a/Documentation/driver-api/rpmb/rpmb-tool.rst b/Documentation/driver-api/rpmb/rpmb-tool.rst
new file mode 100644
index 000000000000..b97b70710029
--- /dev/null
+++ b/Documentation/driver-api/rpmb/rpmb-tool.rst
@@ -0,0 +1,19 @@
+.. SPDX-License-Identifier: GPL-2.0
+==========
+RPMB Tool
+==========
+
+There is a sample rpmb tool under tools/rpmb/ directory that exercises
+the RPMB devices via RPMB character devices interface (/dev/rpmbX)
+
+.. code-block:: none
+
+        rpmb [-v] [-r|-s] <command> <args>
+
+        rpmb get-info <RPMB_DEVICE>
+        rpmb program-key <RPMB_DEVICE> <KEY_FILE>
+        rpmb write-counter <RPMB_DEVICE> [KEY_FILE]
+        rpmb write-blocks <RPMB_DEVICE> <address> <block_count> <DATA_FILE> <KEY_FILE>
+        rpmb read-blocks <RPMB_DEVICE> <address> <blocks count> <OUTPUT_FILE> [KEY_FILE]
+
+        rpmb -v/--verbose:  runs in verbose mode
diff --git a/Documentation/driver-api/rpmb/simulation-device.rst b/Documentation/driver-api/rpmb/simulation-device.rst
new file mode 100644
index 000000000000..f6b8a83f11c1
--- /dev/null
+++ b/Documentation/driver-api/rpmb/simulation-device.rst
@@ -0,0 +1,21 @@
+.. SPDX-License-Identifier: GPL-2.0
+
+======================
+RPMB Simulation Device
+======================
+
+RPMB partition simulation device is a virtual device that
+provides simulation of the RPMB protocol and uses kernel memory
+as storage.
+
+This driver cannot promise any real security, it is suitable for testing
+of the RPMB subsystem it self and mostly it was found useful for testing of
+RPMB applications prior to RPMB key provisioning/programming as
+The RPMB key programming can be performed only once in the life time
+of the storage device.
+
+Implementation:
+---------------
+
+.. kernel-doc:: drivers/char/rpmb/rpmb_sim.c
+
diff --git a/MAINTAINERS b/MAINTAINERS
index 30c4957d783b..18eb7e334791 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -15163,6 +15163,7 @@ M:	Tomas Winkler <tomas.winkler@intel.com>
 L:	linux-kernel@vger.kernel.org
 S:	Supported
 F:	Documentation/ABI/testing/sysfs-class-rpmb
+F:	Documentation/driver-api/rpmb.rst
 F:	drivers/char/rpmb/*
 F:	include/uapi/linux/rpmb.h
 F:	include/linux/rpmb.h
-- 
2.17.1

