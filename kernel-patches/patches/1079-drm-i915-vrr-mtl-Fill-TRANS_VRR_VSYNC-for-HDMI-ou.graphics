From 3cc4074739a1c03d0292a7384bbfb1d44c21377b Mon Sep 17 00:00:00 2001
From: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Date: Tue, 24 Jan 2023 20:03:55 +0530
Subject: [PATCH 1079/1096] drm/i915/vrr/mtl: Fill TRANS_VRR_VSYNC for HDMI
 output

TRANS_VRR_VSYNC sets the position for hardware to send the Vsync at a
fixed position relative to the end of the Vblank (back porch) when VRR
is enabled (HDMI requirement). Bspec: 54804

v2: Used connector->type to check for HDMI connector.

v3: Updating the Vsync start and Vsync end for HDMI only.

Signed-off-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
---
 drivers/gpu/drm/i915/display/intel_display.c  |  2 +
 .../drm/i915/display/intel_display_types.h    |  1 +
 drivers/gpu/drm/i915/display/intel_vrr.c      | 38 ++++++++++++++++---
 drivers/gpu/drm/i915/i915_reg.h               |  7 ++++
 4 files changed, 42 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/drm/i915/display/intel_display.c b/drivers/gpu/drm/i915/display/intel_display.c
index 14bfb0a704b7..85024f17e459 100644
--- a/drivers/gpu/drm/i915/display/intel_display.c
+++ b/drivers/gpu/drm/i915/display/intel_display.c
@@ -5878,6 +5878,8 @@ intel_pipe_config_compare(const struct intel_crtc_state *current_config,
 	PIPE_CONF_CHECK_I(vrr.flipline);
 	PIPE_CONF_CHECK_I(vrr.pipeline_full);
 	PIPE_CONF_CHECK_I(vrr.guardband);
+	PIPE_CONF_CHECK_I(vrr.vsync_start);
+	PIPE_CONF_CHECK_I(vrr.vsync_end);
 
 #undef PIPE_CONF_CHECK_X
 #undef PIPE_CONF_CHECK_I
diff --git a/drivers/gpu/drm/i915/display/intel_display_types.h b/drivers/gpu/drm/i915/display/intel_display_types.h
index 4a2e17389d9a..f4b0ec71a20a 100644
--- a/drivers/gpu/drm/i915/display/intel_display_types.h
+++ b/drivers/gpu/drm/i915/display/intel_display_types.h
@@ -1347,6 +1347,7 @@ struct intel_crtc_state {
 		bool enable;
 		u8 pipeline_full;
 		u16 flipline, vmin, vmax, guardband;
+		u16 vsync_start, vsync_end;
 	} vrr;
 
 	struct {
diff --git a/drivers/gpu/drm/i915/display/intel_vrr.c b/drivers/gpu/drm/i915/display/intel_vrr.c
index b141a1064a11..4026eb998507 100644
--- a/drivers/gpu/drm/i915/display/intel_vrr.c
+++ b/drivers/gpu/drm/i915/display/intel_vrr.c
@@ -197,6 +197,12 @@ intel_vrr_compute_config(struct intel_crtc_state *crtc_state,
 	 */
 	crtc_state->vrr.vmin = vmin - 1;
 	crtc_state->vrr.vmax = vmax;
+
+	if (connector->base.connector_type == DRM_MODE_CONNECTOR_HDMIA ||
+	    connector->base.connector_type == DRM_MODE_CONNECTOR_HDMIB) {
+		crtc_state->vrr.vsync_start = adjusted_mode->crtc_vsync_start;
+		crtc_state->vrr.vsync_end = adjusted_mode->crtc_vsync_end;
+	}
 	crtc_state->vrr.enable = true;
 
 	crtc_state->vrr.flipline = crtc_state->vrr.vmin + 1;
@@ -236,24 +242,40 @@ static u32 trans_vrr_ctl(const struct intel_crtc_state *crtc_state)
 			VRR_CTL_PIPELINE_FULL_OVERRIDE;
 }
 
-void intel_vrr_enable(struct intel_encoder *encoder,
+void intel_vrr_enable(struct intel_connector *connector,
 		      const struct intel_crtc_state *crtc_state)
 {
 	struct intel_encoder *encoder = intel_attached_encoder(connector);
 	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
 	enum transcoder cpu_transcoder = crtc_state->cpu_transcoder;
+	u32 trans_vrr_ctl, trans_vrr_vsync;
 
 	if (!crtc_state->vrr.enable)
 		return;
 
+	if (DISPLAY_VER(dev_priv) >= 13)
+		trans_vrr_ctl = VRR_CTL_VRR_ENABLE |
+			VRR_CTL_IGN_MAX_SHIFT | VRR_CTL_FLIP_LINE_EN |
+			XELPD_VRR_CTL_VRR_GUARDBAND(crtc_state->vrr.guardband);
+	else
+		trans_vrr_ctl = VRR_CTL_VRR_ENABLE |
+			VRR_CTL_IGN_MAX_SHIFT | VRR_CTL_FLIP_LINE_EN |
+			VRR_CTL_PIPELINE_FULL(crtc_state->vrr.pipeline_full) |
+			VRR_CTL_PIPELINE_FULL_OVERRIDE;
+
 	intel_de_write(dev_priv, TRANS_VRR_VMIN(cpu_transcoder), crtc_state->vrr.vmin - 1);
 	intel_de_write(dev_priv, TRANS_VRR_VMAX(cpu_transcoder), crtc_state->vrr.vmax - 1);
-	intel_de_write(dev_priv, TRANS_VRR_CTL(cpu_transcoder), trans_vrr_ctl(crtc_state));
+
+	if (connector->base.connector_type == DRM_MODE_CONNECTOR_HDMIA ||
+	    connector->base.connector_type == DRM_MODE_CONNECTOR_HDMIB) {
+		trans_vrr_vsync = VRR_VSYNC_START(crtc_state->vrr.vsync_start) |
+			VRR_VSYNC_END(crtc_state->vrr.vsync_end);
+		intel_de_write(dev_priv, TRANS_VRR_VSYNC(cpu_transcoder), trans_vrr_vsync);
+	}
+
+	intel_de_write(dev_priv, TRANS_VRR_CTL(cpu_transcoder), trans_vrr_ctl);
 	intel_de_write(dev_priv, TRANS_VRR_FLIPLINE(cpu_transcoder), crtc_state->vrr.flipline - 1);
 	intel_de_write(dev_priv, TRANS_PUSH(cpu_transcoder), TRANS_PUSH_EN);
-
-	intel_de_write(dev_priv, TRANS_VRR_CTL(cpu_transcoder),
-		       VRR_CTL_VRR_ENABLE | trans_vrr_ctl(crtc_state));
 }
 
 void intel_vrr_send_push(const struct intel_crtc_state *crtc_state)
@@ -304,7 +326,7 @@ void intel_vrr_get_config(struct intel_crtc *crtc,
 {
 	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
 	enum transcoder cpu_transcoder = crtc_state->cpu_transcoder;
-	u32 trans_vrr_ctl;
+	u32 trans_vrr_ctl, trans_vrr_vsync;
 
 	trans_vrr_ctl = intel_de_read(dev_priv, TRANS_VRR_CTL(cpu_transcoder));
 	crtc_state->vrr.enable = trans_vrr_ctl & VRR_CTL_VRR_ENABLE;
@@ -323,5 +345,9 @@ void intel_vrr_get_config(struct intel_crtc *crtc,
 	crtc_state->vrr.vmax = intel_de_read(dev_priv, TRANS_VRR_VMAX(cpu_transcoder)) + 1;
 	crtc_state->vrr.vmin = intel_de_read(dev_priv, TRANS_VRR_VMIN(cpu_transcoder)) + 1;
 
+	trans_vrr_vsync = intel_de_read(dev_priv, TRANS_VRR_VSYNC(cpu_transcoder));
+	crtc_state->vrr.vsync_start = REG_FIELD_GET(VRR_VSYNC_START_MASK, trans_vrr_vsync);
+	crtc_state->vrr.vsync_end = REG_FIELD_GET(VRR_VSYNC_END_MASK, trans_vrr_vsync);
+
 	crtc_state->mode_flags |= I915_MODE_FLAG_VRR;
 }
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 79a75a090e99..d02a53ee33b7 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -1987,6 +1987,13 @@
 #define   EXITLINE_SHIFT	0
 
 /* VRR registers */
+#define _TRANS_VRR_VSYNC_A		0x60078
+#define TRANS_VRR_VSYNC(trans)		_MMIO_TRANS2(trans, _TRANS_VRR_VSYNC_A)
+#define   VRR_VSYNC_START_MASK		REG_GENMASK(12, 0)
+#define   VRR_VSYNC_END_MASK		REG_GENMASK(28, 16)
+#define   VRR_VSYNC_START(x)		REG_FIELD_PREP(VRR_VSYNC_START_MASK, (x))
+#define   VRR_VSYNC_END(x)		REG_FIELD_PREP(VRR_VSYNC_END_MASK, (x))
+
 #define _TRANS_VRR_CTL_A		0x60420
 #define _TRANS_VRR_CTL_B		0x61420
 #define _TRANS_VRR_CTL_C		0x62420
-- 
2.25.1

