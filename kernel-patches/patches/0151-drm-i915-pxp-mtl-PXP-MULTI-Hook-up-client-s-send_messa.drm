From b3d9d7048e276a10abf63e8d7791952c14b0e324 Mon Sep 17 00:00:00 2001
From: Alan Previn <alan.previn.teres.alexis@intel.com>
Date: Fri, 27 Jan 2023 04:38:33 -0800
Subject: [PATCH 151/184] drm/i915/pxp/mtl:[PXP-MULTI] Hook up client's
 send_message to GSCCS.

Reuse the same gsccs-send-message function for client's
pxp-ops-send-message. But in this case, use the client's
execution resources (context, batchbuffer, etc).

When sending client messages, don't embed the mtl-gsc-heci
header on their behalf and don't implicitly handle pending-bit.
Client process will handle the full end-to-end flow of its
interaction with GSC-fw.

Also, move reusable code from mei-tee's ioctl-io-message function
(such as user buffer size verification and copying contents back and
forth to/from user) into a common pxp location so we only have one
instance of it is executed for both tee-mei and gsccs backends.

Signed-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>
Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
---
 drivers/gpu/drm/i915/pxp/intel_pxp.c       |  64 ++++++++++++-
 drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c | 105 ++++++++++++++++-----
 drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h |   5 +
 drivers/gpu/drm/i915/pxp/intel_pxp_tee.c   |  64 +------------
 drivers/gpu/drm/i915/pxp/intel_pxp_tee.h   |   6 +-
 5 files changed, 160 insertions(+), 84 deletions(-)

diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp.c b/drivers/gpu/drm/i915/pxp/intel_pxp.c
index 7c8412d13bb0..6c5e6e05d07e 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp.c
@@ -579,6 +579,68 @@ static int pxp_set_session_status(struct intel_pxp *pxp,
 	return ret;
 }
 
+static bool ioctl_buffer_size_valid(u32 size)
+{
+	return size > 0 && size <= SZ_64K;
+}
+
+static int
+intel_pxp_ioctl_io_message(struct intel_pxp *pxp, struct drm_file *drmfile,
+			   struct prelim_drm_i915_pxp_tee_io_message_params *params)
+{
+	struct drm_i915_private *i915 = pxp->ctrl_gt->i915;
+	void *msg_in = NULL;
+	void *msg_out = NULL;
+	int ret = 0;
+
+	if (!params->msg_in || !params->msg_out ||
+	    !ioctl_buffer_size_valid(params->msg_out_buf_size) ||
+	    !ioctl_buffer_size_valid(params->msg_in_size))
+		return -EINVAL;
+
+	msg_in = kzalloc(params->msg_in_size, GFP_KERNEL);
+	if (!msg_in)
+		return -ENOMEM;
+
+	msg_out = kzalloc(params->msg_out_buf_size, GFP_KERNEL);
+	if (!msg_out) {
+		ret = -ENOMEM;
+		goto end;
+	}
+
+	if (copy_from_user(msg_in, u64_to_user_ptr(params->msg_in), params->msg_in_size)) {
+		drm_dbg(&i915->drm, "Failed to copy_from_user for TEE message\n");
+		ret = -EFAULT;
+		goto end;
+	}
+
+	if (HAS_ENGINE(pxp->ctrl_gt, GSC0))
+		ret = intel_pxp_gsccs_client_io_msg(pxp, drmfile,
+						    msg_in, params->msg_in_size,
+						    msg_out, params->msg_out_buf_size,
+						    &params->msg_out_ret_size);
+	else
+		ret = intel_pxp_tee_io_message(pxp,
+					       msg_in, params->msg_in_size,
+					       msg_out, params->msg_out_buf_size,
+					       &params->msg_out_ret_size);
+	if (ret) {
+		drm_dbg(&i915->drm, "Failed to send/receive user TEE message\n");
+		goto end;
+	}
+
+	if (copy_to_user(u64_to_user_ptr(params->msg_out), msg_out, params->msg_out_ret_size)) {
+		drm_dbg(&i915->drm, "Failed copy_to_user for TEE message\n");
+		ret = -EFAULT;
+		goto end;
+	}
+
+end:
+	kfree(msg_in);
+	kfree(msg_out);
+	return ret;
+}
+
 static int pxp_send_tee_msg(struct intel_pxp *pxp,
 			    struct prelim_drm_i915_pxp_ops *pxp_ops,
 			    struct drm_file *drmfile)
@@ -592,7 +654,7 @@ static int pxp_send_tee_msg(struct intel_pxp *pxp,
 	if (copy_from_user(&params, uparams, sizeof(params)) != 0)
 		return -EFAULT;
 
-	ret = intel_pxp_tee_ioctl_io_message(pxp, &params);
+	ret = intel_pxp_ioctl_io_message(pxp, drmfile, &params);
 	if (ret >= 0) {
 		pxp_ops->status = ret;
 
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c
index 38e8054830b9..6359596209a3 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c
@@ -52,6 +52,39 @@ gsccs_find_client_execution_resource(struct intel_pxp *pxp, struct drm_file *drm
 	return NULL;
 }
 
+static int
+gsccs_send_message(struct intel_pxp *pxp,
+		   struct gsccs_session_resources *exec_res,
+		   void *msg_in, size_t msg_in_size,
+		   void *msg_out, size_t msg_out_size_max,
+		   size_t *msg_out_len,
+		   u64 *gsc_msg_handle_retry);
+
+int
+intel_pxp_gsccs_client_io_msg(struct intel_pxp *pxp, struct drm_file *drmfile,
+			      void *msg_in, size_t msg_in_size,
+			      void *msg_out, size_t msg_out_size_max,
+			      u32 *msg_out_len)
+{
+	struct gsccs_client_ctx *client;
+	size_t reply_size;
+	int ret;
+
+	if (!drmfile)
+		return -EINVAL;
+
+	client = gsccs_find_client_execution_resource(pxp, drmfile);
+	if (!client)
+		return -EINVAL;
+
+	ret = gsccs_send_message(pxp, &client->exec,
+				 msg_in, msg_in_size,
+				 msg_out, msg_out_size_max,
+				 &reply_size, NULL);
+	*msg_out_len = (u32)reply_size;
+	return ret;
+}
+
 static void
 gsccs_destroy_execution_resource(struct intel_pxp *pxp, struct gsccs_session_resources *exec_res);
 
@@ -148,6 +181,7 @@ fw_err_to_string(u32 type)
 
 static int
 gsccs_send_message(struct intel_pxp *pxp,
+		   struct gsccs_session_resources *exec_res,
 		   void *msg_in, size_t msg_in_size,
 		   void *msg_out, size_t msg_out_size_max,
 		   size_t *msg_out_len,
@@ -155,17 +189,25 @@ gsccs_send_message(struct intel_pxp *pxp,
 {
 	struct intel_gt *gt = pxp->ctrl_gt;
 	struct drm_i915_private *i915 = gt->i915;
-	struct gsccs_session_resources *exec_res =  &pxp->gsccs_res;
-	struct intel_gsc_mtl_header *header = exec_res->pkt_vaddr;
+	struct intel_gsc_mtl_header *header;
 	struct intel_gsc_heci_non_priv_pkt pkt;
+	u32 insert_header_size = 0;
 	size_t max_msg_size;
 	u32 reply_size;
 	int ret;
 
+	if (!exec_res) {
+		drm_err(&i915->drm, "gsc send_message with invalid exec_resource\n");
+		return -ENODEV;
+	} else if (exec_res == &pxp->gsccs_res) {
+		/* kernel submissions need population of gsc-mtl-header */
+		insert_header_size = sizeof(*header);
+	}
+
 	if (!exec_res->ce)
 		return -ENODEV;
 
-	max_msg_size = PXP43_MAX_HECI_INOUT_SIZE - sizeof(*header);
+	max_msg_size = PXP43_MAX_HECI_INOUT_SIZE - insert_header_size;
 
 	if (msg_in_size > max_msg_size || msg_out_size_max > max_msg_size)
 		return -ENOSPC;
@@ -177,26 +219,31 @@ gsccs_send_message(struct intel_pxp *pxp,
 
 	mutex_lock(&pxp->tee_mutex);
 
-	memset(header, 0, sizeof(*header));
-	intel_gsc_uc_heci_cmd_emit_mtl_header(header, HECI_MEADDRESS_PXP,
-					      msg_in_size + sizeof(*header),
-					      exec_res->host_session_handle);
+	header = exec_res->pkt_vaddr;
+
+	if (insert_header_size) {
+		memset(header, 0, sizeof(*header));
+		intel_gsc_uc_heci_cmd_emit_mtl_header(header, HECI_MEADDRESS_PXP,
+						      msg_in_size + sizeof(*header),
+						      exec_res->host_session_handle);
+		/* check if this is a host-session-handle cleanup call (empty packet) */
+		if (!msg_in && !msg_out)
+			header->flags |= GSC_INFLAG_MSG_CLEANUP;
+	}
 
-	/* check if this is a host-session-handle cleanup call (empty packet) */
-	if (!msg_in && !msg_out)
-		header->flags |= GSC_INFLAG_MSG_CLEANUP;
 
 	/* copy caller provided gsc message handle if this is polling for a prior msg completion */
-	header->gsc_message_handle = *gsc_msg_handle_retry;
+	if (gsc_msg_handle_retry) /* can be null if its a client send-message */
+		header->gsc_message_handle = *gsc_msg_handle_retry;
 
 	/* NOTE: zero size packets are used for session-cleanups */
 	if (msg_in && msg_in_size)
-		memcpy(exec_res->pkt_vaddr + sizeof(*header), msg_in, msg_in_size);
+		memcpy(exec_res->pkt_vaddr + insert_header_size, msg_in, msg_in_size);
 
 	pkt.addr_in = i915_vma_offset(exec_res->pkt_vma);
 	pkt.size_in = header->message_size;
 	pkt.addr_out = pkt.addr_in + PXP43_MAX_HECI_INOUT_SIZE;
-	pkt.size_out = msg_out_size_max + sizeof(*header);
+	pkt.size_out = msg_out_size_max + insert_header_size;
 	pkt.heci_pkt_vma = exec_res->pkt_vma;
 	pkt.bb_vma = exec_res->bb_vma;
 
@@ -205,7 +252,8 @@ gsccs_send_message(struct intel_pxp *pxp,
 	 * We use offset PXP43_MAX_HECI_INOUT_SIZE for reply location so point header there.
 	 */
 	header = exec_res->pkt_vaddr + PXP43_MAX_HECI_INOUT_SIZE;
-	header->validity_marker = 0;
+	if (insert_header_size) /*not for clients */
+		header->validity_marker = 0;
 
 	ret = intel_gsc_uc_heci_cmd_submit_nonpriv(&gt->uc.gsc,
 						   exec_res->ce, &pkt, exec_res->bb_vaddr,
@@ -221,13 +269,18 @@ gsccs_send_message(struct intel_pxp *pxp,
 		ret = -EINVAL;
 		goto unlock;
 	}
+
+	/* for client messages, we return the output as-is without verifying it */
+	if (!insert_header_size)
+		goto skip_output_validation;
+
 	if (header->status != 0) {
 		drm_dbg(&i915->drm, "gsc PXP reply status has error = 0x%08x\n",
 			header->status);
 		ret = -EINVAL;
 		goto unlock;
 	}
-	if (header->flags & GSC_OUTFLAG_MSG_PENDING) {
+	if (gsc_msg_handle_retry && header->flags & GSC_OUTFLAG_MSG_PENDING) {
 		drm_dbg(&i915->drm, "gsc PXP reply is busy\n");
 		/*
 		 * When the GSC firmware replies with pending bit, it means that the requested
@@ -240,7 +293,9 @@ gsccs_send_message(struct intel_pxp *pxp,
 		goto unlock;
 	}
 
-	reply_size = header->message_size - sizeof(*header);
+skip_output_validation:
+
+	reply_size = header->message_size - insert_header_size;
 	if (reply_size > msg_out_size_max) {
 		drm_warn(&i915->drm, "caller with insufficient PXP reply size %u (%zu)\n",
 			 reply_size, msg_out_size_max);
@@ -248,7 +303,8 @@ gsccs_send_message(struct intel_pxp *pxp,
 	}
 
 	if (msg_out)
-		memcpy(msg_out, exec_res->pkt_vaddr + PXP43_MAX_HECI_INOUT_SIZE + sizeof(*header),
+		memcpy(msg_out,
+		       exec_res->pkt_vaddr + PXP43_MAX_HECI_INOUT_SIZE + insert_header_size,
 		       reply_size);
 	if (msg_out_len)
 		*msg_out_len = reply_size;
@@ -260,6 +316,7 @@ gsccs_send_message(struct intel_pxp *pxp,
 
 static int
 gsccs_send_message_retry_complete(struct intel_pxp *pxp,
+				  struct gsccs_session_resources *exec_res,
 				  void *msg_in, size_t msg_in_size,
 				  void *msg_out, size_t msg_out_size_max,
 				  size_t *msg_out_len)
@@ -271,9 +328,15 @@ gsccs_send_message_retry_complete(struct intel_pxp *pxp,
 	 * Keep sending request if GSC firmware was busy. Based on fw specs +
 	 * sw overhead (and testing) we expect a worst case pending-bit delay of
 	 * GSC_PENDING_RETRY_MAXCOUNT x GSC_PENDING_RETRY_PAUSE_MS millisecs.
+	 *
+	 * NOTE: this _retry_complete version of send_message is typically
+	 * used internally for arb-session management as user-space callers
+	 * interacting with GSC-FW is expected to handle pending-bit replies
+	 * on their own.
 	 */
 	do {
-		ret = gsccs_send_message(pxp, msg_in, msg_in_size, msg_out, msg_out_size_max,
+		ret = gsccs_send_message(pxp, exec_res,
+					 msg_in, msg_in_size, msg_out, msg_out_size_max,
 					 msg_out_len, &gsc_session_retry);
 		/* Only try again if gsc says so */
 		if (ret != -EAGAIN)
@@ -318,7 +381,7 @@ int intel_pxp_gsccs_create_session(struct intel_pxp *pxp,
 	msg_in.header.buffer_len = sizeof(msg_in) - sizeof(msg_in.header);
 	msg_in.protection_mode = PXP43_INIT_SESSION_PROTECTION_ARB;
 
-	ret = gsccs_send_message_retry_complete(pxp,
+	ret = gsccs_send_message_retry_complete(pxp, &pxp->gsccs_res,
 						&msg_in, sizeof(msg_in),
 						&msg_out, sizeof(msg_out), NULL);
 	if (ret) {
@@ -360,7 +423,7 @@ void intel_pxp_gsccs_end_arb_fw_session(struct intel_pxp *pxp, u32 session_id)
 	msg_in.header.stream_id |= FIELD_PREP(PXP_CMDHDR_EXTDATA_APP_TYPE, 0);
 	msg_in.header.stream_id |= FIELD_PREP(PXP_CMDHDR_EXTDATA_SESSION_ID, session_id);
 
-	ret = gsccs_send_message_retry_complete(pxp,
+	ret = gsccs_send_message_retry_complete(pxp, &pxp->gsccs_res,
 						&msg_in, sizeof(msg_in),
 						&msg_out, sizeof(msg_out), NULL);
 	if (ret) {
@@ -389,7 +452,7 @@ gsccs_cleanup_fw_host_session_handle(struct intel_pxp *pxp,
 	struct drm_i915_private *i915 = pxp->ctrl_gt->i915;
 	int ret;
 
-	ret = gsccs_send_message_retry_complete(pxp, NULL, 0, NULL, 0, NULL);
+	ret = gsccs_send_message_retry_complete(pxp, exec_res, NULL, 0, NULL, 0, NULL);
 	if (ret)
 		drm_dbg(&i915->drm, "Failed to send gsccs msg host-session-cleanup: ret=[%d]\n",
 			ret);
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h
index 9096cd7dad7b..c1a288c671dc 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h
@@ -29,6 +29,11 @@ void intel_gsccs_free_client_resources(struct intel_pxp *pxp,
 				       struct drm_file *drmfile);
 int intel_gsccs_alloc_client_resources(struct intel_pxp *pxp,
 				       struct drm_file *drmfile);
+int
+intel_pxp_gsccs_client_io_msg(struct intel_pxp *pxp, struct drm_file *drmfile,
+			      void *msg_in, size_t msg_in_size,
+			      void *msg_out, size_t msg_out_size_max,
+			      u32 *msg_out_len);
 
 #else
 static inline void intel_pxp_gsccs_fini(struct intel_pxp *pxp)
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_tee.c b/drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
index 70c52a570e88..040da770ccb6 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_tee.c
@@ -51,10 +51,10 @@ fw_err_to_string(u32 type)
 	return NULL;
 }
 
-static int intel_pxp_tee_io_message(struct intel_pxp *pxp,
-				    void *msg_in, u32 msg_in_size,
-				    void *msg_out, u32 msg_out_max_size,
-				    u32 *msg_out_rcv_size)
+int intel_pxp_tee_io_message(struct intel_pxp *pxp,
+			     void *msg_in, u32 msg_in_size,
+			     void *msg_out, u32 msg_out_max_size,
+			     u32 *msg_out_rcv_size)
 {
 	struct drm_i915_private *i915 = pxp->ctrl_gt->i915;
 	struct i915_pxp_component *pxp_component = pxp->pxp_component;
@@ -428,59 +428,3 @@ void intel_pxp_tee_end_fw_sessions(struct intel_pxp *pxp, u32 sessions_mask)
 			intel_pxp_tee_end_one_fw_session(pxp, n);
 	}
 }
-
-static bool tee_ioctl_buffer_size_valid(u32 size)
-{
-	return size > 0 && size <= SZ_64K;
-}
-
-int intel_pxp_tee_ioctl_io_message(struct intel_pxp *pxp,
-				   struct prelim_drm_i915_pxp_tee_io_message_params *params)
-{
-	struct drm_i915_private *i915 = pxp->ctrl_gt->i915;
-	void *msg_in = NULL;
-	void *msg_out = NULL;
-	int ret = 0;
-
-	if (!params->msg_in || !params->msg_out ||
-	    !tee_ioctl_buffer_size_valid(params->msg_out_buf_size) ||
-	    !tee_ioctl_buffer_size_valid(params->msg_in_size))
-		return -EINVAL;
-
-	msg_in = kzalloc(params->msg_in_size, GFP_KERNEL);
-	if (!msg_in)
-		return -ENOMEM;
-
-	msg_out = kzalloc(params->msg_out_buf_size, GFP_KERNEL);
-	if (!msg_out) {
-		ret = -ENOMEM;
-		goto end;
-	}
-
-	if (copy_from_user(msg_in, u64_to_user_ptr(params->msg_in), params->msg_in_size)) {
-		drm_dbg(&i915->drm, "Failed to copy_from_user for TEE message\n");
-		ret = -EFAULT;
-		goto end;
-	}
-
-	ret = intel_pxp_tee_io_message(pxp,
-				       msg_in, params->msg_in_size,
-				       msg_out, params->msg_out_buf_size,
-				       &params->msg_out_ret_size);
-	if (ret) {
-		drm_dbg(&i915->drm, "Failed to send/receive user TEE message\n");
-		goto end;
-	}
-
-	if (copy_to_user(u64_to_user_ptr(params->msg_out), msg_out, params->msg_out_ret_size)) {
-		drm_dbg(&i915->drm, "Failed copy_to_user for TEE message\n");
-		ret = -EFAULT;
-		goto end;
-	}
-
-end:
-	kfree(msg_in);
-	kfree(msg_out);
-	return ret;
-}
-
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_tee.h b/drivers/gpu/drm/i915/pxp/intel_pxp_tee.h
index da11e245baba..f33956e0ffff 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_tee.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_tee.h
@@ -21,7 +21,9 @@ int intel_pxp_tee_stream_message(struct intel_pxp *pxp,
 				 void *msg_in, size_t msg_in_len,
 				 void *msg_out, size_t msg_out_len);
 
-int intel_pxp_tee_ioctl_io_message(struct intel_pxp *pxp,
-				   struct prelim_drm_i915_pxp_tee_io_message_params *params);
+int intel_pxp_tee_io_message(struct intel_pxp *pxp,
+			     void *msg_in, u32 msg_in_size,
+			     void *msg_out, u32 msg_out_max_size,
+			     u32 *msg_out_rcv_size);
 
 #endif /* __INTEL_PXP_TEE_H__ */
-- 
2.25.1

