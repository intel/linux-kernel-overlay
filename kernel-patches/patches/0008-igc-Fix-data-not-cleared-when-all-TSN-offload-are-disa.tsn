From 9e8909cf079354efa560816cdc9b6a1711bfd979 Mon Sep 17 00:00:00 2001
From: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
Date: Thu, 28 Mar 2024 22:46:40 -0400
Subject: [PATCH 08/10] igc: Fix data not cleared when all TSN offload are
 disabled

When all TSN features are disabled, only taprio related fields
were reset, other TSN features like preemption was not reset.

Fixing this by resetting all TSN features field when all TSN
features are disabeld.

Fixes: 61572d5f8f91 ("igc: Simplify TSN flags handling")
Signed-off-by: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
---
 drivers/net/ethernet/intel/igc/igc_main.c | 46 ++++++++++++++++++++++-
 drivers/net/ethernet/intel/igc/igc_tsn.c  |  7 +++-
 drivers/net/ethernet/intel/igc/igc_tsn.h  |  1 +
 3 files changed, 50 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/intel/igc/igc_main.c b/drivers/net/ethernet/intel/igc/igc_main.c
index 185ed7d2e7ed..c0640534228f 100644
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@ -6350,9 +6350,51 @@ static int igc_qbv_clear_schedule(struct igc_adapter *adapter)
 	return 0;
 }
 
-static int igc_tsn_clear_schedule(struct igc_adapter *adapter)
+static void igc_qbu_clear_data(struct igc_adapter *adapter)
+{
+	int i;
+
+	for (i = 0; i < adapter->num_tx_queues; i++) {
+		struct igc_ring *ring = adapter->tx_ring[i];
+
+		ring->preemptible = false;
+	}
+
+	adapter->frame_preemption_active = false;
+}
+
+static void igc_cbs_clear_data(struct igc_adapter *adapter)
+{
+	int i;
+
+	for (i = 0; i < adapter->num_tx_queues; i++) {
+		struct igc_ring *ring = adapter->tx_ring[i];
+
+		ring->cbs_enable = false;
+		ring->idleslope = 0;
+		ring->sendslope = 0;
+		ring->hicredit = 0;
+		ring->locredit = 0;
+	}
+}
+
+static void igc_etf_clear_data(struct igc_adapter *adapter)
+{
+	int i;
+
+	for (i = 0; i < adapter->num_tx_queues; i++) {
+		struct igc_ring *ring = adapter->tx_ring[i];
+
+		ring->launchtime_enable = false;
+	}
+}
+
+int igc_tsn_clear_schedule(struct igc_adapter *adapter)
 {
 	igc_qbv_clear_schedule(adapter);
+	igc_qbu_clear_data(adapter);
+	igc_cbs_clear_data(adapter);
+	igc_etf_clear_data(adapter);
 
 	return 0;
 }
@@ -6543,7 +6585,7 @@ static int igc_tsn_enable_qbv_scheduling(struct igc_adapter *adapter,
 		err = igc_save_qbv_schedule(adapter, qopt);
 		break;
 	case TAPRIO_CMD_DESTROY:
-		err = igc_tsn_clear_schedule(adapter);
+		err = igc_qbv_clear_schedule(adapter);
 		break;
 	default:
 		return -EOPNOTSUPP;
diff --git a/drivers/net/ethernet/intel/igc/igc_tsn.c b/drivers/net/ethernet/intel/igc/igc_tsn.c
index d0fb66522dd1..0de86120efb5 100644
--- a/drivers/net/ethernet/intel/igc/igc_tsn.c
+++ b/drivers/net/ethernet/intel/igc/igc_tsn.c
@@ -340,8 +340,11 @@ int igc_tsn_reset(struct igc_adapter *adapter)
 
 	new_flags = igc_tsn_new_flags(adapter);
 
-	if (!(new_flags & IGC_FLAG_TSN_ANY_ENABLED))
-		return igc_tsn_disable_offload(adapter);
+	if (!(new_flags & IGC_FLAG_TSN_ANY_ENABLED)) {
+		igc_tsn_clear_schedule(adapter);
+		igc_tsn_disable_offload(adapter);
+		return 0;
+	}
 
 	err = igc_tsn_enable_offload(adapter);
 	if (err < 0)
diff --git a/drivers/net/ethernet/intel/igc/igc_tsn.h b/drivers/net/ethernet/intel/igc/igc_tsn.h
index b53e6af560b7..e6ee296a5279 100644
--- a/drivers/net/ethernet/intel/igc/igc_tsn.h
+++ b/drivers/net/ethernet/intel/igc/igc_tsn.h
@@ -7,5 +7,6 @@
 int igc_tsn_offload_apply(struct igc_adapter *adapter);
 int igc_tsn_reset(struct igc_adapter *adapter);
 void igc_tsn_adjust_txtime_offset(struct igc_adapter *adapter);
+int igc_tsn_clear_schedule(struct igc_adapter *adapter);
 
 #endif /* _IGC_BASE_H */
-- 
2.25.1

