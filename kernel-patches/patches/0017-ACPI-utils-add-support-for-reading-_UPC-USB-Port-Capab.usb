From 133542c38dc8f6a8e771d98d4c8c5a0bd1e6bef4 Mon Sep 17 00:00:00 2001
From: Mathias Nyman <mathias.nyman@linux.intel.com>
Date: Tue, 29 Nov 2022 17:00:22 +0200
Subject: [PATCH 17/23] ACPI: utils: add support for reading _UPC USB Port
 Capabilities

Add acpi_get_usb_port_capability() helper function to read the
USB Port Capabilities _UPC object, and a structure to store it.

ACPI 6.5 changed the third element of _UPC from reserved to USB-C Port
capabilities. Add macros for those capability bits, and add definitions
for the existing connector types in the second element as well.

Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
---
 drivers/acpi/utils.c    | 45 +++++++++++++++++++++++++++++++++++++++++
 include/acpi/acbuffer.h | 34 ++++++++++++++++++++++++++++++-
 include/acpi/acpi_bus.h |  3 +++
 3 files changed, 81 insertions(+), 1 deletion(-)

diff --git a/drivers/acpi/utils.c b/drivers/acpi/utils.c
index 2ea14648a661..173b6f7145cb 100644
--- a/drivers/acpi/utils.c
+++ b/drivers/acpi/utils.c
@@ -445,6 +445,51 @@ acpi_get_physical_device_location(acpi_handle handle, struct acpi_pld_info **pld
 }
 EXPORT_SYMBOL(acpi_get_physical_device_location);
 
+/**
+ * acpi_get_usb_port_capabilities: Evaluate _UPC for usb ports
+ * @handle: ACPI device handle
+ * @upc: upc double pointer to be set to allocated and filled struct acpi_upc_info
+ *
+ * Evaluate _UPC and set the passed upc double pointer to an allocated and filled
+ * acpi_upc_info struct. Caller needs to free the allocated struct acpi_upc_info
+ *
+ * Returns: acpi_status
+ */
+acpi_status
+acpi_get_usb_port_capabilities(acpi_handle handle, struct acpi_upc_info **upc)
+{
+	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
+	struct acpi_upc_info *upc_info;
+	union acpi_object *obj = NULL;
+	acpi_status status;
+
+	status = acpi_evaluate_object(handle, "_UPC", NULL, &buffer);
+	if (ACPI_FAILURE(status))
+		goto out;
+
+	obj = buffer.pointer;
+	if (!obj || (obj->type != ACPI_TYPE_PACKAGE) || obj->package.count != 4) {
+		status = AE_TYPE;
+		goto out;
+	}
+
+	upc_info = ACPI_ALLOCATE_ZEROED(sizeof(struct acpi_upc_info));
+	if (!upc_info) {
+		status = AE_NO_MEMORY;
+		goto out;
+	}
+
+	upc_info->connectable = obj->package.elements[0].integer.value;
+	upc_info->type = obj->package.elements[1].integer.value;
+	upc_info->usbc_capabilities = obj->package.elements[2].integer.value;
+
+	*upc = upc_info;
+out:
+	kfree(obj);
+	return status;
+}
+EXPORT_SYMBOL(acpi_get_usb_port_capabilities);
+
 /**
  * acpi_evaluate_ost: Evaluate _OST for hotplug operations
  * @handle: ACPI device handle
diff --git a/include/acpi/acbuffer.h b/include/acpi/acbuffer.h
index 252b235dce5a..86776f549618 100644
--- a/include/acpi/acbuffer.h
+++ b/include/acpi/acbuffer.h
@@ -12,7 +12,7 @@
 
 /*
  * Contains buffer structures for these predefined names:
- * _FDE, _GRT, _GTM, _PLD, _SRT
+ * _FDE, _GRT, _GTM, _PLD, _SRT, _UPC
  */
 
 /*
@@ -65,6 +65,15 @@ struct acpi_gtm_info {
 	u32 flags;
 };
 
+/* _UPC USB Port Capabilities return value */
+
+struct acpi_upc_info {
+	u8 connectable;
+	u8 type;
+	u32 usbc_capabilities;
+	u32 reserved1;
+};
+
 /*
  * Formatted _PLD return value. The minimum size is a package containing
  * one buffer.
@@ -217,4 +226,27 @@ struct acpi_pld_info {
 #define ACPI_PLD_PANEL_BACK     5
 #define ACPI_PLD_PANEL_UNKNOWN  6
 
+/* ACPI _UPC USB Port Capabilities macros */
+
+/* _UPC second byte, USB port connector type definitions */
+#define ACPI_UPC_TYPE_A			0x00
+#define ACPI_UPC_TYPE_MINI_AB		0x01
+#define ACPI_UPC_TYPE_EXPRESSCARD	0x02
+#define ACPI_UPC_TYPE_USB3_A		0x03
+#define ACPI_UPC_TYPE_USB3_B		0x04
+#define ACPI_UPC_TYPE_USB3_MICRO_B	0x05
+#define ACPI_UPC_TYPE_USB3_MICRO_AB	0x06
+#define ACPI_UPC_TYPE_POWER_B		0x07
+#define ACPI_UPC_TYPE_USBC_USB2		0x08
+#define ACPI_UPC_TYPE_USBC_SS_SWITCH	0x09
+#define ACPI_UPC_TYPE_USBC_SS_NO_SWITCH	0x0a
+#define ACPI_UPC_TYPE_PROPPRIETARY	0xff
+
+/* _UPC third integer, Macros to check USB-C port capabilities */
+#define ACPI_UPC_USBC_RETIMER_COUNT(dword)	((dword) & 0x03)
+#define ACPI_UPC_USBC_PCIE(dword)		((dword) & BIT(2))
+#define ACPI_UPC_USBC_DISPLAY_PORT(dword)	((dword) & BIT(3))
+#define ACPI_UPC_USBC_USB4(dword)		((dword) & BIT(4))
+#define ACPI_UPC_USBC_TBT3(dword)		((dword) & BIT(5))
+
 #endif				/* ACBUFFER_H */
diff --git a/include/acpi/acpi_bus.h b/include/acpi/acpi_bus.h
index 254685085c82..36d521a22deb 100644
--- a/include/acpi/acpi_bus.h
+++ b/include/acpi/acpi_bus.h
@@ -39,6 +39,9 @@ acpi_evaluate_ost(acpi_handle handle, u32 source_event, u32 status_code,
 acpi_status
 acpi_get_physical_device_location(acpi_handle handle, struct acpi_pld_info **pld);
 
+acpi_status
+acpi_get_usb_port_capabilities(acpi_handle handle, struct acpi_upc_info **upc);
+
 bool acpi_has_method(acpi_handle handle, char *name);
 acpi_status acpi_execute_simple_method(acpi_handle handle, char *method,
 				       u64 arg);
-- 
2.25.1

