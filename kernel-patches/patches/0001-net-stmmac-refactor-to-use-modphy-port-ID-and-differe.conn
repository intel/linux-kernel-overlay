From 784bf00e0e8e76fd5e41f81e3711921478ad597a Mon Sep 17 00:00:00 2001
From: Choong Yong Liang <yong.liang.choong@intel.com>
Date: Mon, 3 Oct 2022 18:32:37 +0800
Subject: [PATCH 1/2] net: stmmac: refactor to use modphy port ID and different
 tsn lanes

Modphy register access is decided by modphy port ID. But, in the EHL
platform, PSE GBE is using modphy port ID 0xAA and PCH GBE is using
modphy port ID 0xA8. Current logic is having PSE/PCH to determine the
modphy port ID and this logic is only suitable for EHL platform.
Other platforms are having PCH GBE only and it is not always using
modphy port ID 0xA8. Refactor was done by using modphy port ID to
determine for modphy register access.

EHL platforms are using lane 7, 8, 9, 10 and 11 for modphy register
access. But other platforms are using different lanes. Different tsn
lanes arrays were introduced, so that other platforms can use different
lanes.

Signed-off-by: Choong Yong Liang <yong.liang.choong@intel.com>
---
 .../net/ethernet/stmicro/stmmac/dwmac-intel.c | 128 +++++++++---------
 .../net/ethernet/stmicro/stmmac/dwmac-intel.h |  92 +++++++------
 2 files changed, 116 insertions(+), 104 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
index 5829e2e0e318..e4dd9f8b9e7a 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
@@ -16,6 +16,9 @@ struct intel_priv_data {
 	int mdio_adhoc_addr;	/* mdio address for serdes & etc */
 	unsigned long crossts_adj;
 	bool is_pse;
+	const int *tsn_lanes;
+	int max_tsn_lanes;
+	int pid_modphy;
 };
 
 /* This struct is used to associate PCI Function of MAC controller on a board,
@@ -422,13 +425,13 @@ static void intel_mgbe_pse_crossts_adj(struct intel_priv_data *intel_priv,
 }
 
 #if IS_ENABLED(CONFIG_INTEL_PMC_CORE)
-static bool intel_tsn_interface_is_available(struct net_device *ndev)
+static bool intel_tsn_interface_is_available(struct net_device *ndev,
+					     struct intel_priv_data *intel_priv)
 {
 	struct stmmac_priv *priv = netdev_priv(ndev);
 	struct pmc_ipc_cmd tmp = {0};
-	bool has_tsn_interface = false;
 	u32 rbuf[4] = {0};
-	int ret, i, lane;
+	int ret, i, j;
 
 	if (priv->plat->serdes_powerup) {
 		tmp.cmd = IPC_SOC_REGISTER_ACCESS;
@@ -444,89 +447,69 @@ static bool intel_tsn_interface_is_available(struct net_device *ndev)
 				return false;
 			}
 
-			/* Possible lanes for TSN are from 7 to 11 */
-			for (lane = 7; lane <= 11; lane++)
-				if ((rbuf[0] >> (4 * (lane % 8)) &
+			for (j = 0; j <= intel_priv->max_tsn_lanes; j++)
+				if ((rbuf[0] >> (4 * (intel_priv->tsn_lanes[j] % 8)) &
 						B_PCH_FIA_PCR_L0O) == 0xB)
-					has_tsn_interface = true;
+					return true;
 		}
 	}
-	return has_tsn_interface;
+	return false;
+}
+
+static int intel_set_reg_access(const struct pmc_serdes_regs *regs, int max_regs)
+{
+	int ret = 0, i;
+
+	for (i = 0; i < max_regs; i++) {
+		struct pmc_ipc_cmd tmp = {0};
+		u32 buf[4] = {0};
+
+		tmp.cmd = IPC_SOC_REGISTER_ACCESS;
+		tmp.sub_cmd = IPC_SOC_SUB_CMD_WRITE;
+		tmp.wbuf[0] = (u32)regs[i].index;
+		tmp.wbuf[1] = regs[i].val;
+
+		ret = intel_pmc_core_ipc(&tmp, buf);
+
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
 }
 
 static int intel_config_serdes(struct net_device *ndev, void *intel_data)
 {
 	struct intel_priv_data *intel_priv = intel_data;
 	struct stmmac_priv *priv = netdev_priv(ndev);
-	int ret = 0, i;
+	int ret = 0;
 
-	if (!intel_tsn_interface_is_available(ndev)) {
+	if (!intel_tsn_interface_is_available(ndev, intel_priv)) {
 		netdev_info(priv->dev, "TSN interface not found.\n");
 		goto pmc_read_error;
 	}
 
-	if (intel_priv->is_pse) {
+	if (intel_priv->pid_modphy == PID_MODPHY1) {
 		if (priv->plat->phy_interface == PHY_INTERFACE_MODE_2500BASEX) {
-			for (i = 0; i < ARRAY_SIZE(pse_2p5g_regs); i++) {
-				struct pmc_ipc_cmd tmp = {0};
-				u32 buf[4] = {0};
-
-				tmp.cmd = IPC_SOC_REGISTER_ACCESS;
-				tmp.sub_cmd = IPC_SOC_SUB_CMD_WRITE;
-				tmp.wbuf[0] = (u32)pse_2p5g_regs[i].index;
-				tmp.wbuf[1] = pse_2p5g_regs[i].val;
-
-				ret = intel_pmc_core_ipc(&tmp, buf);
-				if (ret < 0)
-					goto pmc_read_error;
-			}
+			ret = intel_set_reg_access(pid_modphy1_2p5g_regs,
+						   ARRAY_SIZE(pid_modphy1_2p5g_regs));
 		} else {
-			for (i = 0; i < ARRAY_SIZE(pse_1g_regs); i++) {
-				struct pmc_ipc_cmd tmp = {0};
-				u32 buf[4] = {0};
-
-				tmp.cmd = IPC_SOC_REGISTER_ACCESS;
-				tmp.sub_cmd = IPC_SOC_SUB_CMD_WRITE;
-				tmp.wbuf[0] = (u32)pse_1g_regs[i].index;
-				tmp.wbuf[1] = pse_1g_regs[i].val;
-
-				ret = intel_pmc_core_ipc(&tmp, buf);
-				if (ret < 0)
-					goto pmc_read_error;
-			}
+			ret = intel_set_reg_access(pid_modphy1_1g_regs,
+						   ARRAY_SIZE(pid_modphy1_1g_regs));
 		}
 	} else {
 		if (priv->plat->phy_interface == PHY_INTERFACE_MODE_2500BASEX) {
-			for (i = 0; i < ARRAY_SIZE(pch_2p5g_regs); i++) {
-				struct pmc_ipc_cmd tmp = {0};
-				u32 buf[4] = {0};
-
-				tmp.cmd = IPC_SOC_REGISTER_ACCESS;
-				tmp.sub_cmd = IPC_SOC_SUB_CMD_WRITE;
-				tmp.wbuf[0] = (u32)pch_2p5g_regs[i].index;
-				tmp.wbuf[1] = pch_2p5g_regs[i].val;
-
-				ret = intel_pmc_core_ipc(&tmp, buf);
-				if (ret < 0)
-					goto pmc_read_error;
-			}
+			ret = intel_set_reg_access(pid_modphy3_2p5g_regs,
+						   ARRAY_SIZE(pid_modphy3_2p5g_regs));
 		} else {
-			for (i = 0; i < ARRAY_SIZE(pch_1g_regs); i++) {
-				struct pmc_ipc_cmd tmp = {0};
-				u32 buf[4] = {0};
-
-				tmp.cmd = IPC_SOC_REGISTER_ACCESS;
-				tmp.sub_cmd = IPC_SOC_SUB_CMD_WRITE;
-				tmp.wbuf[0] = (u32)pch_1g_regs[i].index;
-				tmp.wbuf[1] = pch_1g_regs[i].val;
-
-				ret = intel_pmc_core_ipc(&tmp, buf);
-				if (ret < 0)
-					goto pmc_read_error;
-			}
+			ret = intel_set_reg_access(pid_modphy3_1g_regs,
+						   ARRAY_SIZE(pid_modphy3_1g_regs));
 		}
 	}
 
+	if (ret < 0)
+		goto pmc_read_error;
+
 pmc_read_error:
 	intel_serdes_powerdown(ndev, intel_priv);
 	intel_serdes_powerup(ndev, intel_priv);
@@ -723,6 +706,8 @@ static int intel_mgbe_common_data(struct pci_dev *pdev,
 static int ehl_common_data(struct pci_dev *pdev,
 			   struct plat_stmmacenet_data *plat)
 {
+	struct intel_priv_data *intel_priv = plat->bsp_priv;
+
 	plat->rx_queues_to_use = 8;
 	plat->tx_queues_to_use = 8;
 	plat->use_phy_wol = 1;
@@ -737,12 +722,17 @@ static int ehl_common_data(struct pci_dev *pdev,
 	plat->safety_feat_cfg->prtyen = 0;
 	plat->safety_feat_cfg->tmouten = 0;
 
+	intel_priv->tsn_lanes = ehl_tsn_lanes;
+	intel_priv->max_tsn_lanes = ARRAY_SIZE(ehl_tsn_lanes);
+
 	return intel_mgbe_common_data(pdev, plat);
 }
 
 static int ehl_sgmii_data(struct pci_dev *pdev,
 			  struct plat_stmmacenet_data *plat)
 {
+	struct intel_priv_data *intel_priv = plat->bsp_priv;
+
 	plat->bus_id = 1;
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
 	plat->max_speed = SPEED_2500;
@@ -757,6 +747,8 @@ static int ehl_sgmii_data(struct pci_dev *pdev,
 	    pdev->revision == PCI_PCH_B0)
 		plat->dma_cfg->pch_intr_wa = 1;
 
+	intel_priv->pid_modphy = PID_MODPHY3;
+
 	return ehl_common_data(pdev, plat);
 }
 
@@ -822,11 +814,16 @@ static struct stmmac_pci_info ehl_pse0_rgmii1g_info = {
 static int ehl_pse0_sgmii1g_data(struct pci_dev *pdev,
 				 struct plat_stmmacenet_data *plat)
 {
+	struct intel_priv_data *intel_priv = plat->bsp_priv;
+
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
 	plat->max_speed = SPEED_2500;
 	plat->serdes_powerup = intel_serdes_powerup;
 	plat->serdes_powerdown = intel_serdes_powerdown;
 	plat->config_serdes = intel_config_serdes;
+
+	intel_priv->pid_modphy = PID_MODPHY1;
+
 	return ehl_pse0_common_data(pdev, plat);
 }
 
@@ -872,11 +869,16 @@ static struct stmmac_pci_info ehl_pse1_rgmii1g_info = {
 static int ehl_pse1_sgmii1g_data(struct pci_dev *pdev,
 				 struct plat_stmmacenet_data *plat)
 {
+	struct intel_priv_data *intel_priv = plat->bsp_priv;
+
 	plat->phy_interface = PHY_INTERFACE_MODE_SGMII;
 	plat->max_speed = SPEED_2500;
 	plat->serdes_powerup = intel_serdes_powerup;
 	plat->serdes_powerdown = intel_serdes_powerdown;
 	plat->config_serdes = intel_config_serdes;
+
+	intel_priv->pid_modphy = PID_MODPHY1;
+
 	return ehl_pse1_common_data(pdev, plat);
 }
 
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.h b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.h
index 0475ced8b89e..f4a8bb89bff8 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-intel.h
@@ -56,29 +56,32 @@
 #define PCI_PCH_A1 0x01
 #define PCI_PCH_B0 0x10
 
+#define	PID_MODPHY1 0xAA
+#define	PID_MODPHY3 0xA8
+
 #if IS_ENABLED(CONFIG_INTEL_PMC_CORE)
 struct pmc_serdes_regs {
 	u8 index;
 	u32 val;
 };
 
-/* Modphy Register */
-#define R_PCH_FIA_15_PCR_LOS1_REG_BASE		8
-#define R_PCH_FIA_15_PCR_LOS2_REG_BASE		9
-#define R_PCH_FIA_15_PCR_LOS3_REG_BASE		10
-#define R_PCH_FIA_15_PCR_LOS4_REG_BASE		11
-#define R_PCH_FIA_15_PCR_LOS5_REG_BASE		12
-#define B_PCH_FIA_PCR_L0O			GENMASK(3, 0)
-#define PSE_B_MODPHY_PCR_LCPLL_DWORD0		13
-#define PSE_N_MODPHY_PCR_LCPLL_DWORD2		14
-#define PSE_N_MODPHY_PCR_LCPLL_DWORD7		15
-#define PSE_N_MODPHY_PCR_LPPLL_DWORD10		16
-#define PSE_N_MODPHY_PCR_CMN_ANA_DWORD30	17
-#define PCH_B_MODPHY_PCR_LCPLL_DWORD0		18
-#define PCH_N_MODPHY_PCR_LCPLL_DWORD2		19
-#define PCH_N_MODPHY_PCR_LCPLL_DWORD7		20
-#define PCH_N_MODPHY_PCR_LPPLL_DWORD10		21
-#define PCH_N_MODPHY_PCR_CMN_ANA_DWORD30	22
+/* Modphy Register index */
+#define R_PCH_FIA_15_PCR_LOS1_REG_BASE			8
+#define R_PCH_FIA_15_PCR_LOS2_REG_BASE			9
+#define R_PCH_FIA_15_PCR_LOS3_REG_BASE			10
+#define R_PCH_FIA_15_PCR_LOS4_REG_BASE			11
+#define R_PCH_FIA_15_PCR_LOS5_REG_BASE			12
+#define B_PCH_FIA_PCR_L0O				GENMASK(3, 0)
+#define PID_MODPHY1_B_MODPHY_PCR_LCPLL_DWORD0		13
+#define PID_MODPHY1_N_MODPHY_PCR_LCPLL_DWORD2		14
+#define PID_MODPHY1_N_MODPHY_PCR_LCPLL_DWORD7		15
+#define PID_MODPHY1_N_MODPHY_PCR_LPPLL_DWORD10		16
+#define PID_MODPHY1_N_MODPHY_PCR_CMN_ANA_DWORD30	17
+#define PID_MODPHY3_B_MODPHY_PCR_LCPLL_DWORD0		18
+#define PID_MODPHY3_N_MODPHY_PCR_LCPLL_DWORD2		19
+#define PID_MODPHY3_N_MODPHY_PCR_LCPLL_DWORD7		20
+#define PID_MODPHY3_N_MODPHY_PCR_LPPLL_DWORD10		21
+#define PID_MODPHY3_N_MODPHY_PCR_CMN_ANA_DWORD30	22
 
 #define B_MODPHY_PCR_LCPLL_DWORD0_1G		0x46AAAA41
 #define N_MODPHY_PCR_LCPLL_DWORD2_1G		0x00000139
@@ -91,41 +94,48 @@ struct pmc_serdes_regs {
 #define N_MODPHY_PCR_LPPLL_DWORD10_2P5G		0x00170008
 #define N_MODPHY_PCR_CMN_ANA_DWORD30_2P5G	0x8200ACAC
 
-static const struct pmc_serdes_regs pch_1g_regs[] = {
-	{ PCH_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_1G },
-	{ PCH_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_1G },
-	{ PCH_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_1G },
-	{ PCH_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_1G },
-	{ PCH_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_1G },
+static const struct pmc_serdes_regs pid_modphy3_1g_regs[] = {
+	{ PID_MODPHY3_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_1G },
+	{ PID_MODPHY3_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_1G },
+	{ PID_MODPHY3_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_1G },
+	{ PID_MODPHY3_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_1G },
+	{ PID_MODPHY3_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_1G },
 	{}
 };
 
-static const struct pmc_serdes_regs pch_2p5g_regs[] = {
-	{ PCH_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_2P5G },
-	{ PCH_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_2P5G },
-	{ PCH_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_2P5G },
-	{ PCH_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_2P5G },
-	{ PCH_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_2P5G },
+static const struct pmc_serdes_regs pid_modphy3_2p5g_regs[] = {
+	{ PID_MODPHY3_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_2P5G },
+	{ PID_MODPHY3_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_2P5G },
+	{ PID_MODPHY3_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_2P5G },
+	{ PID_MODPHY3_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_2P5G },
+	{ PID_MODPHY3_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_2P5G },
 	{}
 };
 
-static const struct pmc_serdes_regs pse_1g_regs[] = {
-	{ PSE_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_1G },
-	{ PSE_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_1G },
-	{ PSE_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_1G },
-	{ PSE_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_1G },
-	{ PSE_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_1G },
+static const struct pmc_serdes_regs pid_modphy1_1g_regs[] = {
+	{ PID_MODPHY1_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_1G },
+	{ PID_MODPHY1_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_1G },
+	{ PID_MODPHY1_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_1G },
+	{ PID_MODPHY1_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_1G },
+	{ PID_MODPHY1_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_1G },
 	{}
 };
 
-static const struct pmc_serdes_regs pse_2p5g_regs[] = {
-	{ PSE_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_2P5G },
-	{ PSE_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_2P5G },
-	{ PSE_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_2P5G },
-	{ PSE_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_2P5G },
-	{ PSE_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_2P5G },
+static const struct pmc_serdes_regs pid_modphy1_2p5g_regs[] = {
+	{ PID_MODPHY1_B_MODPHY_PCR_LCPLL_DWORD0,	B_MODPHY_PCR_LCPLL_DWORD0_2P5G },
+	{ PID_MODPHY1_N_MODPHY_PCR_LCPLL_DWORD2,	N_MODPHY_PCR_LCPLL_DWORD2_2P5G },
+	{ PID_MODPHY1_N_MODPHY_PCR_LCPLL_DWORD7,	N_MODPHY_PCR_LCPLL_DWORD7_2P5G },
+	{ PID_MODPHY1_N_MODPHY_PCR_LPPLL_DWORD10,	N_MODPHY_PCR_LPPLL_DWORD10_2P5G },
+	{ PID_MODPHY1_N_MODPHY_PCR_CMN_ANA_DWORD30,	N_MODPHY_PCR_CMN_ANA_DWORD30_2P5G },
 	{}
 };
+
+static const int ehl_tsn_lanes[] = {7, 8, 9, 10, 11};
+
+#else
+
+static const int ehl_tsn_lanes[] = {};
+
 #endif /* CONFIG_INTEL_PMC_CORE */
 
 #endif /* __DWMAC_INTEL_H__ */
-- 
2.25.1

