From 4732275068d82d2f0fcad07c9e041cc272497a9a Mon Sep 17 00:00:00 2001
From: zouxiaoh <xiaohong.zou@intel.com>
Date: Thu, 18 Jan 2024 11:10:05 +0800
Subject: [PATCH 07/23] media: ipu6: use 64-bit for mapping address

Change Description:
use 64-bit type u64, unsigned long, for mapping address,
it's consist with the related definitions in kernel.

Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/media/pci/intel/ipu-dma.c | 4 ++--
 drivers/media/pci/intel/ipu-mmu.c | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/intel/ipu-dma.c b/drivers/media/pci/intel/ipu-dma.c
index d37762cb7841..94c15fac7f1d 100644
--- a/drivers/media/pci/intel/ipu-dma.c
+++ b/drivers/media/pci/intel/ipu-dma.c
@@ -396,7 +396,7 @@ static int ipu_dma_map_sg(struct device *dev, struct scatterlist *sglist,
 	struct scatterlist *sg;
 	struct iova *iova;
 	size_t npages = 0;
-	u32 iova_addr;
+	unsigned long iova_addr;
 	int i, count;
 
 	dev_dbg(dev, "pci_dma_map_sg trying to map %d ents\n", nents);
@@ -424,7 +424,7 @@ static int ipu_dma_map_sg(struct device *dev, struct scatterlist *sglist,
 		int rval;
 
 		dev_dbg(dev, "mapping entry %d: iova 0x%lx phy %pad size %d\n",
-			i, (unsigned long)iova_addr << PAGE_SHIFT,
+			i, iova_addr << PAGE_SHIFT,
 			&sg_dma_address(sg), sg_dma_len(sg));
 
 		dev_dbg(dev, "mapping entry %d: sg->length = %d\n", i,
diff --git a/drivers/media/pci/intel/ipu-mmu.c b/drivers/media/pci/intel/ipu-mmu.c
index 7d38529820b1..29b270e12b64 100644
--- a/drivers/media/pci/intel/ipu-mmu.c
+++ b/drivers/media/pci/intel/ipu-mmu.c
@@ -376,7 +376,7 @@ static int allocate_trash_buffer(struct ipu_mmu *mmu)
 {
 	unsigned int n_pages = PAGE_ALIGN(IPU_MMUV2_TRASH_RANGE) >> PAGE_SHIFT;
 	struct iova *iova;
-	u32 iova_addr;
+	unsigned long iova_addr;
 	unsigned int i;
 	dma_addr_t dma;
 	int ret;
@@ -785,7 +785,7 @@ static void ipu_mmu_destroy(struct ipu_mmu *mmu)
 	}
 
 	free_dummy_page(mmu_info);
-	dma_unmap_single(mmu_info->dev, mmu_info->l1_pt_dma << ISP_PADDR_SHIFT,
+	dma_unmap_single(mmu_info->dev, TBL_PHYS_ADDR(mmu_info->l1_pt_dma),
 			 PAGE_SIZE, DMA_BIDIRECTIONAL);
 	free_page((unsigned long)mmu_info->dummy_l2_pt);
 	free_page((unsigned long)mmu_info->l1_pt);
-- 
2.25.1

