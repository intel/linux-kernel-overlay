From 1c276d4cc609c12614fc09bf7d49a12f4ffedd68 Mon Sep 17 00:00:00 2001
From: KhaiWenTan <khai.wen.tan@intel.com>
Date: Thu, 5 Sep 2024 11:19:29 +0800
Subject: [PATCH 29/35] net: stmmac: Fix zero-division error when disabling tc
 cbs

The commit a71b686418ee ("net: stmmac: No need to calculate speed divider
when offload is disabled") allows the "port_transmit_rate_kbps" to be
set to a value of 0, which is then passed to the "div_s64" function when
tc-cbs is disabled. This leads to a zero-division error.

When tc-cbs is disabled, the idleslope, sendslope, and credit values the
credit values are not required to be configured. Therefore, adding a return
statement after setting the txQ mode to DCB when tc-cbs is disabled would
prevent a zero-division error.

Fixes: a71b686418ee ("net: stmmac: No need to calculate speed divider when offload is disabled")
Signed-off-by: KhaiWenTan <khai.wen.tan@intel.com>
Signed-off-by: Choong, Yong Liang <yong.liang.choong@intel.com>
---
 drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
index 996f2bcd07a2..2c3fd9c66d14 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_tc.c
@@ -392,10 +392,10 @@ static int tc_setup_cbs(struct stmmac_priv *priv,
 	} else if (!qopt->enable) {
 		ret = stmmac_dma_qmode(priv, priv->ioaddr, queue,
 				       MTL_QUEUE_DCB);
-		if (ret)
-			return ret;
+		if (!ret)
+			priv->plat->tx_queues_cfg[queue].mode_to_use = MTL_QUEUE_DCB;
 
-		priv->plat->tx_queues_cfg[queue].mode_to_use = MTL_QUEUE_DCB;
+		return ret;
 	}
 
 	/* Final adjustments for HW */
-- 
2.25.1

