From b41d5e38e153e14796ab61d8c8562d8253b50c17 Mon Sep 17 00:00:00 2001
From: Alan Previn <alan.previn.teres.alexis@intel.com>
Date: Mon, 6 Feb 2023 13:44:34 -0800
Subject: [PATCH 152/184] drm/i915/pxp/mtl:[PXP-MULTI] Hook up client's
 termination to GSCCS + Enable MTL.

When multi-session clients are terminating their slots or if
their file handles are closed, we need to call terminate session.

Hook up MTL's terminate session through the GSCCS engine. Take note
that for MTL, although other PXP commands use FW API version 4.3,
session termination continues to use FW API version 4.2

Always check for active sessions and terminate the sessions for the
client that is closing as we cannot trust user-space to guarantee
keeping i915 coherent with GSC-firmware side.

With MTL GSCCS backend now hooked up for client resource management,
sending messages to GSC-firmware and multi-session termination,
start enabling MTL multi-session.

   v2: Enable MTL multi-session at this patch since sufficient backend
       functionality is in place for session lifecycle operation.

Signed-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>
Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
---
 drivers/gpu/drm/i915/pxp/intel_pxp.c         |  3 ---
 drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c   | 12 +++++++++++-
 drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h   |  3 ++-
 drivers/gpu/drm/i915/pxp/intel_pxp_session.c |  9 +++++----
 4 files changed, 18 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp.c b/drivers/gpu/drm/i915/pxp/intel_pxp.c
index 6c5e6e05d07e..4f21651c1dd7 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp.c
@@ -704,9 +704,6 @@ int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmf
 	if (!intel_pxp_is_enabled(pxp))
 		return -ENODEV;
 
-	if (HAS_ENGINE(pxp->ctrl_gt, GSC0))
-		return -ENODEV;
-
 	wakeref = intel_runtime_pm_get_if_in_use(&i915->runtime_pm);
 	if (!wakeref) {
 		drm_dbg(&i915->drm, "pxp ioctl blocked due to state in suspend\n");
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c
index 6359596209a3..6d8fade52f22 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.c
@@ -404,7 +404,7 @@ int intel_pxp_gsccs_create_session(struct intel_pxp *pxp,
 	return ret;
 }
 
-void intel_pxp_gsccs_end_arb_fw_session(struct intel_pxp *pxp, u32 session_id)
+static void intel_pxp_gsccs_end_one_fw_session(struct intel_pxp *pxp, u32 session_id)
 {
 	struct drm_i915_private *i915 = pxp->ctrl_gt->i915;
 	struct pxp42_inv_stream_key_in msg_in = {0};
@@ -475,6 +475,16 @@ gsccs_destroy_execution_resource(struct intel_pxp *pxp, struct gsccs_session_res
 	memset(exec_res, 0, sizeof(*exec_res));
 }
 
+void intel_pxp_gsccs_end_fw_sessions(struct intel_pxp *pxp, u32 sessions_mask)
+{
+	int n;
+
+	for (n = 0; n < INTEL_PXP_MAX_HWDRM_SESSIONS; ++n) {
+		if (sessions_mask & BIT(n))
+			intel_pxp_gsccs_end_one_fw_session(pxp, n);
+	}
+}
+
 static int
 gsccs_create_buffer(struct intel_gt *gt,
 		    struct i915_address_space *vm,
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h
index c1a288c671dc..0b2accaaf806 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_gsccs.h
@@ -23,7 +23,6 @@ void intel_pxp_gsccs_fini(struct intel_pxp *pxp);
 int intel_pxp_gsccs_init(struct intel_pxp *pxp);
 
 int intel_pxp_gsccs_create_session(struct intel_pxp *pxp, int arb_session_id);
-void intel_pxp_gsccs_end_arb_fw_session(struct intel_pxp *pxp, u32 arb_session_id);
 
 void intel_gsccs_free_client_resources(struct intel_pxp *pxp,
 				       struct drm_file *drmfile);
@@ -35,6 +34,8 @@ intel_pxp_gsccs_client_io_msg(struct intel_pxp *pxp, struct drm_file *drmfile,
 			      void *msg_out, size_t msg_out_size_max,
 			      u32 *msg_out_len);
 
+void intel_pxp_gsccs_end_fw_sessions(struct intel_pxp *pxp, u32 sessions_mask);
+
 #else
 static inline void intel_pxp_gsccs_fini(struct intel_pxp *pxp)
 {
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
index d78e2b4b5401..bcdabc93b036 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
@@ -380,7 +380,9 @@ int intel_pxp_terminate_session(struct intel_pxp *pxp, u32 id)
 	if (ret)
 		drm_dbg(&pxp->ctrl_gt->i915->drm, "Session state-%d did not clear\n", id);
 
-	if (!HAS_ENGINE(pxp->ctrl_gt, GSC0))
+	if (HAS_ENGINE(pxp->ctrl_gt, GSC0))
+		intel_pxp_gsccs_end_fw_sessions(pxp, BIT(id));
+	else
 		intel_pxp_tee_end_fw_sessions(pxp, BIT(id));
 
 	return ret;
@@ -455,9 +457,8 @@ static int pxp_terminate_all_sessions_and_global(struct intel_pxp *pxp)
 
 	intel_uncore_write(gt->uncore, KCR_GLOBAL_TERMINATE(pxp->kcr_base), 1);
 
-	/* muti-session support not yet enabled for GSCCS */
-	if (HAS_ENGINE(gt, GSC0) && (active_sip_slots & BIT(ARB_SESSION)))
-		intel_pxp_gsccs_end_arb_fw_session(pxp, ARB_SESSION);
+	if (HAS_ENGINE(gt, GSC0))
+		intel_pxp_gsccs_end_fw_sessions(pxp, active_sip_slots);
 	else
 		intel_pxp_tee_end_fw_sessions(pxp, active_sip_slots);
 
-- 
2.25.1

