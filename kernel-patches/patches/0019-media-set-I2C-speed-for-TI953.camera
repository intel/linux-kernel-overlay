From cad04e0f877a35d11133376eec59ec727b742630 Mon Sep 17 00:00:00 2001
From: zouxiaoh <xiaohong.zou@intel.com>
Date: Thu, 18 Jan 2024 11:10:37 +0800
Subject: [PATCH 19/23] media: set I2C speed for TI953

Change Description:
detect slave addr and set I2C speed for TI953.

Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/media/i2c/ti953-ser.c | 60 ++++++++++++++++++++++++++++++++---
 drivers/media/i2c/ti953.h     | 14 ++++++++
 drivers/media/i2c/ti960-des.c | 24 ++++++++++++++
 3 files changed, 94 insertions(+), 4 deletions(-)

diff --git a/drivers/media/i2c/ti953-ser.c b/drivers/media/i2c/ti953-ser.c
index 8d0399c818bb..b9686b900382 100644
--- a/drivers/media/i2c/ti953-ser.c
+++ b/drivers/media/i2c/ti953-ser.c
@@ -53,18 +53,20 @@ int ti953_reg_write(struct v4l2_subdev *sd, unsigned short rx_port,
 int ti953_reg_read(struct v4l2_subdev *sd, unsigned short rx_port,
 	unsigned short ser_alias, unsigned char reg, unsigned char *val)
 {
-	int retry, timeout = 10;
+	int ret, retry, timeout = 10;
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	unsigned short addr_backup;
 
 	addr_backup = client->addr;
 	client->addr = ser_alias;
 	for (retry = 0; retry < timeout; retry++) {
-		*val = i2c_smbus_read_byte_data(client, reg);
-		if (*val < 0)
+		ret = i2c_smbus_read_byte_data(client, reg);
+		if (ret < 0)
 			usleep_range(5000, 6000);
-		else
+		else {
+			*val = ret & 0xFF;
 			break;
+		}
 	}
 
 	client->addr = addr_backup;
@@ -139,3 +141,53 @@ int ti953_init_clk(struct v4l2_subdev *sd, unsigned short rx_port, unsigned shor
 
 	return 0;
 }
+
+int32_t ti953_bus_speed(struct v4l2_subdev *sd, uint16_t rx_port, uint16_t ser_alias, uint8_t i2c_speed)
+{
+	struct ti953_register_write scl_high_reg;
+	struct ti953_register_write scl_low_reg;
+	int32_t ret = 0;
+
+	scl_high_reg.reg = TI953_SCL_HIGH_TIME;
+	scl_low_reg.reg = TI953_SCL_LOW_TIME;
+	switch (i2c_speed) {
+	case TI953_I2C_SPEED_STANDARD:
+		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_STANDARD;
+		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_STANDARD;
+		break;
+	case TI953_I2C_SPEED_FAST:
+		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_FAST;
+		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_FAST;
+		break;
+	case TI953_I2C_SPEED_FAST_PLUS:
+		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_FAST_PLUS;
+		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_FAST_PLUS;
+		break;
+	case TI953_I2C_SPEED_HIGH:
+	default:
+		dev_err(sd->dev, "port %u, ti953 unsupported I2C speed mode %u",
+			rx_port, i2c_speed);
+		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_STANDARD;
+		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_STANDARD;
+		ret = -EINVAL;
+		break;
+	}
+	if (ret != 0)
+		return ret;
+	ret = ti953_reg_write(sd, rx_port, ser_alias,
+			      scl_high_reg.reg, scl_high_reg.val);
+	if (ret != 0) {
+		dev_err(sd->dev, "port %u, ti953 write SCL_HIGH_TIME failed %d",
+			rx_port, ret);
+		return ret;
+	}
+	ret = ti953_reg_write(sd, rx_port, ser_alias,
+			      scl_low_reg.reg, scl_low_reg.val);
+	if (ret != 0) {
+		dev_err(sd->dev, "port %u, ti953 write SCL_LOW_TIME failed %d",
+			rx_port, ret);
+		return ret;
+	}
+
+	return 0;
+}
diff --git a/drivers/media/i2c/ti953.h b/drivers/media/i2c/ti953.h
index 545bba0a75fb..a47299ef10bf 100644
--- a/drivers/media/i2c/ti953.h
+++ b/drivers/media/i2c/ti953.h
@@ -18,6 +18,8 @@ struct ti953_register_devid {
 #define TI953_RESET_CTL		0x1
 #define TI953_LOCAL_GPIO_DATA	0xd
 #define TI953_GPIO_INPUT_CTRL	0xe
+#define TI953_SCL_HIGH_TIME		0xbU
+#define TI953_SCL_LOW_TIME		0xcU
 
 /* register value definition */
 #define TI953_DIGITAL_RESET_1	0x2
@@ -25,6 +27,17 @@ struct ti953_register_devid {
 #define TI953_GPIO0_OUT		0x1
 #define TI953_GPIO1_OUT		(0x1 << 1)
 #define TI953_GPIO_OUT_EN	0xf0
+#define TI953_I2C_SCL_HIGH_TIME_STANDARD	0x7F
+#define TI953_I2C_SCL_LOW_TIME_STANDARD		0x7F
+#define TI953_I2C_SCL_HIGH_TIME_FAST		0x13
+#define TI953_I2C_SCL_LOW_TIME_FAST		0x26
+#define TI953_I2C_SCL_HIGH_TIME_FAST_PLUS	0x06
+#define TI953_I2C_SCL_LOW_TIME_FAST_PLUS	0x0b
+
+#define TI953_I2C_SPEED_STANDARD	0x1U
+#define TI953_I2C_SPEED_FAST		0x2U
+#define TI953_I2C_SPEED_HIGH		0x3U
+#define TI953_I2C_SPEED_FAST_PLUS	0x4U
 
 static const struct ti953_register_write ti953_init_settings[] = {
 	{0x4c, 0x01}, /* ox03a10 init sequence */
@@ -118,5 +131,6 @@ bool ti953_detect(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short
 
 int ti953_init(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias);
 int ti953_init_clk(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias);
+int32_t ti953_bus_speed(struct v4l2_subdev *sd, uint16_t rx_port, uint16_t ser_alias, uint8_t i2c_speed);
 
 #endif
diff --git a/drivers/media/i2c/ti960-des.c b/drivers/media/i2c/ti960-des.c
index 1a03bf27a5da..f838aba0f924 100644
--- a/drivers/media/i2c/ti960-des.c
+++ b/drivers/media/i2c/ti960-des.c
@@ -621,6 +621,8 @@ static int ti960_registered(struct v4l2_subdev *subdev)
 	struct i2c_client *client = v4l2_get_subdevdata(subdev);
 	int i, j, k, l, m, rval;
 	bool port_registered[NR_OF_TI960_SINK_PADS];
+	bool speed_detect_fail;
+	unsigned char val;
 
 	for (i = 0 ; i < NR_OF_TI960_SINK_PADS; i++)
 		port_registered[i] = false;
@@ -718,6 +720,28 @@ static int ti960_registered(struct v4l2_subdev *subdev)
 		if (rval)
 			return rval;
 
+		ti953_bus_speed(&va->sd, info->rx_port, info->ser_alias,
+				TI953_I2C_SPEED_FAST_PLUS);
+		speed_detect_fail =
+			ti953_reg_read(&va->sd, info->rx_port,
+				       info->board_info.addr, 0, &val);
+		if (speed_detect_fail) {
+			ti953_bus_speed(&va->sd, info->rx_port, info->ser_alias,
+					TI953_I2C_SPEED_FAST);
+			speed_detect_fail =
+				ti953_reg_read(&va->sd, info->rx_port,
+					       info->board_info.addr, 0, &val);
+		}
+		if (speed_detect_fail) {
+			ti953_bus_speed(&va->sd, info->rx_port, info->ser_alias,
+					TI953_I2C_SPEED_STANDARD);
+			speed_detect_fail =
+				ti953_reg_read(&va->sd, info->rx_port,
+					       info->board_info.addr, 0, &val);
+		}
+		if (speed_detect_fail)
+			dev_err(va->sd.dev, "i2c bus speed standard failed!");
+
 		va->sub_devs[k].sd = v4l2_i2c_new_subdev_board(
 			va->sd.v4l2_dev, client->adapter,
 			&info->board_info, 0);
-- 
2.25.1

