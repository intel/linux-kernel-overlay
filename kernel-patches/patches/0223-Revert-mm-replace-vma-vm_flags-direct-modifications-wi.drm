From 8566f1a80fe4643ea5b34425a30d88004e2de868 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Winiarski?= <michal.winiarski@intel.com>
Date: Fri, 12 May 2023 00:48:54 +0200
Subject: [PATCH 223/333] Revert "mm: replace vma->vm_flags direct
 modifications with modifier calls"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This is a partial revert of 1c71222e5f2393b5ea1a41795c67589eea7e3490.
We're only reverting minimal subset needed to avoid lockdep warning
caused by not following proper locking by VFIO.
This commit should be removed when proper upstream fix is available.

References: https://lore.kernel.org/lkml/20230508125842.28193-1-yan.y.zhao@intel.com/
Signed-off-by: Micha≈Ç Winiarski <michal.winiarski@intel.com>
---
 arch/x86/mm/pat/memtype.c        | 2 +-
 drivers/vfio/pci/vfio_pci_core.c | 2 +-
 mm/memory.c                      | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/arch/x86/mm/pat/memtype.c b/arch/x86/mm/pat/memtype.c
index de10800cd4dd..9b7c653d6994 100644
--- a/arch/x86/mm/pat/memtype.c
+++ b/arch/x86/mm/pat/memtype.c
@@ -999,7 +999,7 @@ int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
 
 		ret = reserve_pfn_range(paddr, size, prot, 0);
 		if (ret == 0 && vma)
-			vm_flags_set(vma, VM_PAT);
+			ACCESS_PRIVATE(vma, __vm_flags) |= VM_PAT;
 		return ret;
 	}
 
diff --git a/drivers/vfio/pci/vfio_pci_core.c b/drivers/vfio/pci/vfio_pci_core.c
index 1929103ee59a..2b9a122128dc 100644
--- a/drivers/vfio/pci/vfio_pci_core.c
+++ b/drivers/vfio/pci/vfio_pci_core.c
@@ -1863,7 +1863,7 @@ int vfio_pci_core_mmap(struct vfio_device *core_vdev, struct vm_area_struct *vma
 	 * See remap_pfn_range(), called from vfio_pci_fault() but we can't
 	 * change vm_flags within the fault handler.  Set them now.
 	 */
-	vm_flags_set(vma, VM_IO | VM_PFNMAP | VM_DONTEXPAND | VM_DONTDUMP);
+	ACCESS_PRIVATE(vma, __vm_flags) |= VM_IO | VM_PFNMAP | VM_DONTEXPAND | VM_DONTDUMP;
 	vma->vm_ops = &vfio_pci_mmap_ops;
 
 	return 0;
diff --git a/mm/memory.c b/mm/memory.c
index 517221f01303..c0b2e7c67dc2 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -2464,7 +2464,7 @@ int remap_pfn_range_notrack(struct vm_area_struct *vma, unsigned long addr,
 		vma->vm_pgoff = pfn;
 	}
 
-	vm_flags_set(vma, VM_IO | VM_PFNMAP | VM_DONTEXPAND | VM_DONTDUMP);
+	ACCESS_PRIVATE(vma, __vm_flags) |= VM_IO | VM_PFNMAP | VM_DONTEXPAND | VM_DONTDUMP;
 
 	BUG_ON(addr >= end);
 	pfn -= addr >> PAGE_SHIFT;
-- 
2.42.0

