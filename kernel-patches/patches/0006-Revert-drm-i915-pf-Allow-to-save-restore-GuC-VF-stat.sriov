From 5e95f875677b883b4e2215495e251d17db71348c Mon Sep 17 00:00:00 2001
From: "Zawawi, Muhammad Zul Husni" <muhammad.zul.husni.zawawi@intel.com>
Date: Fri, 13 Sep 2024 11:08:12 +0800
Subject: [PATCH 06/25] Revert "drm/i915/pf: Allow to save/restore GuC VF
 state"

This reverts commit 93e89b37890d545e86abe0b03b27fcb3bc2c68e5.
---
 drivers/gpu/drm/i915/gt/iov/intel_iov_state.c | 151 ------------------
 drivers/gpu/drm/i915/gt/iov/intel_iov_state.h |   2 -
 drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c |  45 ------
 .../drm/i915/gt/uc/abi/guc_actions_pf_abi.h   |  55 -------
 4 files changed, 253 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
index f6f5ac6df8a3..b557abc48208 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
@@ -618,154 +618,3 @@ int intel_iov_state_restore_ggtt(struct intel_iov *iov, u32 vfid, const void *bu
 
 	return ret;
 }
-
-static int guc_action_save_restore_vf(struct intel_guc *guc, u32 vfid, u32 opcode, u64 offset)
-{
-	u32 request[PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_LEN] = {
-		FIELD_PREP(GUC_HXG_MSG_0_ORIGIN, GUC_HXG_ORIGIN_HOST) |
-		FIELD_PREP(GUC_HXG_MSG_0_TYPE, GUC_HXG_TYPE_REQUEST) |
-		FIELD_PREP(GUC_HXG_REQUEST_MSG_0_ACTION, GUC_ACTION_PF2GUC_SAVE_RESTORE_VF) |
-		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_0_OPCODE, opcode),
-		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_1_VFID, vfid),
-		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_2_BUFF_LO, lower_32_bits(offset)),
-		FIELD_PREP(PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_3_BUFF_HI, upper_32_bits(offset)),
-	};
-	int ret;
-
-	ret = intel_guc_send(guc, request, ARRAY_SIZE(request));
-
-	return ret > PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE ? -EPROTO : ret;
-}
-
-static int pf_save_vf(struct intel_iov *iov, u32 vfid, void *buf)
-{
-	struct intel_guc *guc = iov_to_guc(iov);
-	struct i915_vma *vma;
-	void *blob;
-	int ret;
-
-	GEM_BUG_ON(!intel_iov_is_pf(iov));
-	GEM_BUG_ON(vfid > pf_get_totalvfs(iov));
-	GEM_BUG_ON(!vfid);
-
-	ret = intel_guc_allocate_and_map_vma(guc, PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE,
-					     &vma, (void **)&blob);
-	if (unlikely(ret))
-		goto failed;
-
-	ret = guc_action_save_restore_vf(guc, vfid, GUC_PF_OPCODE_VF_SAVE,
-					 intel_guc_ggtt_offset(guc, vma));
-
-	if (likely(ret > 0)) {
-		memcpy(buf, blob, PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE);
-
-		if (IS_ENABLED(CONFIG_DRM_I915_SELFTEST) &&
-		    memchr_inv(buf + ret, 0, PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE - ret)) {
-			pr_err("non-zero state found beyond offset %d!\n", ret);
-		}
-	}
-
-	i915_vma_unpin_and_release(&vma, I915_VMA_RELEASE_MAP);
-
-	if (unlikely(ret < 0))
-		goto failed;
-
-	IOV_DEBUG(iov, "VF%u: state saved (%d bytes) %*ph ..\n",
-		  vfid, ret, min_t(int, 16, ret), buf);
-	return 0;
-
-failed:
-	IOV_ERROR(iov, "Failed to save VF%u state (%pe)\n", vfid, ERR_PTR(ret));
-	return ret;
-}
-
-/**
- * intel_iov_state_save_vf - Save VF state.
- * @iov: the IOV struct
- * @vfid: VF identifier
- * @buf: buffer to save VF state (must be at least 4K)
- * @size: size of the buffer
- *
- * This function is for PF only.
- *
- * Return: 0 on success or a negative error code on failure.
- */
-int intel_iov_state_save_vf(struct intel_iov *iov, u32 vfid, void *buf, size_t size)
-{
-	struct intel_runtime_pm *rpm = iov_to_gt(iov)->uncore->rpm;
-	intel_wakeref_t wakeref;
-	int err = -ENONET;
-
-	if (size < PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE)
-		return -EINVAL;
-
-	with_intel_runtime_pm(rpm, wakeref)
-		err = pf_save_vf(iov, vfid, buf);
-
-	return err;
-}
-
-static int pf_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf)
-{
-	struct intel_guc *guc = iov_to_guc(iov);
-	struct i915_vma *vma;
-	void *blob;
-	int ret;
-
-	GEM_BUG_ON(!intel_iov_is_pf(iov));
-	GEM_BUG_ON(vfid > pf_get_totalvfs(iov));
-	GEM_BUG_ON(!vfid);
-
-	ret = intel_guc_allocate_and_map_vma(guc, PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE,
-					     &vma, (void **)&blob);
-	if (unlikely(ret < 0))
-		goto failed;
-
-	memcpy(blob, buf, PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE);
-
-	ret = guc_action_save_restore_vf(guc, vfid, GUC_PF_OPCODE_VF_RESTORE,
-					 intel_guc_ggtt_offset(guc, vma));
-
-	i915_vma_unpin_and_release(&vma, I915_VMA_RELEASE_MAP);
-
-	if (unlikely(ret < 0))
-		goto failed;
-
-	IOV_DEBUG(iov, "VF%u: state restored (%u bytes) %*ph\n",
-		  vfid, ret, min_t(int, 16, ret), buf);
-	return 0;
-
-failed:
-	IOV_ERROR(iov, "Failed to restore VF%u state (%pe) %*ph\n",
-		  vfid, ERR_PTR(ret), 16, buf);
-	return ret;
-}
-
-/**
- * intel_iov_state_restore_vf - Restore VF state.
- * @iov: the IOV struct
- * @vfid: VF identifier
- * @buf: buffer with VF state to restore (must be 4K)
- * @size: size of the buffer
- *
- * This function is for PF only.
- *
- * Return: 0 on success or a negative error code on failure.
- */
-int intel_iov_state_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf, size_t size)
-{
-	struct intel_runtime_pm *rpm = iov_to_gt(iov)->uncore->rpm;
-	intel_wakeref_t wakeref;
-	int err = -ENONET;
-
-	if (size != PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE)
-		return -EINVAL;
-
-	with_intel_runtime_pm(rpm, wakeref)
-		err = pf_restore_vf(iov, vfid, buf);
-
-	if (err == 0)
-		iov->pf.state.data[vfid].paused = false;
-
-	return err;
-}
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
index d237aa192b71..2306f39472c7 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
@@ -22,8 +22,6 @@ int intel_iov_state_resume_vf(struct intel_iov *iov, u32 vfid);
 int intel_iov_state_stop_vf(struct intel_iov *iov, u32 vfid);
 ssize_t intel_iov_state_save_ggtt(struct intel_iov *iov, u32 vfid, void *buf, size_t size);
 int intel_iov_state_restore_ggtt(struct intel_iov *iov, u32 vfid, const void *buf, size_t size);
-int intel_iov_state_save_vf(struct intel_iov *iov, u32 vfid, void *buf, size_t size);
-int intel_iov_state_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf, size_t size);
 
 int intel_iov_state_process_guc2pf(struct intel_iov *iov,
 				   const u32 *msg, u32 len);
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c b/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c
index 2be9b4a8d57a..6f060e4d52e4 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_sysfs.c
@@ -4,7 +4,6 @@
  */
 
 #include "intel_iov_provisioning.h"
-#include "intel_iov_state.h"
 #include "intel_iov_sysfs.h"
 #include "intel_iov_types.h"
 #include "intel_iov_utils.h"
@@ -486,53 +485,9 @@ static umode_t vf_attr_is_visible(struct kobject *kobj,
 	return attr->mode;
 }
 
-static ssize_t bin_attr_state_read(struct file *filp, struct kobject *kobj,
-				   struct bin_attribute *bin_attr, char *buf,
-				   loff_t off, size_t count)
-{
-	struct intel_iov *iov = kobj_to_iov(kobj);
-	unsigned int id = kobj_to_id(kobj);
-	int err;
-
-	if (off > 0)
-		return -EINVAL;
-
-	err = intel_iov_state_save_vf(iov, id, buf, count);
-	if (unlikely(err))
-		return err;
-
-	return SZ_4K;
-}
-
-static ssize_t bin_attr_state_write(struct file *filp, struct kobject *kobj,
-				    struct bin_attribute *bin_attr, char *buf,
-				    loff_t off, size_t count)
-{
-	struct intel_iov *iov = kobj_to_iov(kobj);
-	unsigned int id = kobj_to_id(kobj);
-	int err;
-
-	if (off > 0)
-		return -EINVAL;
-
-	err = intel_iov_state_restore_vf(iov, id, buf, count);
-	if (unlikely(err))
-		return err;
-
-	return count;
-}
-
-static BIN_ATTR(state, 0600, bin_attr_state_read, bin_attr_state_write, SZ_4K);
-
-static struct bin_attribute *vf_bin_attrs[] = {
-	&bin_attr_state,
-	NULL
-};
-
 static const struct attribute_group vf_attr_group = {
 	.attrs = vf_attrs,
 	.is_visible = vf_attr_is_visible,
-	.bin_attrs = vf_bin_attrs,
 };
 
 static const struct attribute_group vf_threshold_attr_group = {
diff --git a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h
index c1f07661c6b1..be2ea953587a 100644
--- a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h
+++ b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_pf_abi.h
@@ -448,59 +448,4 @@
 #define   GUC_PF_TRIGGER_VF_FLR_START			4
 #define   GUC_PF_TRIGGER_VF_FLR_FINISH			5
 
-/**
- * DOC: PF2GUC_SAVE_RESTORE_VF
- *
- * This message is used by the PF to migrate VF info state maintained by the GuC.
- *
- * This message must be sent as `CTB HXG Message`_.
- *
- *  +---+-------+--------------------------------------------------------------+
- *  |   | Bits  | Description                                                  |
- *  +===+=======+==============================================================+
- *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_HOST_                                |
- *  |   +-------+--------------------------------------------------------------+
- *  |   | 30:28 | TYPE = GUC_HXG_TYPE_REQUEST_                                 |
- *  |   +-------+--------------------------------------------------------------+
- *  |   | 27:16 | DATA0 = **OPCODE** - operation to take:                      |
- *  |   |       |                                                              |
- *  |   |       |   - _`GUC_PF_OPCODE_VF_SAVE` = 0                             |
- *  |   |       |   - _`GUC_PF_OPCODE_VF_RESTORE` = 1                          |
- *  |   +-------+--------------------------------------------------------------+
- *  |   |  15:0 | ACTION = _`GUC_ACTION_PF2GUC_SAVE_RESTORE_VF` = 0x550B       |
- *  +---+-------+--------------------------------------------------------------+
- *  | 1 |  31:0 | DATA1 = **VFID** - VF identifier                             |
- *  +---+-------+--------------------------------------------------------------+
- *  | 2 |  31:0 | DATA2 = **BUFF_LO** - lower 32-bits of GGTT offset to the 4K |
- *  |   |       | buffer where the VF info will be save to or restored from.   |
- *  +---+-------+--------------------------------------------------------------+
- *  | 3 |  31:0 | DATA3 = **BUFF_HI** - upper 32-bits of GGTT offset to the 4K |
- *  |   |       | buffer where the VF info will be save to or restored from.   |
- *  +---+-------+--------------------------------------------------------------+
- *
- *  +---+-------+--------------------------------------------------------------+
- *  |   | Bits  | Description                                                  |
- *  +===+=======+==============================================================+
- *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_GUC_                                 |
- *  |   +-------+--------------------------------------------------------------+
- *  |   | 30:28 | TYPE = GUC_HXG_TYPE_RESPONSE_SUCCESS_                        |
- *  |   +-------+--------------------------------------------------------------+
- *  |   |  27:0 | DATA0 = **USED** - size of buffer used (in bytes)            |
- *  +---+-------+--------------------------------------------------------------+
- */
-#define GUC_ACTION_PF2GUC_SAVE_RESTORE_VF		0x550B
-
-#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_LEN		(GUC_HXG_EVENT_MSG_MIN_LEN + 3u)
-#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_0_OPCODE	GUC_HXG_EVENT_MSG_0_DATA0
-#define   GUC_PF_OPCODE_VF_SAVE				0
-#define   GUC_PF_OPCODE_VF_RESTORE			1
-#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_1_VFID	GUC_HXG_EVENT_MSG_n_DATAn
-#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_2_BUFF_LO	GUC_HXG_EVENT_MSG_n_DATAn
-#define PF2GUC_SAVE_RESTORE_VF_REQUEST_MSG_3_BUFF_HI	GUC_HXG_EVENT_MSG_n_DATAn
-
-#define PF2GUC_SAVE_RESTORE_VF_RESPONSE_MSG_LEN		GUC_HXG_RESPONSE_MSG_MIN_LEN
-#define PF2GUC_SAVE_RESTORE_VF_RESPONSE_MSG_0_USED	GUC_HXG_RESPONSE_MSG_0_DATA0
-
-#define PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE		SZ_4K
-
 #endif /* __GUC_ACTIONS_PF_ABI_H__ */
-- 
2.34.1

