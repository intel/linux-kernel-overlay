From 6977158e8425a487e4952c99eb80310471226b9f Mon Sep 17 00:00:00 2001
From: "Huang, Sean Z" <sean.z.huang@intel.com>
Date: Wed, 9 Dec 2020 21:32:56 -0800
Subject: [PATCH 2335/2351] drm/i915/pxp:[PXP-MULTI-UAPI] Implement ioctl
 action to query PXP tag

Enable the PXP ioctl action to allow userspace driver to query the
PXP tag, which is a 32-bit bitwise value indicating the current
session info, including protection type, session id, and whether
the session is enabled.

v2: Add fixes found by Google that could yield to possible
    kernel array overflow when user space is malicious or buggy.
    Reference: https://chromium-review.googlesource.com/c/chromiumos/third_party/kernel/+/4567078

Signed-off-by: Huang, Sean Z <sean.z.huang@intel.com>
Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
Reviewed by: Alan Previn <alan.previn.teres.alexis@intel.com>
Signed-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>
Reviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
---
 drivers/gpu/drm/i915/pxp/intel_pxp.c         | 35 ++++++++-
 drivers/gpu/drm/i915/pxp/intel_pxp_session.c | 80 ++++++++++++++++++--
 drivers/gpu/drm/i915/pxp/intel_pxp_session.h | 13 +++-
 drivers/gpu/drm/i915/pxp/intel_pxp_types.h   |  3 +
 include/uapi/drm/i915_drm_prelim.h           | 28 +++++++
 5 files changed, 148 insertions(+), 11 deletions(-)

diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp.c b/drivers/gpu/drm/i915/pxp/intel_pxp.c
index 92e782bffd6c0..375fca1f017c3 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp.c
@@ -263,6 +263,7 @@ void intel_pxp_fini(struct drm_i915_private *i915)
 void intel_pxp_mark_termination_in_progress(struct intel_pxp *pxp)
 {
 	pxp->arb_session.is_valid = false;
+	pxp->arb_session.tag = 0;
 	reinit_completion(&pxp->termination);
 }
 
@@ -513,11 +514,14 @@ static int pxp_set_session_status(struct intel_pxp *pxp,
 	struct prelim_drm_i915_pxp_set_session_status_params params;
 	struct prelim_drm_i915_pxp_set_session_status_params __user *uparams =
 		u64_to_user_ptr(pxp_ops->params);
+	u32 session_id;
 	int ret = 0;
 
 	if (copy_from_user(&params, uparams, sizeof(params)) != 0)
 		return -EFAULT;
 
+	session_id = params.pxp_tag & PRELIM_DRM_I915_PXP_TAG_SESSION_ID_MASK;
+
 	switch (params.req_session_state) {
 	case PRELIM_DRM_I915_PXP_REQ_SESSION_ID_INIT:
 		ret = intel_pxp_sm_ioctl_reserve_session(pxp, drmfile,
@@ -526,11 +530,11 @@ static int pxp_set_session_status(struct intel_pxp *pxp,
 		break;
 	case PRELIM_DRM_I915_PXP_REQ_SESSION_IN_PLAY:
 		ret = intel_pxp_sm_ioctl_mark_session_in_play(pxp, drmfile,
-							      params.pxp_tag);
+							      session_id);
 		break;
 	case PRELIM_DRM_I915_PXP_REQ_SESSION_TERMINATE:
 		ret = intel_pxp_sm_ioctl_terminate_session(pxp, drmfile,
-							   params.pxp_tag);
+							   session_id);
 		break;
 	default:
 		ret = -EINVAL;
@@ -576,6 +580,30 @@ static int pxp_send_tee_msg(struct intel_pxp *pxp,
 	return ret;
 }
 
+static int pxp_query_tag(struct intel_pxp *pxp, struct prelim_drm_i915_pxp_ops *pxp_ops)
+{
+	struct prelim_drm_i915_pxp_query_tag params;
+	struct prelim_drm_i915_pxp_query_tag __user *uparams =
+		u64_to_user_ptr(pxp_ops->params);
+	int ret = 0;
+
+	if (copy_from_user(&params, uparams, sizeof(params)) != 0)
+		return -EFAULT;
+
+	ret = intel_pxp_sm_ioctl_query_pxp_tag(pxp, &params.session_is_alive,
+					       &params.pxp_tag);
+	if (ret >= 0) {
+		pxp_ops->status = ret;
+
+		if (copy_to_user(uparams, &params, sizeof(params)))
+			ret = -EFAULT;
+		else
+			ret = 0;
+	}
+
+	return ret;
+}
+
 int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmfile)
 {
 	int ret = 0;
@@ -619,6 +647,9 @@ int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmf
 	case PRELIM_DRM_I915_PXP_ACTION_TEE_IO_MESSAGE:
 		ret = pxp_send_tee_msg(pxp, pxp_ops, drmfile);
 		break;
+	case PRELIM_DRM_I915_PXP_ACTION_QUERY_PXP_TAG:
+		ret = pxp_query_tag(pxp, pxp_ops);
+		break;
 	default:
 		ret = -EINVAL;
 		break;
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
index 2a10b5b4dc99f..ad1e0ceef2707 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
@@ -13,6 +13,42 @@
 #include "intel_pxp_types.h"
 #include "intel_pxp_regs.h"
 
+static u8 get_next_instance_id(struct intel_pxp *pxp, u32 id)
+{
+	u8 next_id = ++pxp->next_tag_id[id];
+
+	if  (!next_id)
+		next_id = ++pxp->next_tag_id[id];
+
+	return next_id;
+}
+
+static u32 set_pxp_tag(struct intel_pxp *pxp, int session_idx, int protection_mode)
+{
+	u32 pxp_tag = 0;
+
+	switch (protection_mode) {
+	case PRELIM_DRM_I915_PXP_MODE_LM:
+		break;
+	case PRELIM_DRM_I915_PXP_MODE_HM:
+		pxp_tag |= PRELIM_DRM_I915_PXP_TAG_SESSION_HM;
+		break;
+	case PRELIM_DRM_I915_PXP_MODE_SM:
+		pxp_tag |= PRELIM_DRM_I915_PXP_TAG_SESSION_HM;
+		pxp_tag |= PRELIM_DRM_I915_PXP_TAG_SESSION_SM;
+		break;
+	default:
+		MISSING_CASE(protection_mode);
+	}
+
+	pxp_tag |= PRELIM_DRM_I915_PXP_TAG_SESSION_ENABLED;
+	pxp_tag |= FIELD_PREP(PRELIM_DRM_I915_PXP_TAG_INSTANCE_ID_MASK,
+			      get_next_instance_id(pxp, session_idx));
+	pxp_tag |= FIELD_PREP(PRELIM_DRM_I915_PXP_TAG_SESSION_ID_MASK, session_idx);
+
+	return pxp_tag;
+}
+
 bool intel_pxp_session_is_in_play(struct intel_pxp *pxp, u32 id)
 {
 	struct intel_uncore *uncore = pxp->ctrl_gt->uncore;
@@ -70,7 +106,8 @@ static bool is_hwdrm_session_attacked(struct intel_pxp *pxp)
 	return regval & KCR_STATUS_1_ATTACK_MASK;
 }
 
-static void __init_session_entry(struct intel_pxp_session *session,
+static void __init_session_entry(struct intel_pxp *pxp,
+				 struct intel_pxp_session *session,
 				 struct drm_file *drmfile,
 				 int protection_mode, int session_index)
 {
@@ -78,6 +115,7 @@ static void __init_session_entry(struct intel_pxp_session *session,
 	session->index = session_index;
 	session->is_valid = false;
 	session->drmfile = drmfile;
+	session->tag = set_pxp_tag(pxp, session_index, protection_mode);
 }
 
 /**
@@ -100,7 +138,7 @@ static int create_session_entry(struct intel_pxp *pxp, struct drm_file *drmfile,
 	if (!session)
 		return -ENOMEM;
 
-	__init_session_entry(session, drmfile, protection_mode, session_index);
+	__init_session_entry(pxp, session, drmfile, protection_mode, session_index);
 
 	pxp->hwdrm_sessions[session_index] = session;
 	set_bit(session_index, pxp->reserved_sessions);
@@ -119,7 +157,8 @@ static void free_session_entry(struct intel_pxp *pxp, int session_index)
 
 static void pxp_init_arb_session(struct intel_pxp *pxp)
 {
-	__init_session_entry(&pxp->arb_session, NULL, PRELIM_DRM_I915_PXP_MODE_HM, ARB_SESSION);
+	__init_session_entry(pxp, &pxp->arb_session, NULL, PRELIM_DRM_I915_PXP_MODE_HM,
+			     ARB_SESSION);
 	pxp->hwdrm_sessions[ARB_SESSION] = &pxp->arb_session;
 	set_bit(ARB_SESSION, pxp->reserved_sessions);
 }
@@ -168,7 +207,7 @@ int intel_pxp_sm_ioctl_reserve_session(struct intel_pxp *pxp, struct drm_file *d
 
 	ret = create_session_entry(pxp, drmfile,
 				   protection_mode, idx);
-	*pxp_tag = idx;
+	*pxp_tag = pxp->hwdrm_sessions[idx]->tag;
 
 	return ret;
 }
@@ -177,13 +216,13 @@ int intel_pxp_sm_ioctl_reserve_session(struct intel_pxp *pxp, struct drm_file *d
  * intel_pxp_sm_ioctl_terminate_session - To terminate an active HW session and free its entry.
  * @pxp: pointer to pxp struct.
  * @drmfile: drm_file of the app issuing the termination
- * @session_id: Session identifier of the session, containing type and index info
+ * @session_id: Session identifier of the session
  *
  * Return: 0 means terminate is successful, or didn't find the desired session.
  */
 int intel_pxp_sm_ioctl_terminate_session(struct intel_pxp *pxp,
 					 struct drm_file *drmfile,
-					 int session_id)
+					 u32 session_id)
 {
 	int ret;
 
@@ -207,11 +246,37 @@ int intel_pxp_sm_ioctl_terminate_session(struct intel_pxp *pxp,
 	return 0;
 }
 
+int intel_pxp_sm_ioctl_query_pxp_tag(struct intel_pxp *pxp,
+				     u32 *session_is_alive, u32 *pxp_tag)
+{
+	int session_id = 0;
+
+	if (!session_is_alive || !pxp_tag)
+		return -EINVAL;
+
+	session_id = *pxp_tag & PRELIM_DRM_I915_PXP_TAG_SESSION_ID_MASK;
+	if (session_id >= INTEL_PXP_MAX_HWDRM_SESSIONS)
+		return -EINVAL;
+
+	if (!pxp->hwdrm_sessions[session_id]) {
+		*pxp_tag = 0;
+		*session_is_alive = 0;
+		return 0;
+	}
+
+	*pxp_tag = pxp->hwdrm_sessions[session_id]->tag;
+
+	if (session_is_alive)
+		*session_is_alive = pxp->hwdrm_sessions[session_id]->is_valid;
+
+	return 0;
+}
+
 /**
  * intel_pxp_sm_ioctl_mark_session_in_play - Put an reserved session to "in_play" state
  * @pxp: pointer to pxp struct
  * @drmfile: drm_file of the app marking the session as in play
- * @session_id: Session identifier of the session, containing type and index info
+ * @session_id: Session identifier of the session
  *
  * Return: status. 0 means update is successful.
  */
@@ -266,6 +331,7 @@ static int pxp_create_arb_session(struct intel_pxp *pxp)
 	if (!++pxp->key_instance)
 		++pxp->key_instance;
 
+	pxp->arb_session.tag = set_pxp_tag(pxp, ARB_SESSION, PRELIM_DRM_I915_PXP_MODE_HM);
 	pxp->arb_session.is_valid = true;
 
 	return 0;
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.h b/drivers/gpu/drm/i915/pxp/intel_pxp_session.h
index 7097b54b64338..9d34094864c45 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.h
@@ -25,7 +25,10 @@ int intel_pxp_sm_ioctl_mark_session_in_play(struct intel_pxp *pxp,
 					    u32 session_id);
 int intel_pxp_sm_ioctl_terminate_session(struct intel_pxp *pxp,
 					 struct drm_file *drmfile,
-					 int session_id);
+					 u32 session_id);
+
+int intel_pxp_sm_ioctl_query_pxp_tag(struct intel_pxp *pxp,
+				     u32 *session_is_alive, u32 *pxp_tag);
 
 bool intel_pxp_session_is_in_play(struct intel_pxp *pxp, u32 id);
 
@@ -59,7 +62,7 @@ static inline int intel_pxp_sm_ioctl_mark_session_in_play(struct intel_pxp *pxp,
 
 static inline int intel_pxp_sm_ioctl_terminate_session(struct intel_pxp *pxp,
 						       struct drm_file *drmfile,
-						       int session_id)
+						       u32 session_id)
 {
 	return 0;
 }
@@ -68,6 +71,12 @@ static inline bool intel_pxp_session_is_in_play(struct intel_pxp *pxp, u32 id)
 {
 	return false;
 }
+
+static inline int intel_pxp_sm_ioctl_query_pxp_tag(struct intel_pxp *pxp,
+						   u32 *session_is_alive, u32 *pxp_tag)
+{
+	return 0;
+}
 #endif
 
 #endif /* __INTEL_PXP_SESSION_H__ */
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_types.h b/drivers/gpu/drm/i915/pxp/intel_pxp_types.h
index e19e97cf174d5..63321f7eab7cb 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_types.h
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_types.h
@@ -38,6 +38,8 @@ struct intel_pxp_session {
 	 *            session to know if it's valid.
 	 */
 	bool is_valid;
+
+	u32 tag;
 };
 
 /**
@@ -130,6 +132,7 @@ struct intel_pxp {
 	DECLARE_BITMAP(reserved_sessions, INTEL_PXP_MAX_HWDRM_SESSIONS);
 	struct intel_pxp_session *hwdrm_sessions[INTEL_PXP_MAX_HWDRM_SESSIONS];
 	struct intel_pxp_session arb_session;
+	u8 next_tag_id[INTEL_PXP_MAX_HWDRM_SESSIONS];
 
 	/** @session_work: worker that manages session events. */
 	struct work_struct session_work;
diff --git a/include/uapi/drm/i915_drm_prelim.h b/include/uapi/drm/i915_drm_prelim.h
index 12c91494aba52..3d49336350701 100644
--- a/include/uapi/drm/i915_drm_prelim.h
+++ b/include/uapi/drm/i915_drm_prelim.h
@@ -58,6 +58,33 @@ struct prelim_drm_i915_pxp_tee_io_message_params {
 	__u32 msg_out_ret_size; /* out- output message actual size returned from TEE */
 } __attribute__((packed));
 
+/*
+ * struct drm_i915_pxp_query_tag - Params to query the PXP tag of specified
+ * session id and whether the session is alive from PXP state machine.
+ */
+struct prelim_drm_i915_pxp_query_tag {
+	__u32 session_is_alive;
+
+	/*
+	 * in  - Session ID, out pxp tag.
+	 * Tag format:
+	 * bits   0-6: session id
+	 * bit      7: rsvd
+	 * bits  8-15: instance id
+	 * bit     16: session enabled
+	 * bit     17: mode hm
+	 * bit     18: rsvd
+	 * bit     19: mode sm
+	 * bits 20-31: rsvd
+	 */
+	__u32 pxp_tag;
+#define PRELIM_DRM_I915_PXP_TAG_SESSION_ID_MASK		(0x7f)
+#define PRELIM_DRM_I915_PXP_TAG_INSTANCE_ID_MASK	(0xff << 8)
+#define PRELIM_DRM_I915_PXP_TAG_SESSION_ENABLED		(0x1 << 16)
+#define PRELIM_DRM_I915_PXP_TAG_SESSION_HM		(0x1 << 17)
+#define PRELIM_DRM_I915_PXP_TAG_SESSION_SM		(0x1 << 19)
+} __attribute__((packed));
+
 /*
  * DRM_I915_PXP_OPS -
  *
@@ -74,6 +101,7 @@ struct prelim_drm_i915_pxp_ops {
 	__u32 action; /* in - specified action of this operation */
 #define PRELIM_DRM_I915_PXP_ACTION_SET_SESSION_STATUS 0
 #define PRELIM_DRM_I915_PXP_ACTION_TEE_IO_MESSAGE 1
+#define PRELIM_DRM_I915_PXP_ACTION_QUERY_PXP_TAG 2
 
 	__u32 status; /* out - status output for this operation */
 #define PRELIM_DRM_I915_PXP_OP_STATUS_SUCCESS 0
-- 
2.25.1

