From aa86529db414b708ad3288094545511d10444bff Mon Sep 17 00:00:00 2001
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date: Tue, 21 Jul 2020 16:01:21 +0300
Subject: [PATCH 09/20] EMBARGO: pinctrl: intel: Add Intel Meteor Lake pin
 controller support

This driver adds pinctrl/GPIO support for Intel Meteor Lake. The
GPIO controller is based on the next generation GPIO hardware but still
compatible with the one supported by the Intel core pinctrl/GPIO driver.

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
---
 drivers/pinctrl/intel/Kconfig              |   8 +
 drivers/pinctrl/intel/Makefile             |   1 +
 drivers/pinctrl/intel/pinctrl-meteorlake.c | 481 +++++++++++++++++++++
 3 files changed, 490 insertions(+)
 create mode 100644 drivers/pinctrl/intel/pinctrl-meteorlake.c

diff --git a/drivers/pinctrl/intel/Kconfig b/drivers/pinctrl/intel/Kconfig
index e5ec8b8956da..078eec8af4a4 100644
--- a/drivers/pinctrl/intel/Kconfig
+++ b/drivers/pinctrl/intel/Kconfig
@@ -151,6 +151,14 @@ config PINCTRL_LEWISBURG
 	  This pinctrl driver provides an interface that allows configuring
 	  of Intel Lewisburg pins and using them as GPIOs.
 
+config PINCTRL_METEORLAKE
+	tristate "Intel Meteor Lake pinctrl and GPIO driver"
+	depends on ACPI
+	select PINCTRL_INTEL
+	help
+	  This pinctrl driver provides an interface that allows configuring
+	  of Intel Meteor Lake pins and using them as GPIOs.
+
 config PINCTRL_SUNRISEPOINT
 	tristate "Intel Sunrisepoint pinctrl and GPIO driver"
 	depends on ACPI
diff --git a/drivers/pinctrl/intel/Makefile b/drivers/pinctrl/intel/Makefile
index 26244f4af360..03d9a1cbe021 100644
--- a/drivers/pinctrl/intel/Makefile
+++ b/drivers/pinctrl/intel/Makefile
@@ -19,5 +19,6 @@ obj-$(CONFIG_PINCTRL_ICELAKE)		+= pinctrl-icelake.o
 obj-$(CONFIG_PINCTRL_JASPERLAKE)	+= pinctrl-jasperlake.o
 obj-$(CONFIG_PINCTRL_LAKEFIELD)		+= pinctrl-lakefield.o
 obj-$(CONFIG_PINCTRL_LEWISBURG)		+= pinctrl-lewisburg.o
+obj-$(CONFIG_PINCTRL_METEORLAKE)	+= pinctrl-meteorlake.o
 obj-$(CONFIG_PINCTRL_SUNRISEPOINT)	+= pinctrl-sunrisepoint.o
 obj-$(CONFIG_PINCTRL_TIGERLAKE)		+= pinctrl-tigerlake.o
diff --git a/drivers/pinctrl/intel/pinctrl-meteorlake.c b/drivers/pinctrl/intel/pinctrl-meteorlake.c
new file mode 100644
index 000000000000..43619d358013
--- /dev/null
+++ b/drivers/pinctrl/intel/pinctrl-meteorlake.c
@@ -0,0 +1,481 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Intel Meteor Lake PCH pinctrl/GPIO driver
+ *
+ * Copyright (C) 2021, Intel Corporation
+ * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
+ */
+
+#include <linux/mod_devicetable.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-intel.h"
+
+#define MTL_PAD_OWN	0x020
+#define MTL_PADCFGLOCK	0x080
+#define MTL_HOSTSW_OWN	0x0b0
+#define MTL_GPI_IS	0x100
+#define MTL_GPI_IE	0x120
+
+#define MTL_GPP(r, s, e)				\
+	{						\
+		.reg_num = (r),				\
+		.base = (s),				\
+		.size = ((e) - (s) + 1),		\
+	}
+
+#define MTL_COMMUNITY(s, e, g)				\
+	{						\
+		.padown_offset = MTL_PAD_OWN,		\
+		.padcfglock_offset = MTL_PADCFGLOCK,	\
+		.hostown_offset = MTL_HOSTSW_OWN,	\
+		.is_offset = MTL_GPI_IS,		\
+		.ie_offset = MTL_GPI_IE,		\
+		.pin_base = (s),			\
+		.npins = ((e) - (s) + 1),		\
+		.gpps = (g),				\
+		.ngpps = ARRAY_SIZE(g),			\
+	}
+
+/* Meteor Lake */
+static const struct pinctrl_pin_desc mtl_community0_pins[] = {
+	/* CPU */
+	PINCTRL_PIN(0, "PECI"),
+	PINCTRL_PIN(1, "UFS_RESET_B"),
+	PINCTRL_PIN(2, "VIDSOUT"),
+	PINCTRL_PIN(3, "VIDSCK"),
+	PINCTRL_PIN(4, "VIDALERT_B"),
+	/* GPP_V */
+	PINCTRL_PIN(5, "BATLOW_B"),
+	PINCTRL_PIN(6, "AC_PRESENT"),
+	PINCTRL_PIN(7, "SOC_WAKE_B"),
+	PINCTRL_PIN(8, "PWRBTN_B"),
+	PINCTRL_PIN(9, "SLP_S3_B"),
+	PINCTRL_PIN(10, "SLP_S4_B"),
+	PINCTRL_PIN(11, "SLP_A_B"),
+	PINCTRL_PIN(12, "GPP_V_7"),
+	PINCTRL_PIN(13, "SUSCLK"),
+	PINCTRL_PIN(14, "SLP_WLAN_B"),
+	PINCTRL_PIN(15, "SLP_S5_B"),
+	PINCTRL_PIN(16, "LANPHYPC"),
+	PINCTRL_PIN(17, "SLP_LAN_B"),
+	PINCTRL_PIN(18, "GPP_V_13"),
+	PINCTRL_PIN(19, "WAKE_B"),
+	PINCTRL_PIN(20, "GPP_V_15"),
+	PINCTRL_PIN(21, "GPP_V_16"),
+	PINCTRL_PIN(22, "GPP_V_17"),
+	PINCTRL_PIN(23, "GPP_V_18"),
+	PINCTRL_PIN(24, "CATERR_B"),
+	PINCTRL_PIN(25, "PROCHOT_B"),
+	PINCTRL_PIN(26, "THERMTRIP_B"),
+	PINCTRL_PIN(27, "DSI_DE_TE_2_GENLOCK_REF"),
+	PINCTRL_PIN(28, "DSI_DE_TE_1_DISP_UTILS"),
+	/* GPP_C */
+	PINCTRL_PIN(29, "SMBCLK"),
+	PINCTRL_PIN(30, "SMBDATA"),
+	PINCTRL_PIN(31, "SMBALERT_B"),
+	PINCTRL_PIN(32, "SML0CLK"),
+	PINCTRL_PIN(33, "SML0DATA"),
+	PINCTRL_PIN(34, "SML0ALERT_B"),
+	PINCTRL_PIN(35, "SML1CLK"),
+	PINCTRL_PIN(36, "SML1DATA"),
+	PINCTRL_PIN(37, "SML1ALERT_B"),
+	PINCTRL_PIN(38, "SRCCLKREQ0_B"),
+	PINCTRL_PIN(39, "SRCCLKREQ1_B"),
+	PINCTRL_PIN(40, "SRCCLKREQ2_B"),
+	PINCTRL_PIN(41, "SRCCLKREQ3_B"),
+	PINCTRL_PIN(42, "SRCCLKREQ4_B"),
+	PINCTRL_PIN(43, "GPP_C_14"),
+	PINCTRL_PIN(44, "GPP_C_15"),
+	PINCTRL_PIN(45, "TBT_LSX0_A"),
+	PINCTRL_PIN(46, "TBT_LSX0_B"),
+	PINCTRL_PIN(47, "TBT_LSX1_A"),
+	PINCTRL_PIN(48, "TBT_LSX1_B"),
+	PINCTRL_PIN(49, "TBT_LSX2_A"),
+	PINCTRL_PIN(50, "TBT_LSX2_B"),
+	PINCTRL_PIN(51, "TBT_LSX3_A"),
+	PINCTRL_PIN(52, "TBT_LSX3_B"),
+};
+
+static const struct intel_padgroup mtl_community0_gpps[] = {
+	MTL_GPP(0, 0, 4),	/* CPU */
+	MTL_GPP(1, 5, 28),	/* GPP_V */
+	MTL_GPP(2, 29, 52),	/* GPP_C */
+};
+
+static const struct intel_community mtl_community0[] = {
+	MTL_COMMUNITY(0, 52, mtl_community0_gpps),
+};
+
+static const struct intel_pinctrl_soc_data mtl_community0_soc_data = {
+	.uid = "0",
+	.pins = mtl_community0_pins,
+	.npins = ARRAY_SIZE(mtl_community0_pins),
+	.communities = mtl_community0,
+	.ncommunities = ARRAY_SIZE(mtl_community0),
+};
+
+static const struct pinctrl_pin_desc mtl_community1_pins[] = {
+	/* GPP_A */
+	PINCTRL_PIN(0, "ESPI_IO_0"),
+	PINCTRL_PIN(1, "ESPI_IO_1"),
+	PINCTRL_PIN(2, "ESPI_IO_2"),
+	PINCTRL_PIN(3, "ESPI_IO_3"),
+	PINCTRL_PIN(4, "ESPI_CS0_B"),
+	PINCTRL_PIN(5, "ESPI_CLK"),
+	PINCTRL_PIN(6, "ESPI_RESET_B"),
+	PINCTRL_PIN(7, "GPP_A_7"),
+	PINCTRL_PIN(8, "GPP_A_8"),
+	PINCTRL_PIN(9, "GPP_A_9"),
+	PINCTRL_PIN(10, "GPP_A_10"),
+	PINCTRL_PIN(11, "PMC_I2C_SDA"),
+	PINCTRL_PIN(12, "PMC_I2C_SCL"),
+	PINCTRL_PIN(13, "ESPI_CS1_B"),
+	PINCTRL_PIN(14, "ESPI_CS2_B"),
+	PINCTRL_PIN(15, "ESPI_CS3_B"),
+	PINCTRL_PIN(16, "ESPI_ALERT0_B"),
+	PINCTRL_PIN(17, "ESPI_ALERT1_B"),
+	PINCTRL_PIN(18, "ESPI_ALERT2_B"),
+	PINCTRL_PIN(19, "ESPI_ALERT3_B"),
+	PINCTRL_PIN(20, "ADR_COMPLETE"),
+	PINCTRL_PIN(21, "PMCALERT_B"),
+	PINCTRL_PIN(22, "GPP_A_22"),
+	PINCTRL_PIN(23, "GPP_A_23"),
+	PINCTRL_PIN(24, "ESPI_CLK_LOOPBK"),
+	/* GPP_E */
+	PINCTRL_PIN(25, "SATAXPCIE_0"),
+	PINCTRL_PIN(26, "USBC_SMLACLK"),
+	PINCTRL_PIN(27, "USBC_SMLADATA"),
+	PINCTRL_PIN(28, "CPU_GP_0"),
+	PINCTRL_PIN(29, "SATA_DEVSLP_0"),
+	PINCTRL_PIN(30, "SATA_DEVSLP_1"),
+	PINCTRL_PIN(31, "GPP_E_6"),
+	PINCTRL_PIN(32, "GPP_E_7"),
+	PINCTRL_PIN(33, "DDPA_CTRLDATA"),
+	PINCTRL_PIN(34, "USB2_OC0_B"),
+	PINCTRL_PIN(35, "GPP_E_10"),
+	PINCTRL_PIN(36, "GPP_E_11"),
+	PINCTRL_PIN(37, "GPP_E_12"),
+	PINCTRL_PIN(38, "GPP_E_13"),
+	PINCTRL_PIN(39, "DDSP_HPDA"),
+	PINCTRL_PIN(40, "CPU_GP_2"),
+	PINCTRL_PIN(41, "CPU_GP_3"),
+	PINCTRL_PIN(42, "GPP_E_17"),
+	PINCTRL_PIN(43, "GPP_E_18"),
+	PINCTRL_PIN(44, "GPP_E_19"),
+	PINCTRL_PIN(45, "GPP_E_20"),
+	PINCTRL_PIN(46, "GPP_E_21"),
+	PINCTRL_PIN(47, "DDPA_CTRLCLK"),
+	PINCTRL_PIN(48, "GPP_E_23"),
+	PINCTRL_PIN(49, "THC0_GSPI0_CLK_LOOPBK"),
+};
+
+static const struct intel_padgroup mtl_community1_gpps[] = {
+	MTL_GPP(0, 0, 24),	/* GPP_A */
+	MTL_GPP(1, 25, 49),	/* GPP_E */
+};
+
+static const struct intel_community mtl_community1[] = {
+	MTL_COMMUNITY(0, 49, mtl_community1_gpps),
+};
+
+static const struct intel_pinctrl_soc_data mtl_community1_soc_data = {
+	.uid = "1",
+	.pins = mtl_community1_pins,
+	.npins = ARRAY_SIZE(mtl_community1_pins),
+	.communities = mtl_community1,
+	.ncommunities = ARRAY_SIZE(mtl_community1),
+};
+
+static const struct pinctrl_pin_desc mtl_community3_pins[] = {
+	/* GPP_H */
+	PINCTRL_PIN(0, "GPP_H_0"),
+	PINCTRL_PIN(1, "GPP_H_1"),
+	PINCTRL_PIN(2, "GPP_H_2"),
+	PINCTRL_PIN(3, "GPP_H_3"),
+	PINCTRL_PIN(4, "I2C2_SDA"),
+	PINCTRL_PIN(5, "I2C2_SCL"),
+	PINCTRL_PIN(6, "I2C3_SDA"),
+	PINCTRL_PIN(7, "I2C3_SCL"),
+	PINCTRL_PIN(8, "UART0_RXD"),
+	PINCTRL_PIN(9, "UART0_TXD"),
+	PINCTRL_PIN(10, "UART0_RTS_B"),
+	PINCTRL_PIN(11, "UART0_CTS_B"),
+	PINCTRL_PIN(12, "GPP_H_12"),
+	PINCTRL_PIN(13, "CPU_C10_GATE_B"),
+	PINCTRL_PIN(14, "ISH_UART1_RXD"),
+	PINCTRL_PIN(15, "ISH_UART1_TXD"),
+	PINCTRL_PIN(16, "DDPB_CTRLCLK"),
+	PINCTRL_PIN(17, "DDPB_CTRLDATA"),
+	PINCTRL_PIN(18, "GPP_H_18"),
+	PINCTRL_PIN(19, "I2C0_SDA"),
+	PINCTRL_PIN(20, "I2C0_SCL"),
+	PINCTRL_PIN(21, "I2C1_SDA"),
+	PINCTRL_PIN(22, "I2C1_SCL"),
+	PINCTRL_PIN(23, "GPP_H_23"),
+	PINCTRL_PIN(24, "LPI3C1_CLK_LOOPBK"),
+	PINCTRL_PIN(25, "LPI3C0_CLK_LOOPBK"),
+	/* GPP_F */
+	PINCTRL_PIN(26, "CNV_BRI_DT"),
+	PINCTRL_PIN(27, "CNV_BRI_RSP"),
+	PINCTRL_PIN(28, "CNV_RGI_DT"),
+	PINCTRL_PIN(29, "CNV_RGI_RSP"),
+	PINCTRL_PIN(30, "CNV_RF_RESET_B"),
+	PINCTRL_PIN(31, "GPP_F_5"),
+	PINCTRL_PIN(32, "CNV_PA_BLANKING"),
+	PINCTRL_PIN(33, "FUSA_DIAGTEST_EN"),
+	PINCTRL_PIN(34, "FUSA_DIAGTEST_MODE"),
+	PINCTRL_PIN(35, "BOOTMPC"),
+	PINCTRL_PIN(36, "SATAXPCIE_1"),
+	PINCTRL_PIN(37, "GPP_F_11"),
+	PINCTRL_PIN(38, "GSXDOUT"),
+	PINCTRL_PIN(39, "GSXSLOAD"),
+	PINCTRL_PIN(40, "GSXDIN"),
+	PINCTRL_PIN(41, "GSXSRESETB"),
+	PINCTRL_PIN(42, "GSXCLK"),
+	PINCTRL_PIN(43, "GMII_MDC_0"),
+	PINCTRL_PIN(44, "GMII_MDIO_0"),
+	PINCTRL_PIN(45, "GPP_F_19"),
+	PINCTRL_PIN(46, "GPP_F_20"),
+	PINCTRL_PIN(47, "GPP_F_21"),
+	PINCTRL_PIN(48, "GPP_F_22"),
+	PINCTRL_PIN(49, "GPP_F_23"),
+	PINCTRL_PIN(50, "THC1_GSPI1_CLK_LOOPBK"),
+	PINCTRL_PIN(51, "GSPI0A_CLK_LOOPBK"),
+	/* SPI0 */
+	PINCTRL_PIN(52, "SPI0_IO_2"),
+	PINCTRL_PIN(53, "SPI0_IO_3"),
+	PINCTRL_PIN(54, "SPI0_MOSI_IO_0"),
+	PINCTRL_PIN(55, "SPI0_MISO_IO_1"),
+	PINCTRL_PIN(56, "SPI0_TPM_CS_B"),
+	PINCTRL_PIN(57, "SPI0_FLASH_0_CS_B"),
+	PINCTRL_PIN(58, "SPI0_FLASH_1_CS_B"),
+	PINCTRL_PIN(59, "SPI0_CLK"),
+	PINCTRL_PIN(60, "L_BKLTEN"),
+	PINCTRL_PIN(61, "L_BKLTCTL"),
+	PINCTRL_PIN(62, "L_VDDEN"),
+	PINCTRL_PIN(63, "SYS_PWROK"),
+	PINCTRL_PIN(64, "SYS_RESET_B"),
+	PINCTRL_PIN(65, "MLK_RST_B"),
+	PINCTRL_PIN(66, "SPI0_CLK_LOOPBK"),
+	/* vGPIO_3 */
+	PINCTRL_PIN(67, "ESPI_USB_OCB_0"),
+	PINCTRL_PIN(68, "ESPI_USB_OCB_1"),
+	PINCTRL_PIN(69, "ESPI_USB_OCB_2"),
+	PINCTRL_PIN(70, "ESPI_USB_OCB_3"),
+	PINCTRL_PIN(71, "USB_CPU_OCB_0"),
+	PINCTRL_PIN(72, "USB_CPU_OCB_1"),
+	PINCTRL_PIN(73, "USB_CPU_OCB_2"),
+	PINCTRL_PIN(74, "USB_CPU_OCB_3"),
+	PINCTRL_PIN(75, "TS0_IN_INT"),
+	PINCTRL_PIN(76, "TS1_IN_INT"),
+	PINCTRL_PIN(77, "THC0_WOT_INT"),
+	PINCTRL_PIN(78, "THC1_WOT_INT"),
+	PINCTRL_PIN(79, "THC0_WHC_INT"),
+	PINCTRL_PIN(80, "THC1_WHC_INT"),
+};
+
+static const struct intel_padgroup mtl_community3_gpps[] = {
+	MTL_GPP(0, 0, 25),	/* GPP_H */
+	MTL_GPP(1, 26, 51),	/* GPP_F */
+	MTL_GPP(2, 52, 66),	/* SPI0 */
+	MTL_GPP(3, 67, 80),	/* vGPIO_3 */
+};
+
+static const struct intel_community mtl_community3[] = {
+	MTL_COMMUNITY(0, 80, mtl_community3_gpps),
+};
+
+static const struct intel_pinctrl_soc_data mtl_community3_soc_data = {
+	.uid = "3",
+	.pins = mtl_community3_pins,
+	.npins = ARRAY_SIZE(mtl_community3_pins),
+	.communities = mtl_community3,
+	.ncommunities = ARRAY_SIZE(mtl_community3),
+};
+
+static const struct pinctrl_pin_desc mtl_community4_pins[] = {
+	/* GPP_S */
+	PINCTRL_PIN(0, "SNDW0_CLK"),
+	PINCTRL_PIN(1, "SNDW0_DATA0"),
+	PINCTRL_PIN(2, "SNDW1_CLK"),
+	PINCTRL_PIN(3, "SNDW1_DATA"),
+	PINCTRL_PIN(4, "SNDW2_CLK"),
+	PINCTRL_PIN(5, "SNDW2_DATA"),
+	PINCTRL_PIN(6, "SNDW3_CLK"),
+	PINCTRL_PIN(7, "SNDW3_DATA"),
+	/* JTAG */
+	PINCTRL_PIN(8, "JTAG_MBPB0"),
+	PINCTRL_PIN(9, "JTAG_MBPB1"),
+	PINCTRL_PIN(10, "JTAG_MBPB2"),
+	PINCTRL_PIN(11, "JTAG_MBPB3"),
+	PINCTRL_PIN(12, "JTAG_TDO"),
+	PINCTRL_PIN(13, "PRDY_B"),
+	PINCTRL_PIN(14, "PREQ_B"),
+	PINCTRL_PIN(15, "JTAG_TDI"),
+	PINCTRL_PIN(16, "JTAG_TMS"),
+	PINCTRL_PIN(17, "JTAG_TCK"),
+	PINCTRL_PIN(18, "DBG_PMODE"),
+	PINCTRL_PIN(19, "JTAG_TRST_B"),
+};
+
+static const struct intel_padgroup mtl_community4_gpps[] = {
+	MTL_GPP(0, 0, 7),	/* GPP_S */
+	MTL_GPP(1, 8, 19),	/* JTAG */
+};
+
+static const struct intel_community mtl_community4[] = {
+	MTL_COMMUNITY(0, 19, mtl_community4_gpps),
+};
+
+static const struct intel_pinctrl_soc_data mtl_community4_soc_data = {
+	.uid = "4",
+	.pins = mtl_community4_pins,
+	.npins = ARRAY_SIZE(mtl_community4_pins),
+	.communities = mtl_community4,
+	.ncommunities = ARRAY_SIZE(mtl_community4),
+};
+
+static const struct pinctrl_pin_desc mtl_community5_pins[] = {
+	/* GPP_B */
+	PINCTRL_PIN(0, "ADM_VID_0"),
+	PINCTRL_PIN(1, "ADM_VID_1"),
+	PINCTRL_PIN(2, "GPP_B_2"),
+	PINCTRL_PIN(3, "GPP_B_3"),
+	PINCTRL_PIN(4, "GPP_B_4"),
+	PINCTRL_PIN(5, "GPP_B_5"),
+	PINCTRL_PIN(6, "GPP_B_6"),
+	PINCTRL_PIN(7, "GPP_B_7"),
+	PINCTRL_PIN(8, "GPP_B_8"),
+	PINCTRL_PIN(9, "GPP_B_9"),
+	PINCTRL_PIN(10, "GPP_B_10"),
+	PINCTRL_PIN(11, "USB2_OC1_B"),
+	PINCTRL_PIN(12, "SLP_S0_B"),
+	PINCTRL_PIN(13, "PLTRST_B"),
+	PINCTRL_PIN(14, "USB2_OC2_B"),
+	PINCTRL_PIN(15, "USB2_OC3_B"),
+	PINCTRL_PIN(16, "GPP_B_16"),
+	PINCTRL_PIN(17, "GPP_B_17"),
+	PINCTRL_PIN(18, "ISH_I2C2_SDA"),
+	PINCTRL_PIN(19, "ISH_I2C2_SCL"),
+	PINCTRL_PIN(20, "GPP_B_20"),
+	PINCTRL_PIN(21, "GPP_B_21"),
+	PINCTRL_PIN(22, "TIME_SYNC_0"),
+	PINCTRL_PIN(23, "TIME_SYNC_1"),
+	PINCTRL_PIN(24, "ISHI3C0_CLK_LOOPBK"),
+	/* GPP_D */
+	PINCTRL_PIN(25, "IMGCLKOUT_1"),
+	PINCTRL_PIN(26, "I2C3A_SDA"),
+	PINCTRL_PIN(27, "I2C3A_SCL"),
+	PINCTRL_PIN(28, "CPU_GP_1"),
+	PINCTRL_PIN(29, "IMGCLKOUT_0"),
+	PINCTRL_PIN(30, "GPP_D_5"),
+	PINCTRL_PIN(31, "GPP_D_6"),
+	PINCTRL_PIN(32, "IMGCLKOUT_4"),
+	PINCTRL_PIN(33, "GPP_D_8"),
+	PINCTRL_PIN(34, "GPP_D_9"),
+	PINCTRL_PIN(35, "HDA_BCLK"),
+	PINCTRL_PIN(36, "HDA_SYNC"),
+	PINCTRL_PIN(37, "HDA_SDO"),
+	PINCTRL_PIN(38, "HDA_SDI_0"),
+	PINCTRL_PIN(39, "GPP_D_14"),
+	PINCTRL_PIN(40, "GPP_D_15"),
+	PINCTRL_PIN(41, "HDA_SDI_1"),
+	PINCTRL_PIN(42, "HDA_RST_B"),
+	PINCTRL_PIN(43, "SRCCLKREQ6_B"),
+	PINCTRL_PIN(44, "SRCCLKREQ7_B"),
+	PINCTRL_PIN(45, "SRCCLKREQ8_B"),
+	PINCTRL_PIN(46, "UFS_REFCLK"),
+	PINCTRL_PIN(47, "BPKI3C_SDA"),
+	PINCTRL_PIN(48, "BPKI3C_SCL"),
+	PINCTRL_PIN(49, "BOOTHALT_B"),
+	/* vGPIO */
+	PINCTRL_PIN(50, "CNV_BTEN"),
+	PINCTRL_PIN(51, "CNV_BT_HOST_WAKEB"),
+	PINCTRL_PIN(52, "CNV_BT_IF_SELECT"),
+	PINCTRL_PIN(53, "vCNV_BT_UART_TXD"),
+	PINCTRL_PIN(54, "vCNV_BT_UART_RXD"),
+	PINCTRL_PIN(55, "vCNV_BT_UART_CTS_B"),
+	PINCTRL_PIN(56, "vCNV_BT_UART_RTS_B"),
+	PINCTRL_PIN(57, "vCNV_MFUART1_TXD"),
+	PINCTRL_PIN(58, "vCNV_MFUART1_RXD"),
+	PINCTRL_PIN(59, "vCNV_MFUART1_CTS_B"),
+	PINCTRL_PIN(60, "vCNV_MFUART1_RTS_B"),
+	PINCTRL_PIN(61, "vUART0_TXD"),
+	PINCTRL_PIN(62, "vUART0_RXD"),
+	PINCTRL_PIN(63, "vUART0_CTS_B"),
+	PINCTRL_PIN(64, "vUART0_RTS_B"),
+	PINCTRL_PIN(65, "vISH_UART0_TXD"),
+	PINCTRL_PIN(66, "vISH_UART0_RXD"),
+	PINCTRL_PIN(67, "vISH_UART0_CTS_B"),
+	PINCTRL_PIN(68, "vISH_UART0_RTS_B"),
+	PINCTRL_PIN(69, "vCNV_BT_I2S_BCLK"),
+	PINCTRL_PIN(70, "vCNV_BT_I2S_WS_SYNC"),
+	PINCTRL_PIN(71, "vCNV_BT_I2S_SDO"),
+	PINCTRL_PIN(72, "vCNV_BT_I2S_SDI"),
+	PINCTRL_PIN(73, "vI2S2_SCLK"),
+	PINCTRL_PIN(74, "vI2S2_SFRM"),
+	PINCTRL_PIN(75, "vI2S2_TXD"),
+	PINCTRL_PIN(76, "vI2S2_RXD"),
+	PINCTRL_PIN(77, "vCNV_BT_I2S_BCLK_2"),
+	PINCTRL_PIN(78, "vCNV_BT_I2S_WS_SYNC_2"),
+	PINCTRL_PIN(79, "vCNV_BT_I2S_SDO_2"),
+	PINCTRL_PIN(80, "vCNV_BT_I2S_SDI_2"),
+	PINCTRL_PIN(81, "vI2S2_SCLK_2"),
+	PINCTRL_PIN(82, "vI2S2_SFRM_2"),
+	PINCTRL_PIN(83, "vI2S2_TXD_2"),
+	PINCTRL_PIN(84, "vI2S2_RXD_2"),
+};
+
+static const struct intel_padgroup mtl_community5_gpps[] = {
+	MTL_GPP(0, 0, 24),	/* GPP_B */
+	MTL_GPP(1, 25, 49),	/* GPP_D */
+	MTL_GPP(2, 50, 81),	/* vGPIO_0 */
+	MTL_GPP(3, 82, 84),	/* vGPIO_1 */
+};
+
+static const struct intel_community mtl_community5[] = {
+	MTL_COMMUNITY(0, 84, mtl_community5_gpps),
+};
+
+static const struct intel_pinctrl_soc_data mtl_community5_soc_data = {
+	.uid = "5",
+	.pins = mtl_community5_pins,
+	.npins = ARRAY_SIZE(mtl_community5_pins),
+	.communities = mtl_community5,
+	.ncommunities = ARRAY_SIZE(mtl_community5),
+};
+
+static const struct intel_pinctrl_soc_data *mtl_soc_data_array[] = {
+	&mtl_community0_soc_data,
+	&mtl_community1_soc_data,
+	&mtl_community3_soc_data,
+	&mtl_community4_soc_data,
+	&mtl_community5_soc_data,
+	NULL
+};
+
+static const struct acpi_device_id mtl_pinctrl_acpi_match[] = {
+	{ "", (kernel_ulong_t)mtl_soc_data_array },
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, mtl_pinctrl_acpi_match);
+
+static INTEL_PINCTRL_PM_OPS(mtl_pinctrl_pm_ops);
+
+static struct platform_driver mtl_pinctrl_driver = {
+	.probe = intel_pinctrl_probe_by_uid,
+	.driver = {
+		.name = "meteorlake-pinctrl",
+		.acpi_match_table = mtl_pinctrl_acpi_match,
+		.pm = &mtl_pinctrl_pm_ops,
+	},
+};
+module_platform_driver(mtl_pinctrl_driver);
+
+MODULE_AUTHOR("Andy Shevchenko <andriy.shevchenko@linux.intel.com>");
+MODULE_DESCRIPTION("Intel Meteor Lake PCH pinctrl/GPIO driver");
+MODULE_LICENSE("GPL v2");
-- 
2.32.0

