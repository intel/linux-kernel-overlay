From 98247ffea05bc49ba82765e3e9e90f83107da070 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Fri, 13 May 2022 14:40:39 +0800
Subject: [PATCH 04/29] Revert "drm/i915: GuC based TLB invalidation changes
 for GuC 70"

This reverts commit 912ab930ae4005ba378f61a1e892c896fbec712f.
---
 .../gpu/drm/i915/gt/uc/abi/guc_actions_abi.h  |  11 +-
 .../gpu/drm/i915/gt/uc/abi/guc_version_abi.h  |   7 +-
 drivers/gpu/drm/i915/gt/uc/intel_guc.c        | 107 +-----------------
 drivers/gpu/drm/i915/gt/uc/intel_guc.h        |  10 --
 drivers/gpu/drm/i915/gt/uc/intel_guc_fwif.h   |   8 --
 drivers/gpu/drm/i915/gt/uc/intel_uc.c         |   6 -
 drivers/gpu/drm/i915/i915_drv.h               |   3 -
 drivers/gpu/drm/i915/i915_pci.c               |   1 -
 drivers/gpu/drm/i915/intel_device_info.h      |   1 -
 9 files changed, 8 insertions(+), 146 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h
index dd6db08c8c6f..e0606b60cde4 100644
--- a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h
+++ b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h
@@ -138,7 +138,6 @@ enum intel_guc_action {
 	INTEL_GUC_ACTION_PAGE_FAULT_NOTIFICATION = 0x6001,
 	INTEL_GUC_ACTION_TLB_INVALIDATION = 0x7000,
 	INTEL_GUC_ACTION_TLB_INVALIDATION_DONE = 0x7001,
-	INTEL_GUC_ACTION_TLB_INVALIDATION_ALL = 0x7002,
 	INTEL_GUC_ACTION_STATE_CAPTURE_NOTIFICATION = 0x8002,
 	INTEL_GUC_ACTION_NOTIFY_FLUSH_LOG_BUFFER_TO_FILE = 0x8003,
 	INTEL_GUC_ACTION_NOTIFY_CRASH_DUMP_POSTED = 0x8004,
@@ -175,16 +174,8 @@ enum intel_guc_sleep_state_status {
 #define GUC_LOG_CONTROL_VERBOSITY_MASK	(0xF << GUC_LOG_CONTROL_VERBOSITY_SHIFT)
 #define GUC_LOG_CONTROL_DEFAULT_LOGGING	(1 << 8)
 
-#define INTEL_GUC_TLB_INVAL_TYPE_SHIFT 0
-#define INTEL_GUC_TLB_INVAL_MODE_SHIFT 8
-/* Flush PPC or SMRO caches along with TLB invalidation request */
-#define INTEL_GUC_TLB_INVAL_FLUSH_CACHE (1 << 31)
-
 enum intel_guc_tlb_invalidation_type {
-	INTEL_GUC_TLB_INVAL_FULL = 0x0,
-	INTEL_GUC_TLB_INVAL_PAGE_SELECTIVE = 0x1,
-	INTEL_GUC_TLB_INVAL_PAGE_SELECTIVE_CTX = 0x2,
-	INTEL_GUC_TLB_INVAL_GUC = 0x3,
+	INTEL_GUC_TLB_INVAL_GUC = 0x6,
 };
 
 /*
diff --git a/drivers/gpu/drm/i915/gt/uc/abi/guc_version_abi.h b/drivers/gpu/drm/i915/gt/uc/abi/guc_version_abi.h
index 17272f76f20d..351f8a943f63 100644
--- a/drivers/gpu/drm/i915/gt/uc/abi/guc_version_abi.h
+++ b/drivers/gpu/drm/i915/gt/uc/abi/guc_version_abi.h
@@ -1,12 +1,13 @@
 /* SPDX-License-Identifier: MIT */
 /*
- * Copyright © 2022 Intel Corporation
+ * Copyright © 2021 Intel Corporation
  */
 
 #ifndef _ABI_GUC_VERSION_ABI_H
 #define _ABI_GUC_VERSION_ABI_H
 
-#define GUC_VF_VERSION_LATEST_MAJOR	1
-#define GUC_VF_VERSION_LATEST_MINOR	0
+/* XXX: preliminary VF version is 0.10 */
+#define GUC_VF_VERSION_LATEST_MAJOR	0
+#define GUC_VF_VERSION_LATEST_MINOR	10
 
 #endif /* _ABI_GUC_VERSION_ABI_H */
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc.c b/drivers/gpu/drm/i915/gt/uc/intel_guc.c
index 607f26a94e2a..4495ac6ceab9 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc.c
@@ -906,7 +906,7 @@ static int guc_send_invalidate_tlb(struct intel_guc *guc, u32 *action, u32 size)
 	if (GEM_WARN_ON(err))
 		return err;
 
-	action[1] = seqno;
+	action[2] = seqno;
 
 	err = intel_guc_send_busy_loop(guc, action, size, G2H_LEN_DW_INVALIDATE_TLB, true);
 	if (err) {
@@ -941,103 +941,6 @@ static int guc_send_invalidate_tlb(struct intel_guc *guc, u32 *action, u32 size)
 	return (timeout < 0) ? timeout : 0;
 }
 
-/*
- * Full TLB invalidation:
- * If invoked by PF, will invalidate the TLB's across all VFs and all engines.
- * If invoked by VF, will invalidate the TLB's across all engines, given the
- * VF is active.
- */
-int intel_guc_invalidate_tlb_full(struct intel_guc *guc,
-				  enum intel_guc_tlb_inval_mode mode)
-{
-	u32 action[] = {
-		IS_SRIOV_PF(guc_to_gt(guc)->i915) ?
-			INTEL_GUC_ACTION_TLB_INVALIDATION_ALL :
-			INTEL_GUC_ACTION_TLB_INVALIDATION,
-		0,
-		INTEL_GUC_TLB_INVAL_FULL << INTEL_GUC_TLB_INVAL_TYPE_SHIFT |
-			mode << INTEL_GUC_TLB_INVAL_MODE_SHIFT |
-			INTEL_GUC_TLB_INVAL_FLUSH_CACHE,
-	};
-
-	if (!INTEL_GUC_SUPPORTS_TLB_INVALIDATION_FULL(guc)) {
-		DRM_ERROR("Tlb invalidation: Operation not supported in this platform!\n");
-		return 0;
-	}
-
-	return guc_send_invalidate_tlb(guc, action, ARRAY_SIZE(action));
-}
-
-/*
- * Selective TLB Invalidation for Address Range:
- * TLB's in the Address Range is Invalidated across all engines.
- */
-int intel_guc_invalidate_tlb_page_selective(struct intel_guc *guc,
-					    enum intel_guc_tlb_inval_mode mode,
-					    u64 start, u64 length, u32 asid)
-{
-	u64 vm_total = BIT_ULL(INTEL_INFO(guc_to_gt(guc)->i915)->ppgtt_size);
-	u32 address_mask = (ilog2(length) - ilog2(I915_GTT_PAGE_SIZE_4K));
-	u32 full_range = vm_total == length;
-	u32 action[] = {
-		INTEL_GUC_ACTION_TLB_INVALIDATION,
-		0,
-		INTEL_GUC_TLB_INVAL_PAGE_SELECTIVE << INTEL_GUC_TLB_INVAL_TYPE_SHIFT |
-			mode << INTEL_GUC_TLB_INVAL_MODE_SHIFT |
-			INTEL_GUC_TLB_INVAL_FLUSH_CACHE,
-		asid,
-		full_range ? full_range : lower_32_bits(start),
-		full_range ? 0 : upper_32_bits(start),
-		full_range ? 0 : address_mask,
-	};
-
-	if (!INTEL_GUC_SUPPORTS_TLB_INVALIDATION_SELECTIVE(guc)) {
-		DRM_ERROR("Tlb invalidation: Operation not supported in this platform!\n");
-		return 0;
-	}
-
-	GEM_BUG_ON(!IS_ALIGNED(start, I915_GTT_PAGE_SIZE_4K));
-	GEM_BUG_ON(!IS_ALIGNED(length, I915_GTT_PAGE_SIZE_4K));
-	GEM_BUG_ON(range_overflows(start, length, vm_total));
-
-	return guc_send_invalidate_tlb(guc, action, ARRAY_SIZE(action));
-}
-
-/*
- * Selective TLB Invalidation for Context:
- * Invalidates all TLB's for a specific context across all engines.
- */
-int intel_guc_invalidate_tlb_page_selective_ctx(struct intel_guc *guc,
-						enum intel_guc_tlb_inval_mode mode,
-						u64 start, u64 length, u32 ctxid)
-{
-	u64 vm_total = BIT_ULL(INTEL_INFO(guc_to_gt(guc)->i915)->ppgtt_size);
-	u32 address_mask = (ilog2(length) - ilog2(I915_GTT_PAGE_SIZE_4K));
-	u32 full_range = vm_total == length;
-	u32 action[] = {
-		INTEL_GUC_ACTION_TLB_INVALIDATION,
-		0,
-		INTEL_GUC_TLB_INVAL_PAGE_SELECTIVE_CTX << INTEL_GUC_TLB_INVAL_TYPE_SHIFT |
-			mode << INTEL_GUC_TLB_INVAL_MODE_SHIFT |
-			INTEL_GUC_TLB_INVAL_FLUSH_CACHE,
-		ctxid,
-		full_range ? full_range : lower_32_bits(start),
-		full_range ? 0 : upper_32_bits(start),
-		full_range ? 0 : address_mask,
-	};
-
-	if (!INTEL_GUC_SUPPORTS_TLB_INVALIDATION_SELECTIVE(guc)) {
-		DRM_ERROR("Tlb invalidation: Operation not supported in this platform!\n");
-		return 0;
-	}
-
-	GEM_BUG_ON(!IS_ALIGNED(start, I915_GTT_PAGE_SIZE_4K));
-	GEM_BUG_ON(!IS_ALIGNED(length, I915_GTT_PAGE_SIZE_4K));
-	GEM_BUG_ON(range_overflows(start, length, vm_total));
-
-	return guc_send_invalidate_tlb(guc, action, ARRAY_SIZE(action));
-}
-
 /*
  * Guc TLB Invalidation: Invalidate the TLB's of GuC itself.
  */
@@ -1046,10 +949,9 @@ int intel_guc_invalidate_tlb_guc(struct intel_guc *guc,
 {
 	u32 action[] = {
 		INTEL_GUC_ACTION_TLB_INVALIDATION,
+		INTEL_GUC_TLB_INVAL_GUC,
 		0,
-		INTEL_GUC_TLB_INVAL_GUC << INTEL_GUC_TLB_INVAL_TYPE_SHIFT |
-			mode << INTEL_GUC_TLB_INVAL_MODE_SHIFT |
-			INTEL_GUC_TLB_INVAL_FLUSH_CACHE,
+		mode,
 	};
 
 	if (!INTEL_GUC_SUPPORTS_TLB_INVALIDATION(guc)) {
@@ -1085,9 +987,6 @@ void intel_guc_load_status(struct intel_guc *guc, struct drm_printer *p)
 
 	intel_uc_fw_dump(&guc->fw, p);
 
-	if (IS_SRIOV_VF(guc_to_gt(guc)->i915))
-		return;
-
 	with_intel_runtime_pm(uncore->rpm, wakeref) {
 		u32 status = intel_uncore_read(uncore, GUC_STATUS);
 		u32 i;
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc.h b/drivers/gpu/drm/i915/gt/uc/intel_guc.h
index ed34acadfca8..d25fc1877efc 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc.h
@@ -360,16 +360,6 @@ int intel_guc_allocate_and_map_vma(struct intel_guc *guc, u32 size,
 int intel_guc_self_cfg32(struct intel_guc *guc, u16 key, u32 value);
 int intel_guc_self_cfg64(struct intel_guc *guc, u16 key, u64 value);
 
-int intel_guc_invalidate_tlb_full(struct intel_guc *guc,
-				  enum intel_guc_tlb_inval_mode mode);
-int intel_guc_invalidate_tlb_full_engine(struct intel_guc *guc,
-					    u32 engine_class);
-int intel_guc_invalidate_tlb_page_selective(struct intel_guc *guc,
-					    enum intel_guc_tlb_inval_mode mode,
-					    u64 start, u64 length, u32 asid);
-int intel_guc_invalidate_tlb_page_selective_ctxid(struct intel_guc *guc,
-						  enum intel_guc_tlb_inval_mode mode,
-						  u64 start, u64 length, u32 ctxid);
 int intel_guc_invalidate_tlb_guc(struct intel_guc *guc,
 				 enum intel_guc_tlb_inval_mode mode);
 
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc_fwif.h b/drivers/gpu/drm/i915/gt/uc/intel_guc_fwif.h
index 445925600805..4903362e8608 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc_fwif.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc_fwif.h
@@ -439,13 +439,5 @@ enum intel_guc_recv_message {
 	((intel_guc_ct_enabled(&(guc)->ct)) && \
 	 (intel_guc_submission_is_used(guc)) && \
 	 (GRAPHICS_VER(guc_to_gt((guc))->i915) >= 12))
-#define INTEL_GUC_SUPPORTS_TLB_INVALIDATION_ENGINE(guc) \
-	INTEL_GUC_SUPPORTS_TLB_INVALIDATION(guc)
-#define INTEL_GUC_SUPPORTS_TLB_INVALIDATION_FULL(guc) \
-	(INTEL_GUC_SUPPORTS_TLB_INVALIDATION(guc) && \
-	HAS_SELECTIVE_TLB_INVALIDATION(guc_to_gt(guc)->i915))
-#define INTEL_GUC_SUPPORTS_TLB_INVALIDATION_SELECTIVE(guc) \
-	(INTEL_GUC_SUPPORTS_TLB_INVALIDATION(guc) && \
-	HAS_SELECTIVE_TLB_INVALIDATION(guc_to_gt(guc)->i915))
 
 #endif
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_uc.c b/drivers/gpu/drm/i915/gt/uc/intel_uc.c
index a02515904143..da47cb2b479c 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc.c
@@ -186,9 +186,6 @@ void intel_uc_driver_remove(struct intel_uc *uc)
  */
 static void guc_clear_mmio_msg(struct intel_guc *guc)
 {
-	if (IS_SRIOV_VF(guc_to_gt(guc)->i915))
-		return;
-
 	intel_uncore_write(guc_to_gt(guc)->uncore, SOFT_SCRATCH(15), 0);
 }
 
@@ -196,9 +193,6 @@ static void guc_get_mmio_msg(struct intel_guc *guc)
 {
 	u32 val;
 
-	if (IS_SRIOV_VF(guc_to_gt(guc)->i915))
-		return;
-
 	spin_lock_irq(&guc->irq_lock);
 
 	val = intel_uncore_read(guc_to_gt(guc)->uncore, SOFT_SCRATCH(15));
diff --git a/drivers/gpu/drm/i915/i915_drv.h b/drivers/gpu/drm/i915/i915_drv.h
index 0c686c668ea9..3041f3cada20 100644
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@ -1755,9 +1755,6 @@ IS_SUBPLATFORM(const struct drm_i915_private *i915,
 
 #define HAS_SRIOV(dev_priv)	(INTEL_INFO(dev_priv)->has_sriov)
 
-#define HAS_SELECTIVE_TLB_INVALIDATION(dev_priv) \
-	(INTEL_INFO(dev_priv)->has_selective_tlb_invalidation)
-
 #define HAS_POOLED_EU(dev_priv)	(INTEL_INFO(dev_priv)->has_pooled_eu)
 
 #define HAS_GLOBAL_MOCS_REGISTERS(dev_priv)	(INTEL_INFO(dev_priv)->has_global_mocs)
diff --git a/drivers/gpu/drm/i915/i915_pci.c b/drivers/gpu/drm/i915/i915_pci.c
index 296a4c9129e3..c1b187aba6a6 100644
--- a/drivers/gpu/drm/i915/i915_pci.c
+++ b/drivers/gpu/drm/i915/i915_pci.c
@@ -974,7 +974,6 @@ static const struct intel_device_info adl_p_info = {
 	.display.has_cdclk_crawl = 1,
 	.display.has_modular_fia = 1,
 	.display.has_psr_hw_tracking = 0,
-	.has_selective_tlb_invalidation = 1,
 	.platform_engine_mask =
 		BIT(RCS0) | BIT(BCS0) | BIT(VECS0) | BIT(VCS0) | BIT(VCS2),
 	.ppgtt_size = 48,
diff --git a/drivers/gpu/drm/i915/intel_device_info.h b/drivers/gpu/drm/i915/intel_device_info.h
index 382aa4d809ad..2e17abdd2741 100644
--- a/drivers/gpu/drm/i915/intel_device_info.h
+++ b/drivers/gpu/drm/i915/intel_device_info.h
@@ -142,7 +142,6 @@ enum intel_ppgtt_type {
 	func(has_rc6p); \
 	func(has_rps); \
 	func(has_runtime_pm); \
-	func(has_selective_tlb_invalidation); \
 	func(has_snoop); \
 	func(has_sriov); \
 	func(has_coherent_ggtt); \
-- 
2.25.1

