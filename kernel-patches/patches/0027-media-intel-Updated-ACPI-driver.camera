From e284531507062cab2ca1b0378a97e118a74dc1e5 Mon Sep 17 00:00:00 2001
From: zouxiaoh <xiaohong.zou@intel.com>
Date: Wed, 22 Mar 2023 15:44:29 +0800
Subject: [PATCH 27/60] media: intel: Updated ACPI driver

Change Description:
support D4xx use case.
change ar0234_gpio to common_gpio for Direct use case.
Enable print subdev when no pdata enabled.
Serdes use case only need 3 I2C address in BIOS setting.

Signed-off-by: khaiwenn <khai.wen.ng@intel.com>
Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 .../media/platform/intel/ipu6-acpi-pdata.c    | 105 +++++++++++-------
 drivers/media/platform/intel/ipu6-acpi.c      |   4 +-
 include/media/ipu-acpi-pdata.h                |  26 ++++-
 3 files changed, 93 insertions(+), 42 deletions(-)

diff --git a/drivers/media/platform/intel/ipu6-acpi-pdata.c b/drivers/media/platform/intel/ipu6-acpi-pdata.c
index c68834e4e35e..8e54237c7fa4 100644
--- a/drivers/media/platform/intel/ipu6-acpi-pdata.c
+++ b/drivers/media/platform/intel/ipu6-acpi-pdata.c
@@ -17,7 +17,7 @@
 #include <media/ipu-acpi-pdata.h>
 
 #define MIN_SENSOR_I2C 1
-#define MIN_SERDES_I2C 2
+#define MIN_SERDES_I2C 3
 #define SUFFIX_BASE 96
 #define MSG_LEN 128
 
@@ -42,8 +42,6 @@ struct ipu_isys_subdev_pdata acpi_subdev_pdata = {
 
 struct serdes_local serdes_info;
 
-struct serdes_subdev_info serdes_sdinfo[SERDES_MAX_PORT];
-
 struct ipu_isys_subdev_pdata *get_acpi_subdev_pdata(void)
 {
 	struct ipu_isys_subdev_pdata *ptr;
@@ -63,7 +61,6 @@ void print_serdes_sdinfo(struct serdes_subdev_info *sdinfo)
 	}
 
 	pr_debug("\t\trx_port \t\t= %d", sdinfo->rx_port);
-	pr_debug("\t\tphy_i2c_addr \t\t= 0x%x", sdinfo->phy_i2c_addr);
 	pr_debug("\t\tser_alias \t\t= 0x%x", sdinfo->ser_alias);
 	pr_debug("\t\tsuffix \t\t\t= %c", sdinfo->suffix);
 	pr_debug("\t\tboard_info.type \t= %s", sdinfo->board_info.type);
@@ -301,8 +298,6 @@ void update_serdes_subdev(struct device *dev,
 			old_sdinfo->suffix == new_sdinfo->suffix) {
 			update_short(dev, "SdInfo port", &old_sdinfo->rx_port,
 				new_sdinfo->rx_port);
-			update_short(dev, "SdInfo phy_i2c_addr", &old_sdinfo->phy_i2c_addr,
-				new_sdinfo->phy_i2c_addr);
 			update_short(dev, "SdInfo ser_alias", &old_sdinfo->ser_alias,
 				new_sdinfo->ser_alias);
 			update_short(dev, "SdInfo board_info.addr", &old_sdinfo->board_info.addr,
@@ -386,36 +381,33 @@ void update_pdata(struct device *dev,
 	/* update local ipu_isys_subdev_pdata */
 	add_local_subdevs(acpi_subdev);
 
-	/* if there is existing pdata, update the existing one */
+	/* found existing pdata */
 	if (ptr_built_in_pdata) {
 		struct ipu_isys_subdev_info **subdevs, *sd_info;
 
 		for (subdevs = ptr_built_in_pdata->subdevs; *subdevs; subdevs++) {
 			sd_info = *subdevs;
 
+			/* found similar subdev in existing pdata*/
 			if (!compare_subdev(dev, acpi_subdev, sd_info, connect)) {
+				/* print and update old subdev */
 				if (connect == TYPE_DIRECT) {
 					dev_dbg(dev, "Old sensor subdev\n");
 					print_subdev(sd_info);
-					dev_dbg(dev, "New sensor subdev\n");
-					print_subdev(acpi_subdev);
+					update_subdev(dev, acpi_subdev, &sd_info);
 				} else if (connect == TYPE_SERDES) {
 					dev_dbg(dev, "Old serdes subdev\n");
 					print_serdes_subdev(sd_info);
-					dev_dbg(dev, "New serdes subdev\n");
-					print_serdes_subdev(acpi_subdev);
-				}
-
-				if (connect == TYPE_DIRECT)
-					update_subdev(dev, acpi_subdev, &sd_info);
-				else if (connect == TYPE_SERDES)
 					update_serdes_subdev(dev, acpi_subdev, &sd_info);
+				}
 
+				/* stop once similar subdev updated */
 				found = true;
 				break;
 			}
 		}
 
+		/* no similar subdev found */
 		if (!found) {
 			if (connect == TYPE_DIRECT) {
 				struct sensor_platform_data *acpi_pdata;
@@ -426,7 +418,11 @@ void update_pdata(struct device *dev,
 				dev_err(dev, "Pdata does not contain %s %c\n",
 					acpi_subdev->i2c.board_info.type,
 					acpi_pdata->suffix);
-			} else if (connect == TYPE_DIRECT) {
+
+				/* print new subdev */
+				print_subdev(acpi_subdev);
+
+			} else {
 				struct serdes_platform_data *acpi_pdata;
 
 				acpi_pdata = (struct serdes_platform_data *)
@@ -435,14 +431,32 @@ void update_pdata(struct device *dev,
 				dev_err(dev, "Pdata does not contain %s %c\n",
 					acpi_subdev->i2c.board_info.type,
 					acpi_pdata->suffix);
+
+				print_serdes_subdev(acpi_subdev);
 			}
 		}
 	}
+	/* does not have existing pdata */
+	else {
+		/* print new subdev */
+		if (connect == TYPE_DIRECT) {
+			dev_dbg(dev, "New sensor subdev\n");
+			print_subdev(acpi_subdev);
+		} else {
+			dev_dbg(dev, "New serdes subdev\n");
+			print_serdes_subdev(acpi_subdev);
+		}
+	}
 
-	if (!serdes_info.sensor_num)
-		serdes_info.sensor_num = serdes_info.rx_port;
-	else
-		serdes_info.sensor_num += serdes_info.rx_port;
+	/* update total num of sensor connected */
+	if (connect == TYPE_SERDES) {
+		if (!serdes_info.sensor_num)
+			serdes_info.sensor_num = serdes_info.rx_port;
+		else
+			serdes_info.sensor_num += serdes_info.rx_port;
+
+		serdes_info.deser_num++;
+	}
 }
 
 void set_ti960_gpio(struct control_logic_data *ctl_data, struct serdes_platform_data **pdata)
@@ -496,8 +510,14 @@ void set_lt_gpio(struct control_logic_data *ctl_data, struct sensor_platform_dat
 	}
 }
 
-void set_ar0234_gpio(struct sensor_platform_data **pdata)
+void set_common_gpio(struct sensor_platform_data **pdata)
 {
+	/* TODO: consider remove specific naming such as irq_pin, and use gpios[] */
+
+	(*pdata)->irq_pin = -1;
+	(*pdata)->reset_pin = -1;
+	(*pdata)->detect_pin = -1;
+
 	(*pdata)->gpios[0] = -1;
 	(*pdata)->gpios[1] = 0;
 	(*pdata)->gpios[2] = 0;
@@ -562,6 +582,12 @@ int set_serdes_subdev(struct ipu_isys_subdev_info **serdes_sd,
 {
 	int i;
 	struct serdes_module_pdata *module_pdata[PORT_NR];
+	struct serdes_subdev_info *serdes_sdinfo;
+	size_t subdev_size = subdev_port * sizeof(*serdes_sdinfo);
+
+	serdes_sdinfo = kzalloc(subdev_size, GFP_KERNEL);
+	if (!serdes_sdinfo)
+		return -ENOMEM;
 
 	for (i = 0; i < subdev_port; i++) {
 		module_pdata[i] = kzalloc(sizeof(*module_pdata[i]), GFP_KERNEL);
@@ -572,18 +598,17 @@ int set_serdes_subdev(struct ipu_isys_subdev_info **serdes_sd,
 
 		/* board info */
 		strlcpy(serdes_sdinfo[i].board_info.type, sensor_name, I2C_NAME_SIZE);
-		serdes_sdinfo[i].board_info.addr = DUMMY_SERDES_BASE_ADDR + subdev_port + i;
+		serdes_sdinfo[i].board_info.addr = serdes_info.sensor_map_addr + serdes_info.sensor_num + i;
 		serdes_sdinfo[i].board_info.platform_data = module_pdata[i];
 
 		/* serdes_subdev_info */
 		serdes_sdinfo[i].rx_port = i;
-		serdes_sdinfo[i].phy_i2c_addr = (addr << 1);
-		serdes_sdinfo[i].ser_alias = DUMMY_SERDES_BASE_ADDR + i;
-		serdes_sdinfo[i].suffix = i + 1 + SUFFIX_BASE + serdes_info.sensor_num;
+		serdes_sdinfo[i].ser_alias = serdes_info.ser_map_addr + serdes_info.sensor_num + i;
+		serdes_sdinfo[i].suffix = SUFFIX_BASE + serdes_info.sensor_num + i + 1;
 	}
 
 	(*pdata)->subdev_info = serdes_sdinfo;
-	(*pdata)->subdev_num = ARRAY_SIZE(serdes_sdinfo);
+	(*pdata)->subdev_num = subdev_port;
 
 	return 0;
 }
@@ -621,8 +646,8 @@ int set_pdata(struct ipu_isys_subdev_info **sensor_sd,
 		/* gpio */
 		if (!strcmp(sensor_name, LT6911UXC_NAME))
 			set_lt_gpio(ctl_data, &pdata, is_dummy);
-		else if (!strcmp(sensor_name, AR0234_NAME))
-			set_ar0234_gpio(&pdata);
+		else
+			set_common_gpio(&pdata);
 
 		(*sensor_sd)->i2c.board_info.platform_data = pdata;
 	} else if (connect == TYPE_SERDES) {
@@ -633,7 +658,9 @@ int set_pdata(struct ipu_isys_subdev_info **sensor_sd,
 			return -ENOMEM;
 
 		/* use ascii */
-		if (port > 0)
+		if (!strcmp(sensor_name, D457_NAME) && port >= 0)
+			pdata->suffix = serdes_info.deser_num + SUFFIX_BASE + 1;
+		else if (port > 0)
 			pdata->suffix = port + SUFFIX_BASE;
 		else
 			dev_err(dev, "INVALID MIPI PORT");
@@ -644,6 +671,7 @@ int set_pdata(struct ipu_isys_subdev_info **sensor_sd,
 		set_serdes_subdev(sensor_sd, dev, &pdata, sensor_name, lanes, addr, rx_port);
 
 		(*sensor_sd)->i2c.board_info.platform_data = pdata;
+		pdata->deser_board_info = &(*sensor_sd)->i2c.board_info;
 	}
 
 	return 0;
@@ -651,16 +679,17 @@ int set_pdata(struct ipu_isys_subdev_info **sensor_sd,
 
 void set_serdes_info(struct device *dev, const char *serdes_name, struct sensor_bios_data *cam_data)
 {
-	/* pprunit as num of sensor connected to deserializer*/
+	/* pprunit as num of sensor connected to deserializer */
 	serdes_info.rx_port = cam_data->pprunit;
 
-	/* init sensor_num */
-	if (!serdes_info.sensor_num)
-		serdes_info.sensor_num = 0;
+	/* i2c devices */
+	serdes_info.i2c_num = cam_data->i2c_num;
+
+	/* sensor mapped addr */
+	serdes_info.sensor_map_addr = cam_data->i2c[cam_data->i2c_num - 1].addr;
 
-	/* save sensor addr */
-	if (!serdes_info.sensor_addr)
-		serdes_info.sensor_addr = cam_data->i2c[1].addr;
+	/* serializer mapped addr */
+	serdes_info.ser_map_addr = cam_data->i2c[cam_data->i2c_num - 2].addr;
 
 	/* TI960 specific */
 	if (!strcmp(serdes_name, TI960_NAME))
@@ -743,7 +772,7 @@ int populate_sensor_pdata(struct device *dev,
 
 		/* serdes i2c info */
 		if (cam_data->i2c_num == MIN_SERDES_I2C) {
-			dev_info(dev, "IPU6 ACPI: correct i2c device for serdes");
+			dev_info(dev, "IPU6 ACPI: Detected minimum number of i2c device for serdes");
 			set_i2c(sensor_sd, dev, serdes_name, cam_data->i2c[0].addr);
 		} else {
 			dev_err(dev, "IPU6 ACPI: Incorrect number of I2C device for serdes (%lld)",
diff --git a/drivers/media/platform/intel/ipu6-acpi.c b/drivers/media/platform/intel/ipu6-acpi.c
index 1e18ac2a3a21..02c225bc43f1 100644
--- a/drivers/media/platform/intel/ipu6-acpi.c
+++ b/drivers/media/platform/intel/ipu6-acpi.c
@@ -65,9 +65,7 @@ static const struct ipu_acpi_devices supported_devices[] = {
 	{ "INTC10C0", AR0234_NAME, get_sensor_pdata, NULL, 0, TYPE_DIRECT, NULL },	// AR0234 HID
 	{ "INTC10B1", LT6911UXC_NAME, get_sensor_pdata, NULL, 0, TYPE_DIRECT, NULL },	// Lontium HID
 	{ "INTC10C1", IMX390_NAME, get_sensor_pdata, NULL, 0, TYPE_SERDES, TI960_NAME },// IMX390 HID
-	{ "INTC10CD", D457_NAME, get_sensor_pdata, NULL, 0, TYPE_DIRECT, NULL },	// D457 HID
-	/* for later usage */
-//	{ "INTC10CD", D457_NAME, get_sensor_pdata, NULL, 0, TYPE_SERDES, MAX9296_NAME },// D457 HID
+	{ "INTC10CD", D457_NAME, get_sensor_pdata, NULL, 0, TYPE_SERDES, D457_NAME },// D457 HID
 };
 
 static int get_table_index(struct device *device, const __u8 *acpi_name)
diff --git a/include/media/ipu-acpi-pdata.h b/include/media/ipu-acpi-pdata.h
index 73b2e78fc8fa..28bc0a32db02 100644
--- a/include/media/ipu-acpi-pdata.h
+++ b/include/media/ipu-acpi-pdata.h
@@ -8,7 +8,6 @@
 #include <media/imx390.h>
 #include <media/d4xx.h>
 
-#define DUMMY_SERDES_BASE_ADDR 0x40
 #define CL_EMPTY 0
 #define CL_DISCRETE 1
 #define SERDES_MAX_PORT 4
@@ -43,6 +42,7 @@ struct serdes_platform_data {
 	unsigned int reset_gpio;
 	unsigned int FPD_gpio;
 	char suffix;
+	struct i2c_board_info *deser_board_info;
 };
 
 struct serdes_subdev_info {
@@ -68,9 +68,33 @@ struct serdes_module_pdata {
 };
 
 struct serdes_local {
+	/* num of camera sensor connected to current mipi port */
 	unsigned int rx_port;
+
+	/* num of i2c addr for current ACPI device */
+	unsigned int i2c_num;
+
+	/* current sensor_addr */
 	unsigned short sensor_addr;
+
+	/* last mapped addr */
+	unsigned short sensor_map_addr;
+
+	/* current serializer_addr */
+	unsigned short ser_addr;
+
+	/* last mapped addr */
+	unsigned short ser_map_addr;
+
+	/* current gpio_powerup_seq */
 	unsigned int gpio_powerup_seq;
+
+	/* current module flag */
 	unsigned int module_flags;
+
+	/* counter for total camera sensor connected */
 	unsigned int sensor_num;
+
+	/* counter for total deser connected */
+	unsigned int deser_num;
 };
-- 
2.25.1

