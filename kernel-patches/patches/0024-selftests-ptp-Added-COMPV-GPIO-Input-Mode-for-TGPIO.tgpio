From 6be28deea277adcb7636a5d1cfb6d117740c998f Mon Sep 17 00:00:00 2001
From: "Tan, Raymond" <raymond.tan@intel.com>
Date: Mon, 13 Jan 2020 12:46:33 +0800
Subject: [PATCH 24/34] selftests: ptp: Added COMPV GPIO Input Mode for TGPIO

Added the option to configure COMPV GPIO Input mode for TGPIO, which
utilizes the existing rsv[0] member of ptp_extts_request structure to
provide the COMPV through PTP_EXTTS_REQUEST ioctl.

Signed-off-by: Tan, Raymond <raymond.tan@intel.com>
---
 tools/testing/selftests/ptp/testptp.c | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/tools/testing/selftests/ptp/testptp.c b/tools/testing/selftests/ptp/testptp.c
index 55285e9abf91..c269702da1df 100644
--- a/tools/testing/selftests/ptp/testptp.c
+++ b/tools/testing/selftests/ptp/testptp.c
@@ -179,6 +179,8 @@ static void usage(char *progname)
 		"            0 - none\n"
 		"            1 - external time stamp\n"
 		"            2 - periodic output\n"
+		" -m val     enable Input Event Countrol mode for TGPIO pins\n"
+		"            event will only be reported after 'val' matching internally\n"
 		" -n val     shift the ptp clock time by 'val' nanoseconds\n"
 		" -o val     phase offset (in nanoseconds) to be provided to the PHC servo\n"
 		" -O         enable single shot output for TGPIO pins\n"
@@ -235,6 +237,7 @@ int main(int argc, char *argv[])
 	int getextended = 0;
 	int getcross = 0;
 	int n_samples = 0;
+	int event_count = 0;
 	int single_shot = -1;
 	int new_period = -1;
 	int pin_index = -1, pin_func;
@@ -252,7 +255,7 @@ int main(int argc, char *argv[])
 
 	progname = strrchr(argv[0], '/');
 	progname = progname ? 1+progname : argv[0];
-	while (EOF != (c = getopt(argc, argv, "a:cd:e:Ef:F:GghH:i:k:lL:n:o:Op:P:sSt:T:w:x:Xz"))) {
+	while (EOF != (c = getopt(argc, argv, "a:cd:e:Ef:F:GghH:i:k:lL:m:n:o:Op:P:sSt:T:w:x:Xz"))) {
 		switch (c) {
 		case 'a':
 			new_period = atoi(optarg);
@@ -300,6 +303,9 @@ int main(int argc, char *argv[])
 				return -1;
 			}
 			break;
+		case 'm':
+			event_count = atoi(optarg);
+			break;
 		case 'n':
 			adjns = atoi(optarg);
 		case 'o':
@@ -524,6 +530,13 @@ int main(int argc, char *argv[])
 		memset(&extts_request, 0, sizeof(extts_request));
 		extts_request.index = index;
 		extts_request.flags = PTP_ENABLE_FEATURE;
+
+		if (event_count) {
+			extts_request.flags |= PTP_EVENT_COUNTER_MODE;
+			extts_request.rsv[0] = event_count;
+			/* Input Event Control only supports 1 event for now */
+			extts = 1;
+		}
 		if (ioctl(fd, PTP_EXTTS_REQUEST, &extts_request)) {
 			perror("PTP_EXTTS_REQUEST");
 			extts = 0;
-- 
2.25.1

