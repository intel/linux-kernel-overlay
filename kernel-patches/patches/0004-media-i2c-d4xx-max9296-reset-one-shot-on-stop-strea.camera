From 164a145040e034a0e9089fb65ab5799bfaf746db Mon Sep 17 00:00:00 2001
From: Chen Meng J <meng.j.chen@intel.com>
Date: Wed, 12 Jul 2023 14:20:06 +0800
Subject: [PATCH 04/43] media: i2c: d4xx: max9296 reset one shot on stop stream

max9296 reset one shot to enable auto link
for next streaming on stop stream.

Signed-off-by: Dmitry Perchanov <dmitry.perchanov@intel.com>
Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
---
 drivers/media/i2c/d4xx.c | 34 ++++++++++++++++++++++++++++++++--
 1 file changed, 32 insertions(+), 2 deletions(-)

diff --git a/drivers/media/i2c/d4xx.c b/drivers/media/i2c/d4xx.c
index e7208dbf83d9..a2f5562a6bed 100644
--- a/drivers/media/i2c/d4xx.c
+++ b/drivers/media/i2c/d4xx.c
@@ -3375,6 +3375,32 @@ static int ds5_mux_s_frame_interval(struct v4l2_subdev *sd,
 	return 0;
 }
 
+int d4xx_reset_oneshot(struct ds5 *state)
+{
+	int s_addr = state->client->addr;
+	int n_addr = 0;
+	int ret = 0;
+
+	if (s_addr == 0x12)
+		n_addr = 0x48;
+	if (s_addr == 0x14)
+		n_addr = 0x4a;
+	if (s_addr == 0x16)
+		n_addr = 0x68;
+	if (s_addr == 0x18)
+		n_addr = 0x6c;
+	if (n_addr) {
+		state->client->addr = n_addr;
+		dev_warn(&state->client->dev, "One-shot reset 0x%x enable auto-link\n", n_addr);
+		ret = max9296_write_8(state, 0x0010, 0x31); // One-shot reset  enable auto-link
+		state->client->addr = s_addr;
+		/* delay to settle link */
+		msleep(100);
+	}
+
+	return ret;
+}
+
 static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 {
 	struct ds5 *state = container_of(sd, struct ds5, mux.sd.subdev);
@@ -3383,7 +3409,9 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 	unsigned int i = 0;
 	int restore_val = 0;
 	u16 config_status_base, stream_status_base, stream_id, vc_id;
-
+	// spare duplicate calls
+	if (state->mux.last_set->streaming == on)
+		return 0;
 	if (state->is_depth) {
 		config_status_base = DS5_DEPTH_CONFIG_STATUS;
 		stream_status_base = DS5_DEPTH_STREAM_STATUS;
@@ -3448,11 +3476,13 @@ static int ds5_mux_s_stream(struct v4l2_subdev *sd, int on)
 			dev_dbg(&state->client->dev, "started after %dms\n",
 				i * DS5_START_POLL_TIME);
 		}
-	} else {
+	} else { // off
 		ret = ds5_write(state, DS5_START_STOP_STREAM,
 				DS5_STREAM_STOP | stream_id);
 		if (ret < 0)
 			goto restore_s_state;
+
+		d4xx_reset_oneshot(state);
 	}
 
 	ds5_read(state, config_status_base, &status);
-- 
2.25.1

