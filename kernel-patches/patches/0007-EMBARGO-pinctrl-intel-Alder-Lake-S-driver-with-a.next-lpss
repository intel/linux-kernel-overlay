From e4d1405e5efcbde10902ab07296bffd7c6c0797a Mon Sep 17 00:00:00 2001
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date: Thu, 22 Apr 2021 14:53:06 +0300
Subject: [PATCH 07/20] EMBARGO: pinctrl: intel: Alder Lake-S driver with a
 'new' schema

No distribution!
No use in production!
For testing purposes only!

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
---
 drivers/pinctrl/intel/Makefile              |   1 +
 drivers/pinctrl/intel/pinctrl-alderlake-s.c | 501 ++++++++++++++++++++
 2 files changed, 502 insertions(+)
 create mode 100644 drivers/pinctrl/intel/pinctrl-alderlake-s.c

diff --git a/drivers/pinctrl/intel/Makefile b/drivers/pinctrl/intel/Makefile
index 181ffcf34d62..26244f4af360 100644
--- a/drivers/pinctrl/intel/Makefile
+++ b/drivers/pinctrl/intel/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_PINCTRL_LYNXPOINT)		+= pinctrl-lynxpoint.o
 obj-$(CONFIG_PINCTRL_MERRIFIELD)	+= pinctrl-merrifield.o
 obj-$(CONFIG_PINCTRL_INTEL)		+= pinctrl-intel.o
 obj-$(CONFIG_PINCTRL_ALDERLAKE)		+= pinctrl-alderlake.o
+obj-$(CONFIG_PINCTRL_ALDERLAKE)		+= pinctrl-alderlake-s.o
 obj-$(CONFIG_PINCTRL_BROXTON)		+= pinctrl-broxton.o
 obj-$(CONFIG_PINCTRL_CANNONLAKE)	+= pinctrl-cannonlake.o
 obj-$(CONFIG_PINCTRL_CEDARFORK)		+= pinctrl-cedarfork.o
diff --git a/drivers/pinctrl/intel/pinctrl-alderlake-s.c b/drivers/pinctrl/intel/pinctrl-alderlake-s.c
new file mode 100644
index 000000000000..6ee897fab41e
--- /dev/null
+++ b/drivers/pinctrl/intel/pinctrl-alderlake-s.c
@@ -0,0 +1,501 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Intel Alder Lake PCH pinctrl/GPIO driver
+ *
+ * Copyright (C) 2021, Intel Corporation
+ * Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
+ */
+
+#include <linux/mod_devicetable.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <linux/pinctrl/pinctrl.h>
+
+#include "pinctrl-intel.h"
+
+#define ADL_PAD_OWN	0x0a0
+#define ADL_PADCFGLOCK	0x110
+#define ADL_HOSTSW_OWN	0x150
+#define ADL_GPI_IS	0x200
+#define ADL_GPI_IE	0x220
+
+#define ADL_GPP(r, s, e)				\
+	{						\
+		.reg_num = (r),				\
+		.base = (s),				\
+		.size = ((e) - (s) + 1),		\
+	}
+
+#define ADL_COMMUNITY(s, e, g)				\
+	{						\
+		.padown_offset = ADL_PAD_OWN,		\
+		.padcfglock_offset = ADL_PADCFGLOCK,	\
+		.hostown_offset = ADL_HOSTSW_OWN,	\
+		.is_offset = ADL_GPI_IS,		\
+		.ie_offset = ADL_GPI_IE,		\
+		.pin_base = (s),			\
+		.npins = ((e) - (s) + 1),		\
+		.gpps = (g),				\
+		.ngpps = ARRAY_SIZE(g),			\
+	}
+
+/* Alder Lake-S */
+static const struct pinctrl_pin_desc adls_community0_pins[] = {
+	/* GPP_I */
+	PINCTRL_PIN(0, "EXT_PWR_GATEB"),
+	PINCTRL_PIN(1, "DDSP_HPD_1"),
+	PINCTRL_PIN(2, "DDSP_HPD_2"),
+	PINCTRL_PIN(3, "DDSP_HPD_3"),
+	PINCTRL_PIN(4, "DDSP_HPD_4"),
+	PINCTRL_PIN(5, "DDPB_CTRLCLK"),
+	PINCTRL_PIN(6, "DDPB_CTRLDATA"),
+	PINCTRL_PIN(7, "DDPC_CTRLCLK"),
+	PINCTRL_PIN(8, "DDPC_CTRLDATA"),
+	PINCTRL_PIN(9, "GSPI0_CS1B"),
+	PINCTRL_PIN(10, "GSPI1_CS1B"),
+	PINCTRL_PIN(11, "USB2_OCB_4"),
+	PINCTRL_PIN(12, "USB2_OCB_5"),
+	PINCTRL_PIN(13, "USB2_OCB_6"),
+	PINCTRL_PIN(14, "USB2_OCB_7"),
+	PINCTRL_PIN(15, "GSPI0_CS0B"),
+	PINCTRL_PIN(16, "GSPI0_CLK"),
+	PINCTRL_PIN(17, "GSPI0_MISO"),
+	PINCTRL_PIN(18, "GSPI0_MOSI"),
+	PINCTRL_PIN(19, "GSPI1_CS0B"),
+	PINCTRL_PIN(20, "GSPI1_CLK"),
+	PINCTRL_PIN(21, "GSPI1_MISO"),
+	PINCTRL_PIN(22, "GSPI1_MOSI"),
+	PINCTRL_PIN(23, "GSPI0_CLK_LOOPBK"),
+	PINCTRL_PIN(24, "GSPI1_CLK_LOOPBK"),
+	/* GPP_R */
+	PINCTRL_PIN(25, "HDA_BCLK"),
+	PINCTRL_PIN(26, "HDA_SYNC"),
+	PINCTRL_PIN(27, "HDA_SDO"),
+	PINCTRL_PIN(28, "HDA_SDI_0"),
+	PINCTRL_PIN(29, "HDA_RSTB"),
+	PINCTRL_PIN(30, "HDA_SDI_1"),
+	PINCTRL_PIN(31, "GPP_R_6"),
+	PINCTRL_PIN(32, "GPP_R_7"),
+	PINCTRL_PIN(33, "GPP_R_8"),
+	PINCTRL_PIN(34, "DDSP_HPD_A"),
+	PINCTRL_PIN(35, "DDSP_HPD_B"),
+	PINCTRL_PIN(36, "DDSP_HPD_C"),
+	PINCTRL_PIN(37, "ISH_SPI_CSB"),
+	PINCTRL_PIN(38, "ISH_SPI_CLK"),
+	PINCTRL_PIN(39, "ISH_SPI_MISO"),
+	PINCTRL_PIN(40, "ISH_SPI_MOSI"),
+	PINCTRL_PIN(41, "DDP1_CTRLCLK"),
+	PINCTRL_PIN(42, "DDP1_CTRLDATA"),
+	PINCTRL_PIN(43, "DDP2_CTRLCLK"),
+	PINCTRL_PIN(44, "DDP2_CTRLDATA"),
+	PINCTRL_PIN(45, "DDPA_CTRLCLK"),
+	PINCTRL_PIN(46, "DDPA_CTRLDATA"),
+	PINCTRL_PIN(47, "GSPI2_CLK_LOOPBK"),
+	/* GPP_J */
+	PINCTRL_PIN(48, "CNV_PA_BLANKING"),
+	PINCTRL_PIN(49, "CPU_C10_GATEB"),
+	PINCTRL_PIN(50, "CNV_BRI_DT"),
+	PINCTRL_PIN(51, "CNV_BRI_RSP"),
+	PINCTRL_PIN(52, "CNV_RGI_DT"),
+	PINCTRL_PIN(53, "CNV_RGI_RSP"),
+	PINCTRL_PIN(54, "CNV_MFUART2_RXD"),
+	PINCTRL_PIN(55, "CNV_MFUART2_TXD"),
+	PINCTRL_PIN(56, "SRCCLKREQB_16"),
+	PINCTRL_PIN(57, "SRCCLKREQB_17"),
+	PINCTRL_PIN(58, "BSSB_LS_RX"),
+	PINCTRL_PIN(59, "BSSB_LS_TX"),
+	/* vGPIO */
+	PINCTRL_PIN(60, "CNV_BTEN"),
+	PINCTRL_PIN(61, "CNV_BT_HOST_WAKEB"),
+	PINCTRL_PIN(62, "CNV_BT_IF_SELECT"),
+	PINCTRL_PIN(63, "vCNV_BT_UART_TXD"),
+	PINCTRL_PIN(64, "vCNV_BT_UART_RXD"),
+	PINCTRL_PIN(65, "vCNV_BT_UART_CTS_B"),
+	PINCTRL_PIN(66, "vCNV_BT_UART_RTS_B"),
+	PINCTRL_PIN(67, "vCNV_MFUART1_TXD"),
+	PINCTRL_PIN(68, "vCNV_MFUART1_RXD"),
+	PINCTRL_PIN(69, "vCNV_MFUART1_CTS_B"),
+	PINCTRL_PIN(70, "vCNV_MFUART1_RTS_B"),
+	PINCTRL_PIN(71, "vUART0_TXD"),
+	PINCTRL_PIN(72, "vUART0_RXD"),
+	PINCTRL_PIN(73, "vUART0_CTS_B"),
+	PINCTRL_PIN(74, "vUART0_RTS_B"),
+	PINCTRL_PIN(75, "vISH_UART0_TXD"),
+	PINCTRL_PIN(76, "vISH_UART0_RXD"),
+	PINCTRL_PIN(77, "vISH_UART0_CTS_B"),
+	PINCTRL_PIN(78, "vISH_UART0_RTS_B"),
+	PINCTRL_PIN(79, "vCNV_BT_I2S_BCLK"),
+	PINCTRL_PIN(80, "vCNV_BT_I2S_WS_SYNC"),
+	PINCTRL_PIN(81, "vCNV_BT_I2S_SDO"),
+	PINCTRL_PIN(82, "vCNV_BT_I2S_SDI"),
+	PINCTRL_PIN(83, "vI2S2_SCLK"),
+	PINCTRL_PIN(84, "vI2S2_SFRM"),
+	PINCTRL_PIN(85, "vI2S2_TXD"),
+	PINCTRL_PIN(86, "vI2S2_RXD"),
+	/* vGPIO_0 */
+	PINCTRL_PIN(87, "ESPI_USB_OCB_0"),
+	PINCTRL_PIN(88, "ESPI_USB_OCB_1"),
+	PINCTRL_PIN(89, "ESPI_USB_OCB_2"),
+	PINCTRL_PIN(90, "ESPI_USB_OCB_3"),
+	PINCTRL_PIN(91, "USB_CPU_OCB_0"),
+	PINCTRL_PIN(92, "USB_CPU_OCB_1"),
+	PINCTRL_PIN(93, "USB_CPU_OCB_2"),
+	PINCTRL_PIN(94, "USB_CPU_OCB_3"),
+};
+
+static const struct intel_padgroup adls_community0_gpps[] = {
+	ADL_GPP(0, 0, 24),	/* GPP_I */
+	ADL_GPP(1, 25, 47),	/* GPP_R */
+	ADL_GPP(2, 48, 59),	/* GPP_J */
+	ADL_GPP(3, 60, 86),	/* vGPIO */
+	ADL_GPP(4, 87, 94),	/* vGPIO_0 */
+};
+
+static const struct intel_community adls_community0[] = {
+	ADL_COMMUNITY(0, 94, adls_community0_gpps),
+};
+
+static const struct intel_pinctrl_soc_data adls_community0_soc_data = {
+	.uid = "0",
+	.pins = adls_community0_pins,
+	.npins = ARRAY_SIZE(adls_community0_pins),
+	.communities = adls_community0,
+	.ncommunities = ARRAY_SIZE(adls_community0),
+};
+
+static const struct pinctrl_pin_desc adls_community1_pins[] = {
+	/* GPP_B */
+	PINCTRL_PIN(0, "PCIE_LNK_DOWN"),
+	PINCTRL_PIN(1, "ISH_UART0_RTSB"),
+	PINCTRL_PIN(2, "VRALERTB"),
+	PINCTRL_PIN(3, "CPU_GP_2"),
+	PINCTRL_PIN(4, "CPU_GP_3"),
+	PINCTRL_PIN(5, "SX_EXIT_HOLDOFFB"),
+	PINCTRL_PIN(6, "CLKOUT_48"),
+	PINCTRL_PIN(7, "ISH_GP_7"),
+	PINCTRL_PIN(8, "ISH_GP_0"),
+	PINCTRL_PIN(9, "ISH_GP_1"),
+	PINCTRL_PIN(10, "ISH_GP_2"),
+	PINCTRL_PIN(11, "I2S_MCLK"),
+	PINCTRL_PIN(12, "SLP_S0B"),
+	PINCTRL_PIN(13, "PLTRSTB"),
+	PINCTRL_PIN(14, "SPKR"),
+	PINCTRL_PIN(15, "ISH_GP_3"),
+	PINCTRL_PIN(16, "ISH_GP_4"),
+	PINCTRL_PIN(17, "ISH_GP_5"),
+	PINCTRL_PIN(18, "PMCALERTB"),
+	PINCTRL_PIN(19, "FUSA_DIAGTEST_EN"),
+	PINCTRL_PIN(20, "FUSA_DIAGTEST_MODE"),
+	PINCTRL_PIN(21, "GPP_B_21"),
+	PINCTRL_PIN(22, "GPP_B_22"),
+	PINCTRL_PIN(23, "SML1ALERTB"),
+	/* GPP_G */
+	PINCTRL_PIN(24, "GPP_G_0"),
+	PINCTRL_PIN(25, "GPP_G_1"),
+	PINCTRL_PIN(26, "DNX_FORCE_RELOAD"),
+	PINCTRL_PIN(27, "GMII_MDC_0"),
+	PINCTRL_PIN(28, "GMII_MDIO_0"),
+	PINCTRL_PIN(29, "SLP_DRAMB"),
+	PINCTRL_PIN(30, "GPP_G_6"),
+	PINCTRL_PIN(31, "GPP_G_7"),
+	/* GPP_H */
+	PINCTRL_PIN(32, "SRCCLKREQB_18"),
+	PINCTRL_PIN(33, "GPP_H_1"),
+	PINCTRL_PIN(34, "SRCCLKREQB_8"),
+	PINCTRL_PIN(35, "SRCCLKREQB_9"),
+	PINCTRL_PIN(36, "SRCCLKREQB_10"),
+	PINCTRL_PIN(37, "SRCCLKREQB_11"),
+	PINCTRL_PIN(38, "SRCCLKREQB_12"),
+	PINCTRL_PIN(39, "SRCCLKREQB_13"),
+	PINCTRL_PIN(40, "SRCCLKREQB_14"),
+	PINCTRL_PIN(41, "SRCCLKREQB_15"),
+	PINCTRL_PIN(42, "SML2CLK"),
+	PINCTRL_PIN(43, "SML2DATA"),
+	PINCTRL_PIN(44, "SML2ALERTB"),
+	PINCTRL_PIN(45, "SML3CLK"),
+	PINCTRL_PIN(46, "SML3DATA"),
+	PINCTRL_PIN(47, "SML3ALERTB"),
+	PINCTRL_PIN(48, "SML4CLK"),
+	PINCTRL_PIN(49, "SML4DATA"),
+	PINCTRL_PIN(50, "SML4ALERTB"),
+	PINCTRL_PIN(51, "ISH_I2C0_SDA"),
+	PINCTRL_PIN(52, "ISH_I2C0_SCL"),
+	PINCTRL_PIN(53, "ISH_I2C1_SDA"),
+	PINCTRL_PIN(54, "ISH_I2C1_SCL"),
+	PINCTRL_PIN(55, "TIME_SYNC_0"),
+};
+
+static const struct intel_padgroup adls_community1_gpps[] = {
+	ADL_GPP(0, 0, 23),	/* GPP_B */
+	ADL_GPP(1, 24, 31),	/* GPP_G */
+	ADL_GPP(2, 32, 55),	/* GPP_H */
+};
+
+static const struct intel_community adls_community1[] = {
+	ADL_COMMUNITY(0, 55, adls_community1_gpps),
+};
+
+static const struct intel_pinctrl_soc_data adls_community1_soc_data = {
+	.uid = "1",
+	.pins = adls_community1_pins,
+	.npins = ARRAY_SIZE(adls_community1_pins),
+	.communities = adls_community1,
+	.ncommunities = ARRAY_SIZE(adls_community1),
+};
+
+static const struct pinctrl_pin_desc adls_community3_pins[] = {
+	/* SPI0 */
+	PINCTRL_PIN(0, "SPI0_IO_2"),
+	PINCTRL_PIN(1, "SPI0_IO_3"),
+	PINCTRL_PIN(2, "SPI0_MOSI_IO_0"),
+	PINCTRL_PIN(3, "SPI0_MISO_IO_1"),
+	PINCTRL_PIN(4, "SPI0_TPM_CSB"),
+	PINCTRL_PIN(5, "SPI0_FLASH_0_CSB"),
+	PINCTRL_PIN(6, "SPI0_FLASH_1_CSB"),
+	PINCTRL_PIN(7, "SPI0_CLK"),
+	PINCTRL_PIN(8, "SPI0_CLK_LOOPBK"),
+	/* GPP_A */
+	PINCTRL_PIN(9, "ESPI_IO_0"),
+	PINCTRL_PIN(10, "ESPI_IO_1"),
+	PINCTRL_PIN(11, "ESPI_IO_2"),
+	PINCTRL_PIN(12, "ESPI_IO_3"),
+	PINCTRL_PIN(13, "ESPI_CS0B"),
+	PINCTRL_PIN(14, "ESPI_CLK"),
+	PINCTRL_PIN(15, "ESPI_RESETB"),
+	PINCTRL_PIN(16, "ESPI_CS1B"),
+	PINCTRL_PIN(17, "ESPI_CS2B"),
+	PINCTRL_PIN(18, "ESPI_CS3B"),
+	PINCTRL_PIN(19, "ESPI_ALERT0B"),
+	PINCTRL_PIN(20, "ESPI_ALERT1B"),
+	PINCTRL_PIN(21, "ESPI_ALERT2B"),
+	PINCTRL_PIN(22, "ESPI_ALERT3B"),
+	PINCTRL_PIN(23, "GPP_A_14"),
+	PINCTRL_PIN(24, "ESPI_CLK_LOOPBK"),
+	/* GPP_C */
+	PINCTRL_PIN(25, "SMBCLK"),
+	PINCTRL_PIN(26, "SMBDATA"),
+	PINCTRL_PIN(27, "SMBALERTB"),
+	PINCTRL_PIN(28, "ISH_UART0_RXD"),
+	PINCTRL_PIN(29, "ISH_UART0_TXD"),
+	PINCTRL_PIN(30, "SML0ALERTB"),
+	PINCTRL_PIN(31, "ISH_I2C2_SDA"),
+	PINCTRL_PIN(32, "ISH_I2C2_SCL"),
+	PINCTRL_PIN(33, "UART0_RXD"),
+	PINCTRL_PIN(34, "UART0_TXD"),
+	PINCTRL_PIN(35, "UART0_RTSB"),
+	PINCTRL_PIN(36, "UART0_CTSB"),
+	PINCTRL_PIN(37, "UART1_RXD"),
+	PINCTRL_PIN(38, "UART1_TXD"),
+	PINCTRL_PIN(39, "UART1_RTSB"),
+	PINCTRL_PIN(40, "UART1_CTSB"),
+	PINCTRL_PIN(41, "I2C0_SDA"),
+	PINCTRL_PIN(42, "I2C0_SCL"),
+	PINCTRL_PIN(43, "I2C1_SDA"),
+	PINCTRL_PIN(44, "I2C1_SCL"),
+	PINCTRL_PIN(45, "UART2_RXD"),
+	PINCTRL_PIN(46, "UART2_TXD"),
+	PINCTRL_PIN(47, "UART2_RTSB"),
+	PINCTRL_PIN(48, "UART2_CTSB"),
+};
+
+static const struct intel_padgroup adls_community3_gpps[] = {
+	ADL_GPP(0, 0, 8),	/* SPI0 */
+	ADL_GPP(1, 9, 24),	/* GPP_A */
+	ADL_GPP(2, 25, 48),	/* GPP_C */
+};
+
+static const struct intel_community adls_community3[] = {
+	ADL_COMMUNITY(0, 48, adls_community3_gpps),
+};
+
+static const struct intel_pinctrl_soc_data adls_community3_soc_data = {
+	.uid = "3",
+	.pins = adls_community3_pins,
+	.npins = ARRAY_SIZE(adls_community3_pins),
+	.communities = adls_community3,
+	.ncommunities = ARRAY_SIZE(adls_community3),
+};
+
+static const struct pinctrl_pin_desc adls_community4_pins[] = {
+	/* GPP_S */
+	PINCTRL_PIN(0, "SNDW1_CLK"),
+	PINCTRL_PIN(1, "SNDW1_DATA"),
+	PINCTRL_PIN(2, "SNDW2_CLK"),
+	PINCTRL_PIN(3, "SNDW2_DATA"),
+	PINCTRL_PIN(4, "SNDW3_CLK"),
+	PINCTRL_PIN(5, "SNDW3_DATA"),
+	PINCTRL_PIN(6, "SNDW4_CLK"),
+	PINCTRL_PIN(7, "SNDW4_DATA"),
+	/* GPP_E */
+	PINCTRL_PIN(8, "SATAXPCIE_0"),
+	PINCTRL_PIN(9, "SATAXPCIE_1"),
+	PINCTRL_PIN(10, "SATAXPCIE_2"),
+	PINCTRL_PIN(11, "CPU_GP_0"),
+	PINCTRL_PIN(12, "SATA_DEVSLP_0"),
+	PINCTRL_PIN(13, "SATA_DEVSLP_1"),
+	PINCTRL_PIN(14, "SATA_DEVSLP_2"),
+	PINCTRL_PIN(15, "CPU_GP_1"),
+	PINCTRL_PIN(16, "SATA_LEDB"),
+	PINCTRL_PIN(17, "USB2_OCB_0"),
+	PINCTRL_PIN(18, "USB2_OCB_1"),
+	PINCTRL_PIN(19, "USB2_OCB_2"),
+	PINCTRL_PIN(20, "USB2_OCB_3"),
+	PINCTRL_PIN(21, "SPI1_CSB"),
+	PINCTRL_PIN(22, "SPI1_CLK"),
+	PINCTRL_PIN(23, "SPI1_MISO_IO_1"),
+	PINCTRL_PIN(24, "SPI1_MOSI_IO_0"),
+	PINCTRL_PIN(25, "SPI1_IO_2"),
+	PINCTRL_PIN(26, "SPI1_IO_3"),
+	PINCTRL_PIN(27, "GPP_E_19"),
+	PINCTRL_PIN(28, "GPP_E_20"),
+	PINCTRL_PIN(29, "ISH_UART0_CTSB"),
+	PINCTRL_PIN(30, "SPI1_CLK_LOOPBK"),
+	/* GPP_K */
+	PINCTRL_PIN(31, "GSXDOUT"),
+	PINCTRL_PIN(32, "GSXSLOAD"),
+	PINCTRL_PIN(33, "GSXDIN"),
+	PINCTRL_PIN(34, "GSXSRESETB"),
+	PINCTRL_PIN(35, "GSXCLK"),
+	PINCTRL_PIN(36, "ADR_COMPLETE"),
+	PINCTRL_PIN(37, "GPP_K_6"),
+	PINCTRL_PIN(38, "GPP_K_7"),
+	PINCTRL_PIN(39, "CORE_VID_0"),
+	PINCTRL_PIN(40, "CORE_VID_1"),
+	PINCTRL_PIN(41, "GPP_K_10"),
+	PINCTRL_PIN(42, "GPP_K_11"),
+	PINCTRL_PIN(43, "SYS_PWROK"),
+	PINCTRL_PIN(44, "SYS_RESETB"),
+	PINCTRL_PIN(45, "MLK_RSTB"),
+	/* GPP_F */
+	PINCTRL_PIN(46, "SATAXPCIE_3"),
+	PINCTRL_PIN(47, "SATAXPCIE_4"),
+	PINCTRL_PIN(48, "SATAXPCIE_5"),
+	PINCTRL_PIN(49, "SATAXPCIE_6"),
+	PINCTRL_PIN(50, "SATAXPCIE_7"),
+	PINCTRL_PIN(51, "SATA_DEVSLP_3"),
+	PINCTRL_PIN(52, "SATA_DEVSLP_4"),
+	PINCTRL_PIN(53, "SATA_DEVSLP_5"),
+	PINCTRL_PIN(54, "SATA_DEVSLP_6"),
+	PINCTRL_PIN(55, "SATA_DEVSLP_7"),
+	PINCTRL_PIN(56, "SATA_SCLOCK"),
+	PINCTRL_PIN(57, "SATA_SLOAD"),
+	PINCTRL_PIN(58, "SATA_SDATAOUT1"),
+	PINCTRL_PIN(59, "SATA_SDATAOUT0"),
+	PINCTRL_PIN(60, "PS_ONB"),
+	PINCTRL_PIN(61, "M2_SKT2_CFG_0"),
+	PINCTRL_PIN(62, "M2_SKT2_CFG_1"),
+	PINCTRL_PIN(63, "M2_SKT2_CFG_2"),
+	PINCTRL_PIN(64, "M2_SKT2_CFG_3"),
+	PINCTRL_PIN(65, "L_VDDEN"),
+	PINCTRL_PIN(66, "L_BKLTEN"),
+	PINCTRL_PIN(67, "L_BKLTCTL"),
+	PINCTRL_PIN(68, "VNN_CTRL"),
+	PINCTRL_PIN(69, "GPP_F_23"),
+};
+
+static const struct intel_padgroup adls_community4_gpps[] = {
+	ADL_GPP(0, 0, 7),	/* GPP_S */
+	ADL_GPP(1, 8, 30),	/* GPP_E */
+	ADL_GPP(2, 31, 45),	/* GPP_K */
+	ADL_GPP(3, 46, 69),	/* GPP_F */
+};
+
+static const struct intel_community adls_community4[] = {
+	ADL_COMMUNITY(0, 69, adls_community4_gpps),
+};
+
+static const struct intel_pinctrl_soc_data adls_community4_soc_data = {
+	.uid = "4",
+	.pins = adls_community4_pins,
+	.npins = ARRAY_SIZE(adls_community4_pins),
+	.communities = adls_community4,
+	.ncommunities = ARRAY_SIZE(adls_community4),
+};
+
+static const struct pinctrl_pin_desc adls_community5_pins[] = {
+	/* GPP_D */
+	PINCTRL_PIN(0, "SRCCLKREQB_0"),
+	PINCTRL_PIN(1, "SRCCLKREQB_1"),
+	PINCTRL_PIN(2, "SRCCLKREQB_2"),
+	PINCTRL_PIN(3, "SRCCLKREQB_3"),
+	PINCTRL_PIN(4, "SML1CLK"),
+	PINCTRL_PIN(5, "I2S2_SFRM"),
+	PINCTRL_PIN(6, "I2S2_TXD"),
+	PINCTRL_PIN(7, "I2S2_RXD"),
+	PINCTRL_PIN(8, "I2S2_SCLK"),
+	PINCTRL_PIN(9, "SML0CLK"),
+	PINCTRL_PIN(10, "SML0DATA"),
+	PINCTRL_PIN(11, "SRCCLKREQB_4"),
+	PINCTRL_PIN(12, "SRCCLKREQB_5"),
+	PINCTRL_PIN(13, "SRCCLKREQB_6"),
+	PINCTRL_PIN(14, "SRCCLKREQB_7"),
+	PINCTRL_PIN(15, "SML1DATA"),
+	PINCTRL_PIN(16, "GSPI3_CS0B"),
+	PINCTRL_PIN(17, "GSPI3_CLK"),
+	PINCTRL_PIN(18, "GSPI3_MISO"),
+	PINCTRL_PIN(19, "GSPI3_MOSI"),
+	PINCTRL_PIN(20, "UART3_RXD"),
+	PINCTRL_PIN(21, "UART3_TXD"),
+	PINCTRL_PIN(22, "UART3_RTSB"),
+	PINCTRL_PIN(23, "UART3_CTSB"),
+	PINCTRL_PIN(24, "GSPI3_CLK_LOOPBK"),
+	/* JTAG */
+	PINCTRL_PIN(25, "JTAG_TDO"),
+	PINCTRL_PIN(26, "JTAGX"),
+	PINCTRL_PIN(27, "PRDYB"),
+	PINCTRL_PIN(28, "PREQB"),
+	PINCTRL_PIN(29, "JTAG_TDI"),
+	PINCTRL_PIN(30, "JTAG_TMS"),
+	PINCTRL_PIN(31, "JTAG_TCK"),
+	PINCTRL_PIN(32, "DBG_PMODE"),
+	PINCTRL_PIN(33, "CPU_TRSTB"),
+};
+
+static const struct intel_padgroup adls_community5_gpps[] = {
+	ADL_GPP(0, 0, 24),	/* GPP_D */
+	ADL_GPP(1, 25, 33),	/* JTAG */
+};
+
+static const struct intel_community adls_community5[] = {
+	ADL_COMMUNITY(0, 33, adls_community5_gpps),
+};
+
+static const struct intel_pinctrl_soc_data adls_community5_soc_data = {
+	.uid = "5",
+	.pins = adls_community5_pins,
+	.npins = ARRAY_SIZE(adls_community5_pins),
+	.communities = adls_community5,
+	.ncommunities = ARRAY_SIZE(adls_community5),
+};
+
+static const struct intel_pinctrl_soc_data *adls_soc_data_array[] = {
+	&adls_community0_soc_data,
+	&adls_community1_soc_data,
+	&adls_community3_soc_data,
+	&adls_community4_soc_data,
+	&adls_community5_soc_data,
+	NULL
+};
+
+static const struct acpi_device_id adl_pinctrl_acpi_match[] = {
+	{ "ADLS0000", (kernel_ulong_t)adls_soc_data_array },
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, adl_pinctrl_acpi_match);
+
+static INTEL_PINCTRL_PM_OPS(adl_pinctrl_pm_ops);
+
+static struct platform_driver adl_pinctrl_driver = {
+	.probe = intel_pinctrl_probe_by_uid,
+	.driver = {
+		.name = "alderlake-s-pinctrl",
+		.acpi_match_table = adl_pinctrl_acpi_match,
+		.pm = &adl_pinctrl_pm_ops,
+	},
+};
+module_platform_driver(adl_pinctrl_driver);
+
+MODULE_AUTHOR("Andy Shevchenko <andriy.shevchenko@linux.intel.com>");
+MODULE_DESCRIPTION("Intel Alder Lake PCH pinctrl/GPIO driver");
+MODULE_LICENSE("GPL v2");
-- 
2.32.0

