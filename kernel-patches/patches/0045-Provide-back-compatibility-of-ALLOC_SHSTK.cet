From 74ead4d1970b0a8d6ff161ba7ef301c9cec9eea6 Mon Sep 17 00:00:00 2001
From: Yu-cheng Yu <yu-cheng.yu@intel.com>
Date: Tue, 8 Sep 2020 15:39:28 -0700
Subject: [PATCH 45/46] Provide back compatibility of ALLOC_SHSTK

Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
---
 arch/x86/include/asm/cet.h        |  1 +
 arch/x86/include/uapi/asm/prctl.h |  1 +
 arch/x86/kernel/cet_prctl.c       | 26 ++++++++++++++++++++++++++
 arch/x86/kernel/shstk.c           | 26 ++++++++++++++++++++++++++
 4 files changed, 54 insertions(+)

diff --git a/arch/x86/include/asm/cet.h b/arch/x86/include/asm/cet.h
index 2618faf3fda5..b8d6c47427a6 100644
--- a/arch/x86/include/asm/cet.h
+++ b/arch/x86/include/asm/cet.h
@@ -28,6 +28,7 @@ int shstk_setup_rstor_token(bool ia32, unsigned long restorer,
 int shstk_check_rstor_token(bool ia32, unsigned long *new_ssp);
 int setup_signal_shadow_stack(int ia32, void __user *restorer);
 int restore_signal_shadow_stack(void);
+unsigned long cet_alloc_shstk(unsigned long size);
 #else
 static inline int shstk_setup(void) { return 0; }
 static inline int shstk_alloc_thread_stack(struct task_struct *p,
diff --git a/arch/x86/include/uapi/asm/prctl.h b/arch/x86/include/uapi/asm/prctl.h
index 9245bf629120..d962f0ec9ccf 100644
--- a/arch/x86/include/uapi/asm/prctl.h
+++ b/arch/x86/include/uapi/asm/prctl.h
@@ -17,5 +17,6 @@
 #define ARCH_X86_CET_STATUS		0x3001
 #define ARCH_X86_CET_DISABLE		0x3002
 #define ARCH_X86_CET_LOCK		0x3003
+#define ARCH_X86_CET_ALLOC_SHSTK	0x3004
 
 #endif /* _ASM_X86_PRCTL_H */
diff --git a/arch/x86/kernel/cet_prctl.c b/arch/x86/kernel/cet_prctl.c
index bd3c80d402e7..88163af79925 100644
--- a/arch/x86/kernel/cet_prctl.c
+++ b/arch/x86/kernel/cet_prctl.c
@@ -28,6 +28,27 @@ static int cet_copy_status_to_user(struct thread_shstk *shstk, u64 __user *ubuf)
 	return copy_to_user(ubuf, buf, sizeof(buf));
 }
 
+#ifdef CONFIG_X86_SHADOW_STACK
+static int handle_alloc_shstk(u64 arg2)
+{
+	unsigned long addr, size;
+
+	if (get_user(size, (unsigned long __user *)arg2))
+		return -EFAULT;
+
+	addr = cet_alloc_shstk(size);
+	if (IS_ERR_VALUE(addr))
+		return PTR_ERR((void *)addr);
+
+	if (put_user((u64)addr, (u64 __user *)arg2)) {
+		vm_munmap(addr, size);
+		return -EFAULT;
+	}
+
+	return 0;
+}
+#endif
+
 int prctl_cet(int option, u64 arg2)
 {
 	struct thread_shstk *shstk;
@@ -59,6 +80,11 @@ int prctl_cet(int option, u64 arg2)
 		shstk->locked = 1;
 		return 0;
 
+#ifdef CONFIG_X86_SHADOW_STACK
+	case ARCH_X86_CET_ALLOC_SHSTK:
+		return handle_alloc_shstk(arg2);
+#endif
+
 	default:
 		return -ENOSYS;
 	}
diff --git a/arch/x86/kernel/shstk.c b/arch/x86/kernel/shstk.c
index 9f687e7e1a85..02eec274ea50 100644
--- a/arch/x86/kernel/shstk.c
+++ b/arch/x86/kernel/shstk.c
@@ -355,3 +355,29 @@ int restore_signal_shadow_stack(void)
 
 	return err;
 }
+
+unsigned long cet_alloc_shstk(unsigned long len)
+{
+	unsigned long token;
+	unsigned long addr, ssp;
+
+	addr = alloc_shstk(round_up(len, PAGE_SIZE));
+
+	if (IS_ERR_VALUE(addr))
+		return addr;
+
+	/* Restore token is 8 bytes and aligned to 8 bytes */
+	ssp = addr + len;
+	token = ssp;
+
+	if (!in_ia32_syscall())
+		token |= BIT(0);
+	ssp -= 8;
+
+	if (write_user_shstk_64((u64 __user *)ssp, (u64)token)) {
+		vm_munmap(addr, len);
+		return -EINVAL;
+	}
+
+	return addr;
+}
-- 
2.27.0

