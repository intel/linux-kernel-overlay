From 56c07d3b32061ec7cb4a03f093c454cf78e27f4a Mon Sep 17 00:00:00 2001
From: Ling Pei Lee <pei.lee.ling@intel.com>
Date: Thu, 11 Nov 2021 17:56:14 +0800
Subject: [PATCH 2/7] net: stmmac: Program SNSINC if interval has floating
 points

Current implementation does not program sub-nanosecond increment value
when interval has floating point. With this change, the floating points
of interval value shall be calculated and to be programmed into SNSINC
field of MAC_Sub_Second register.

Signed-off-by: Wong Vee Khee <vee.khee.wong@linux.intel.com>
Signed-off-by: Ling Pei Lee <pei.lee.ling@intel.com>
---
 .../ethernet/stmicro/stmmac/stmmac_hwtstamp.c | 24 +++++++++++++++----
 .../net/ethernet/stmicro/stmmac/stmmac_ptp.h  |  2 ++
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c
index 074e2cdfb0fa..46e268f13ce3 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_hwtstamp.c
@@ -28,7 +28,8 @@ static void config_sub_second_increment(void __iomem *ioaddr,
 {
 	u32 value = readl(ioaddr + PTP_TCR);
 	unsigned long data;
-	u32 reg_value;
+	u32 reg_value, rem;
+	u64 snsinc;
 
 	/* For GMAC3.x, 4.x versions, in "fine adjustement mode" set sub-second
 	 * increment to twice the number of nanoseconds of a clock cycle.
@@ -39,9 +40,19 @@ static void config_sub_second_increment(void __iomem *ioaddr,
 	 * 2000000000ULL / ptp_clock.
 	 */
 	if (value & PTP_TCR_TSCFUPDT)
-		data = (2000000000ULL / ptp_clock);
+		data = div_u64_rem(2000000000ULL, ptp_clock, &rem);
 	else
-		data = (1000000000ULL / ptp_clock);
+		data = div_u64_rem(1000000000ULL, ptp_clock, &rem);
+
+	if (rem) {
+		snsinc = rem;
+		/* This field contains the sub-nanosecond increment value,
+		 * represented in nanoseconds multiplied by 2^8.
+		 */
+		snsinc <<= 8;
+		snsinc /= ptp_clock;
+		snsinc &= PTP_SSIR_SNSINC_MASK;
+	}
 
 	/* 0.465ns accuracy */
 	if (!(value & PTP_TCR_TSCTRLSSR))
@@ -50,9 +61,14 @@ static void config_sub_second_increment(void __iomem *ioaddr,
 	data &= PTP_SSIR_SSINC_MASK;
 
 	reg_value = data;
-	if (gmac4)
+
+	if (gmac4) {
 		reg_value <<= GMAC4_PTP_SSIR_SSINC_SHIFT;
 
+		if (rem)
+			reg_value |= (snsinc << GMAC4_PTP_SSIR_SNSINC_SHIFT);
+	}
+
 	writel(reg_value, ioaddr + PTP_SSIR);
 
 	if (ssinc)
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.h b/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.h
index 53172a439810..9d1e657a0f2b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ptp.h
@@ -65,7 +65,9 @@
 
 /* SSIR defines */
 #define	PTP_SSIR_SSINC_MASK		0xff
+#define	PTP_SSIR_SNSINC_MASK		0xff
 #define	GMAC4_PTP_SSIR_SSINC_SHIFT	16
+#define	GMAC4_PTP_SSIR_SNSINC_SHIFT	8
 
 /* Auxiliary Control defines */
 #define	PTP_ACR_ATSFC		BIT(0)	/* Auxiliary Snapshot FIFO Clear */
-- 
2.27.0

