From cb625d05728fe7402f14a0c4a8733b2ccd614faf Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Wed, 24 Nov 2021 13:16:38 +0800
Subject: [PATCH 034/888] Revert "drm/i915/guc: Assign contexts in parent-child
 relationship consecutive guc_ids"

This reverts commit a5e000d7dd1a7d3024ab82289c2d38b2159126f8.
---
 drivers/gpu/drm/i915/gt/uc/intel_guc.h        |   6 +-
 .../gpu/drm/i915/gt/uc/intel_guc_submission.c | 107 +++++-------------
 2 files changed, 27 insertions(+), 86 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc.h b/drivers/gpu/drm/i915/gt/uc/intel_guc.h
index 3f95b1b4f15c..023953e77553 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc.h
@@ -61,13 +61,9 @@ struct intel_guc {
 		 */
 		spinlock_t lock;
 		/**
-		 * @guc_ids: used to allocate new guc_ids, single-lrc
+		 * @guc_ids: used to allocate new guc_ids
 		 */
 		struct ida guc_ids;
-		/**
-		 * @guc_ids_bitmap: used to allocate new guc_ids, multi-lrc
-		 */
-		unsigned long *guc_ids_bitmap;
 		/** @num_guc_ids: number of guc_ids that can be used */
 		u32 num_guc_ids;
 		/** @max_guc_ids: max number of guc_ids that can be used */
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
index 82c80f8ff082..dac917d8de2c 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
@@ -125,18 +125,6 @@ guc_create_virtual(struct intel_engine_cs **siblings, unsigned int count);
 
 #define GUC_REQUEST_SIZE 64 /* bytes */
 
-/*
- * We reserve 1/16 of the guc_ids for multi-lrc as these need to be contiguous
- * per the GuC submission interface. A different allocation algorithm is used
- * (bitmap vs. ida) between multi-lrc and single-lrc hence the reason to
- * partition the guc_id space. We believe the number of multi-lrc contexts in
- * use should be low and 1/16 should be sufficient. Minimum of 32 guc_ids for
- * multi-lrc.
- */
-#define NUMBER_MULTI_LRC_GUC_ID(guc) \
-	((guc)->submission_state.num_guc_ids / 16 > 32 ? \
-	 (guc)->submission_state.num_guc_ids / 16 : 32)
-
 /*
  * Below is a set of functions which control the GuC scheduling state which
  * require a lock.
@@ -1191,10 +1179,6 @@ int intel_guc_submission_init(struct intel_guc *guc)
 	INIT_LIST_HEAD(&guc->submission_state.destroyed_contexts);
 	intel_gt_pm_unpark_work_init(&guc->submission_state.destroyed_worker,
 				     destroyed_worker_func);
-	guc->submission_state.guc_ids_bitmap =
-		bitmap_zalloc(NUMBER_MULTI_LRC_GUC_ID(guc), GFP_KERNEL);
-	if (!guc->submission_state.guc_ids_bitmap)
-		return -ENOMEM;
 
 	return 0;
 }
@@ -1207,7 +1191,6 @@ void intel_guc_submission_fini(struct intel_guc *guc)
 	guc_lrc_desc_pool_destroy(guc);
 	guc_flush_destroyed_contexts(guc);
 	i915_sched_engine_put(guc->sched_engine);
-	bitmap_free(guc->submission_state.guc_ids_bitmap);
 }
 
 static void queue_request(struct i915_sched_engine *sched_engine,
@@ -1259,43 +1242,18 @@ static void guc_submit_request(struct i915_request *rq)
 	spin_unlock_irqrestore(&sched_engine->lock, flags);
 }
 
-static int new_guc_id(struct intel_guc *guc, struct intel_context *ce)
+static int new_guc_id(struct intel_guc *guc)
 {
-	int ret;
-
-	GEM_BUG_ON(intel_context_is_child(ce));
-
-	if (intel_context_is_parent(ce))
-		ret = bitmap_find_free_region(guc->submission_state.guc_ids_bitmap,
-					      NUMBER_MULTI_LRC_GUC_ID(guc),
-					      order_base_2(ce->guc_number_children
-							   + 1));
-	else
-		ret = ida_simple_get(&guc->submission_state.guc_ids,
-				     NUMBER_MULTI_LRC_GUC_ID(guc),
-				     guc->submission_state.num_guc_ids,
-				     GFP_KERNEL | __GFP_RETRY_MAYFAIL |
-				     __GFP_NOWARN);
-	if (unlikely(ret < 0))
-		return ret;
-
-	ce->guc_id.id = ret;
-	return 0;
+	return ida_simple_get(&guc->submission_state.guc_ids, 0,
+			      guc->submission_state.num_guc_ids, GFP_KERNEL |
+			      __GFP_RETRY_MAYFAIL | __GFP_NOWARN);
 }
 
 static void __release_guc_id(struct intel_guc *guc, struct intel_context *ce)
 {
-	GEM_BUG_ON(intel_context_is_child(ce));
-
 	if (!context_guc_id_invalid(ce)) {
-		if (intel_context_is_parent(ce))
-			bitmap_release_region(guc->submission_state.guc_ids_bitmap,
-					      ce->guc_id.id,
-					      order_base_2(ce->guc_number_children
-							   + 1));
-		else
-			ida_simple_remove(&guc->submission_state.guc_ids,
-					  ce->guc_id.id);
+		ida_simple_remove(&guc->submission_state.guc_ids,
+				  ce->guc_id.id);
 		reset_lrc_desc(guc, ce->guc_id.id);
 		set_context_guc_id_invalid(ce);
 	}
@@ -1312,60 +1270,49 @@ static void release_guc_id(struct intel_guc *guc, struct intel_context *ce)
 	spin_unlock_irqrestore(&guc->submission_state.lock, flags);
 }
 
-static int steal_guc_id(struct intel_guc *guc, struct intel_context *ce)
+static int steal_guc_id(struct intel_guc *guc)
 {
-	struct intel_context *cn;
+	struct intel_context *ce;
+	int guc_id;
 
 	lockdep_assert_held(&guc->submission_state.lock);
-	GEM_BUG_ON(intel_context_is_child(ce));
-	GEM_BUG_ON(intel_context_is_parent(ce));
 
 	if (!list_empty(&guc->submission_state.guc_id_list)) {
-		cn = list_first_entry(&guc->submission_state.guc_id_list,
+		ce = list_first_entry(&guc->submission_state.guc_id_list,
 				      struct intel_context,
 				      guc_id.link);
 
-		GEM_BUG_ON(atomic_read(&cn->guc_id.ref));
-		GEM_BUG_ON(context_guc_id_invalid(cn));
-		GEM_BUG_ON(intel_context_is_child(cn));
-		GEM_BUG_ON(intel_context_is_parent(cn));
+		GEM_BUG_ON(atomic_read(&ce->guc_id.ref));
+		GEM_BUG_ON(context_guc_id_invalid(ce));
 
-		list_del_init(&cn->guc_id.link);
-		ce->guc_id = cn->guc_id;
-		clr_context_registered(cn);
-		set_context_guc_id_invalid(cn);
+		list_del_init(&ce->guc_id.link);
+		guc_id = ce->guc_id.id;
 
-		return 0;
+		spin_lock(&ce->guc_state.lock);
+		clr_context_registered(ce);
+		spin_unlock(&ce->guc_state.lock);
+
+		set_context_guc_id_invalid(ce);
+		return guc_id;
 	} else {
 		return -EAGAIN;
 	}
 }
 
-static int assign_guc_id(struct intel_guc *guc, struct intel_context *ce)
+static int assign_guc_id(struct intel_guc *guc, u16 *out)
 {
 	int ret;
 
 	lockdep_assert_held(&guc->submission_state.lock);
-	GEM_BUG_ON(intel_context_is_child(ce));
 
-	ret = new_guc_id(guc, ce);
+	ret = new_guc_id(guc);
 	if (unlikely(ret < 0)) {
-		if (intel_context_is_parent(ce))
-			return -ENOSPC;
-
-		ret = steal_guc_id(guc, ce);
+		ret = steal_guc_id(guc);
 		if (ret < 0)
 			return ret;
 	}
 
-	if (intel_context_is_parent(ce)) {
-		struct intel_context *child;
-		int i = 1;
-
-		for_each_child(ce, child)
-			child->guc_id.id = ce->guc_id.id + i++;
-	}
-
+	*out = ret;
 	return 0;
 }
 
@@ -1383,7 +1330,7 @@ static int pin_guc_id(struct intel_guc *guc, struct intel_context *ce)
 	might_lock(&ce->guc_state.lock);
 
 	if (context_guc_id_invalid(ce)) {
-		ret = assign_guc_id(guc, ce);
+		ret = assign_guc_id(guc, &ce->guc_id.id);
 		if (ret)
 			goto out_unlock;
 		ret = 1;	/* Indidcates newly assigned guc_id */
@@ -1425,10 +1372,8 @@ static void unpin_guc_id(struct intel_guc *guc, struct intel_context *ce)
 	unsigned long flags;
 
 	GEM_BUG_ON(atomic_read(&ce->guc_id.ref) < 0);
-	GEM_BUG_ON(intel_context_is_child(ce));
 
-	if (unlikely(context_guc_id_invalid(ce) ||
-		     intel_context_is_parent(ce)))
+	if (unlikely(context_guc_id_invalid(ce)))
 		return;
 
 	spin_lock_irqsave(&guc->submission_state.lock, flags);
-- 
2.25.1

