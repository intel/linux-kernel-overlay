From c82349a45a280699ffe27960176fb8b6e9e771dc Mon Sep 17 00:00:00 2001
From: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Date: Mon, 27 Dec 2021 15:29:55 +0530
Subject: [PATCH 1059/1096] drm/i915/display/mtl: Write DSC PPS data for HDMI

HDMI2.1 supports VDSC1.2. DSC PPS parameters are sent via
CVTEM packets. As per the Bspec 66683: For programming the PPS for HDMI
controller, DP PPS registers are re-used.
This patch helps to send PPS data through VIDEO_DIP_CTL similar to
DP_SDP_PPS packets.

v2: Removed intel_dsc_enable from ddi_pre_enable path,
as its called in crtc_enable path.

Signed-off-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com>
Reviewed-by: Uma Shankar <uma.shankar@intel.com> (v1)
---
 drivers/gpu/drm/i915/display/intel_ddi.c  |  3 ++
 drivers/gpu/drm/i915/display/intel_hdmi.c |  7 ++++
 drivers/gpu/drm/i915/display/intel_vdsc.c | 39 +++++++++++++++++++++++
 drivers/gpu/drm/i915/display/intel_vdsc.h |  2 ++
 4 files changed, 51 insertions(+)

diff --git a/drivers/gpu/drm/i915/display/intel_ddi.c b/drivers/gpu/drm/i915/display/intel_ddi.c
index 1b9e58d01ac5..a1e79c8aa0ee 100644
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@ -2765,6 +2765,9 @@ static void intel_ddi_pre_enable_hdmi(struct intel_atomic_state *state,
 
 	intel_hdmi_start_frl(encoder, crtc_state);
 
+	intel_hdmi_set_hcactive(dev_priv, crtc_state);
+	intel_dsc_hdmi_pps_write(encoder, crtc_state);
+
 	dig_port->set_infoframes(encoder,
 				 crtc_state->has_infoframe,
 				 crtc_state, conn_state);
diff --git a/drivers/gpu/drm/i915/display/intel_hdmi.c b/drivers/gpu/drm/i915/display/intel_hdmi.c
index 12911e8aa64c..7cae765b944b 100644
--- a/drivers/gpu/drm/i915/display/intel_hdmi.c
+++ b/drivers/gpu/drm/i915/display/intel_hdmi.c
@@ -541,6 +541,13 @@ void hsw_write_infoframe(struct intel_encoder *encoder,
 	/* Wa_14013475917 */
 	if (IS_DISPLAY_VER(dev_priv, 13, 14) && crtc_state->has_psr && type == DP_SDP_VSC)
 		return;
+	/*
+	 * VIDEO_DIP_CTL's PPS bit is not to be set for HDMI CVTEM PPS, though
+	 * the DP_SDP_DATA is used to send the packets.
+	 */
+	if (DISPLAY_VER(dev_priv) >= 14 && crtc_state->cvt_emp.enabled &&
+	    type == DP_SDP_PPS)
+		return;
 
 	val |= hsw_infoframe_enable(type);
 	intel_de_write(dev_priv, ctl_reg, val);
diff --git a/drivers/gpu/drm/i915/display/intel_vdsc.c b/drivers/gpu/drm/i915/display/intel_vdsc.c
index 207b2a648d32..c368eec2ce04 100644
--- a/drivers/gpu/drm/i915/display/intel_vdsc.c
+++ b/drivers/gpu/drm/i915/display/intel_vdsc.c
@@ -15,6 +15,7 @@
 #include "intel_de.h"
 #include "intel_display_types.h"
 #include "intel_dsi.h"
+#include "intel_hdmi.h"
 #include "intel_qp_tables.h"
 #include "intel_vdsc.h"
 
@@ -287,6 +288,11 @@ static const struct rc_parameters rc_parameters[][MAX_COLUMN_INDEX] = {
 
 };
 
+struct intel_hdmi_cvtem_packet {
+	u32 emp_header;
+	struct drm_dsc_picture_parameter_set pps_payload;
+} __packed;
+
 static int get_row_index_for_rc_params(u16 compressed_bpp)
 {
 	switch (compressed_bpp) {
@@ -1104,6 +1110,39 @@ void intel_dsc_dp_pps_write(struct intel_encoder *encoder,
 				  sizeof(dp_dsc_pps_sdp));
 }
 
+void intel_dsc_hdmi_pps_write(struct intel_encoder *encoder,
+			      const struct intel_crtc_state *crtc_state)
+{
+	struct intel_hdmi *intel_hdmi = enc_to_intel_hdmi(encoder);
+	struct intel_digital_port *dig_port = hdmi_to_dig_port(intel_hdmi);
+	const struct drm_dsc_config *vdsc_cfg = &crtc_state->dsc.config;
+	struct intel_hdmi_cvtem_packet cvtemp;
+
+	if (!crtc_state->dsc.compression_enable)
+		return;
+
+	/*
+	 * For HDMI PPS parameters are sent as Extended Meta Data Packet EMP.
+	 * Specifically the Compressed Video Transport EMP or CVTEM packets
+	 * are used to send the PPS information to the sink.
+	 *
+	 * As per Bspec 66683:
+	 * CVTEM packets (i.e. PPS packets) are formed using the existing
+	 * VIDEO_DIP_PPS registers (i.e. the HDMI_EMP_* registers are not used
+	 * to form the PPS EMP's)
+	 *
+	 * So using DP_SDP_PPS for HDMI, with first 32 bits as per fields in
+	 * HDMI_EMP_HEADER.
+	 */
+	intel_hdmi_fill_emp_header_byte(&crtc_state->cvt_emp, &cvtemp.emp_header);
+
+	drm_dsc_pps_payload_pack(&cvtemp.pps_payload, vdsc_cfg);
+
+	dig_port->write_infoframe(encoder, crtc_state,
+				  DP_SDP_PPS, &cvtemp,
+				  sizeof(cvtemp));
+}
+
 static i915_reg_t dss_ctl1_reg(struct intel_crtc *crtc, enum transcoder cpu_transcoder)
 {
 	return is_pipe_dsc(crtc, cpu_transcoder) ?
diff --git a/drivers/gpu/drm/i915/display/intel_vdsc.h b/drivers/gpu/drm/i915/display/intel_vdsc.h
index 8763f00fa7e2..8a332454bc9f 100644
--- a/drivers/gpu/drm/i915/display/intel_vdsc.h
+++ b/drivers/gpu/drm/i915/display/intel_vdsc.h
@@ -26,5 +26,7 @@ void intel_dsc_dsi_pps_write(struct intel_encoder *encoder,
 			     const struct intel_crtc_state *crtc_state);
 void intel_dsc_dp_pps_write(struct intel_encoder *encoder,
 			    const struct intel_crtc_state *crtc_state);
+void intel_dsc_hdmi_pps_write(struct intel_encoder *encoder,
+			      const struct intel_crtc_state *crtc_state);
 
 #endif /* __INTEL_VDSC_H__ */
-- 
2.25.1

