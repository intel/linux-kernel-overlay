From 3659f52a1afe3e3a50d2041ad46785685edf8f2b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Pi=C3=B3rkowski?= <piotr.piorkowski@intel.com>
Date: Wed, 29 Mar 2023 00:37:43 +0200
Subject: [PATCH 16/52] drm/i915/pf: Skip VF save/restore on S2idle/S3/S4 if it
 can reinitialize itself
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

When changing the host state to S2idle/S3/S4, if we want the VF to
survive without errors, we need to save its state and restore it on
resume.
However, if the VF has a driver that can reinitialize after suspend,
we don't have to do anything, just skip.
We can safely assume that if VF has the same driver on the host as PF,
it will survive PM events.
Let's add a condition that will check if we can skip VF save/restore.

v2: check for vfpdev to make KW happy (michal)
    fix leaked vfpdev reference (michal)

Signed-off-by: Piotr Pi√≥rkowski <piotr.piorkowski@intel.com>
Acked-by: Michal Wajdeczko <michal.wajdeczko@intel.com>
---
 drivers/gpu/drm/i915/i915_sriov.c | 38 +++++++++++++++++++++++++++++--
 1 file changed, 36 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/i915_sriov.c b/drivers/gpu/drm/i915/i915_sriov.c
index 5a66d9c4d943..a261d91e7470 100644
--- a/drivers/gpu/drm/i915/i915_sriov.c
+++ b/drivers/gpu/drm/i915/i915_sriov.c
@@ -675,6 +675,27 @@ int i915_sriov_pf_disable_vfs(struct drm_i915_private *i915)
 	return 0;
 }
 
+static bool needs_save_restore(struct drm_i915_private *i915, unsigned int vfid)
+{
+	struct pci_dev *pdev = to_pci_dev(i915->drm.dev);
+	struct pci_dev *vfpdev = i915_pci_pf_get_vf_dev(pdev, vfid);
+	bool ret;
+
+	if (!vfpdev)
+		return false;
+
+	/*
+	 * If VF has the same driver as PF loaded (from host perspective), we don't need
+	 * to save/restore its state, because the VF driver will receive the same PM
+	 * handling as all the host drivers. There is also no need to save/restore state
+	 * when no driver is loaded on VF.
+	 */
+	ret = (vfpdev->driver && strcmp(vfpdev->driver->name, pdev->driver->name) != 0);
+
+	pci_dev_put(vfpdev);
+	return ret;
+}
+
 static void pf_restore_vfs_pci_state(struct drm_i915_private *i915, unsigned int num_vfs)
 {
 	struct pci_dev *pdev = to_pci_dev(i915->drm.dev);
@@ -687,12 +708,14 @@ static void pf_restore_vfs_pci_state(struct drm_i915_private *i915, unsigned int
 
 		if (!vfpdev)
 			continue;
+		if (!needs_save_restore(i915, vfid))
+			continue;
 
 		/*
 		 * XXX: Waiting for other drivers to do their job.
 		 * We can ignore the potential error in this function -
-		 * despite the errors, we will try to reinitialize the MSI
-		 * and set the PCI master
+		 * in case of an error, we still want to try to reinitialize
+		 * the MSI and set the PCI master.
 		 */
 		device_pm_wait_for_dev(&pdev->dev, &vfpdev->dev);
 
@@ -755,6 +778,11 @@ static void pf_save_vfs_guc_state(struct drm_i915_private *i915, unsigned int nu
 	unsigned int vfid;
 
 	for (vfid = 1; vfid <= num_vfs; vfid++) {
+		if (!needs_save_restore(i915, vfid)) {
+			drm_dbg(&i915->drm, "Save of VF%u GuC state has been skipped\n", vfid);
+			continue;
+		}
+
 		for_each_gt(gt, i915, gt_id) {
 			int err = pf_gt_save_vf_guc_state(gt, vfid);
 
@@ -811,6 +839,12 @@ static void pf_restore_vfs_guc_state(struct drm_i915_private *i915, unsigned int
 	unsigned int vfid;
 
 	for (vfid = 1; vfid <= num_vfs; vfid++) {
+		if (!needs_save_restore(i915, vfid)) {
+			drm_dbg(&i915->drm, "Restoration of VF%u GuC state has been skipped\n",
+				vfid);
+			continue;
+		}
+
 		for_each_gt(gt, i915, gt_id) {
 			int err = pf_gt_restore_vf_guc_state(gt, vfid);
 
-- 
2.25.1

