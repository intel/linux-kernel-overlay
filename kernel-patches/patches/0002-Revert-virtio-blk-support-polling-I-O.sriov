From 35db6a31a1b8faa50749f933f54bdcc22d19f0c7 Mon Sep 17 00:00:00 2001
From: SyazwanHalim <mohd.syazwan.abdul.halim@intel.com>
Date: Wed, 8 Mar 2023 11:39:39 +0800
Subject: [PATCH 2/2] Revert "virtio-blk: support polling I/O"

This reverts commit 4e0400525691d0e676dbe002641f9a61261f1e1b.
---
 drivers/block/virtio_blk.c | 106 ++-----------------------------------
 1 file changed, 3 insertions(+), 103 deletions(-)

diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index ad5f9ce8f3f9..d624cc8eddc3 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -37,10 +37,6 @@ MODULE_PARM_DESC(num_request_queues,
 		 "0 for no limit. "
 		 "Values > nr_cpu_ids truncated to nr_cpu_ids.");
 
-static unsigned int poll_queues;
-module_param(poll_queues, uint, 0644);
-MODULE_PARM_DESC(poll_queues, "The number of dedicated virtqueues for polling I/O");
-
 static int major;
 static DEFINE_IDA(vd_index_ida);
 
@@ -78,7 +74,6 @@ struct virtio_blk {
 
 	/* num of vqs */
 	int num_vqs;
-	int io_queues[HCTX_MAX_TYPES];
 	struct virtio_blk_vq *vqs;
 };
 
@@ -517,7 +512,6 @@ static int init_vq(struct virtio_blk *vblk)
 	const char **names;
 	struct virtqueue **vqs;
 	unsigned short num_vqs;
-	unsigned int num_poll_vqs;
 	struct virtio_device *vdev = vblk->vdev;
 	struct irq_affinity desc = { 0, };
 
@@ -526,7 +520,6 @@ static int init_vq(struct virtio_blk *vblk)
 				   &num_vqs);
 	if (err)
 		num_vqs = 1;
-
 	if (!err && !num_vqs) {
 		dev_err(&vdev->dev, "MQ advertised but zero queues reported\n");
 		return -EINVAL;
@@ -536,17 +529,6 @@ static int init_vq(struct virtio_blk *vblk)
 			min_not_zero(num_request_queues, nr_cpu_ids),
 			num_vqs);
 
-	num_poll_vqs = min_t(unsigned int, poll_queues, num_vqs - 1);
-
-	vblk->io_queues[HCTX_TYPE_DEFAULT] = num_vqs - num_poll_vqs;
-	vblk->io_queues[HCTX_TYPE_READ] = 0;
-	vblk->io_queues[HCTX_TYPE_POLL] = num_poll_vqs;
-
-	dev_info(&vdev->dev, "%d/%d/%d default/read/poll queues\n",
-				vblk->io_queues[HCTX_TYPE_DEFAULT],
-				vblk->io_queues[HCTX_TYPE_READ],
-				vblk->io_queues[HCTX_TYPE_POLL]);
-
 	vblk->vqs = kmalloc_array(num_vqs, sizeof(*vblk->vqs), GFP_KERNEL);
 	if (!vblk->vqs)
 		return -ENOMEM;
@@ -559,18 +541,12 @@ static int init_vq(struct virtio_blk *vblk)
 		goto out;
 	}
 
-	for (i = 0; i < num_vqs - num_poll_vqs; i++) {
+	for (i = 0; i < num_vqs; i++) {
 		callbacks[i] = virtblk_done;
 		snprintf(vblk->vqs[i].name, VQ_NAME_LEN, "req.%d", i);
 		names[i] = vblk->vqs[i].name;
 	}
 
-	for (; i < num_vqs; i++) {
-		callbacks[i] = NULL;
-		snprintf(vblk->vqs[i].name, VQ_NAME_LEN, "req_poll.%d", i);
-		names[i] = vblk->vqs[i].name;
-	}
-
 	/* Discover virtqueues and write information to configuration.  */
 	err = virtio_find_vqs(vdev, num_vqs, vqs, callbacks, names, &desc);
 	if (err)
@@ -716,89 +692,16 @@ static const struct attribute_group *virtblk_attr_groups[] = {
 static int virtblk_map_queues(struct blk_mq_tag_set *set)
 {
 	struct virtio_blk *vblk = set->driver_data;
-	int i, qoff;
-
-	for (i = 0, qoff = 0; i < set->nr_maps; i++) {
-		struct blk_mq_queue_map *map = &set->map[i];
-
-		map->nr_queues = vblk->io_queues[i];
-		map->queue_offset = qoff;
-		qoff += map->nr_queues;
-
-		if (map->nr_queues == 0)
-			continue;
-
-		/*
-		 * Regular queues have interrupts and hence CPU affinity is
-		 * defined by the core virtio code, but polling queues have
-		 * no interrupts so we let the block layer assign CPU affinity.
-		 */
-		if (i == HCTX_TYPE_POLL)
-			blk_mq_map_queues(&set->map[i]);
-		else
-			blk_mq_virtio_map_queues(&set->map[i], vblk->vdev, 0);
-	}
-
-	return 0;
-}
-
-static void virtblk_complete_batch(struct io_comp_batch *iob)
-{
-	struct request *req;
 
-	rq_list_for_each(&iob->req_list, req) {
-		virtblk_unmap_data(req, blk_mq_rq_to_pdu(req));
-		virtblk_cleanup_cmd(req);
-	}
-	blk_mq_end_request_batch(iob);
-}
-
-static int virtblk_poll(struct blk_mq_hw_ctx *hctx, struct io_comp_batch *iob)
-{
-	struct virtio_blk *vblk = hctx->queue->queuedata;
-	struct virtio_blk_vq *vq = hctx->driver_data;
-	struct virtblk_req *vbr;
-	unsigned long flags;
-	unsigned int len;
-	int found = 0;
-
-	spin_lock_irqsave(&vq->lock, flags);
-
-	while ((vbr = virtqueue_get_buf(vq->vq, &len)) != NULL) {
-		struct request *req = blk_mq_rq_from_pdu(vbr);
-
-		found++;
-		if (!blk_mq_add_to_batch(req, iob, vbr->status,
-						virtblk_complete_batch))
-			blk_mq_complete_request(req);
-	}
-
-	if (found)
-		blk_mq_start_stopped_hw_queues(vblk->disk->queue, true);
-
-	spin_unlock_irqrestore(&vq->lock, flags);
-
-	return found;
-}
-
-static int virtblk_init_hctx(struct blk_mq_hw_ctx *hctx, void *data,
-			  unsigned int hctx_idx)
-{
-	struct virtio_blk *vblk = data;
-	struct virtio_blk_vq *vq = &vblk->vqs[hctx_idx];
-
-	WARN_ON(vblk->tag_set.tags[hctx_idx] != hctx->tags);
-	hctx->driver_data = vq;
-	return 0;
+	return blk_mq_virtio_map_queues(&set->map[HCTX_TYPE_DEFAULT],
+					vblk->vdev, 0);
 }
 
 static const struct blk_mq_ops virtio_mq_ops = {
 	.queue_rq	= virtio_queue_rq,
 	.commit_rqs	= virtio_commit_rqs,
-	.init_hctx	= virtblk_init_hctx,
 	.complete	= virtblk_request_done,
 	.map_queues	= virtblk_map_queues,
-	.poll		= virtblk_poll,
 };
 
 static unsigned int virtblk_queue_depth;
@@ -875,9 +778,6 @@ static int virtblk_probe(struct virtio_device *vdev)
 		sizeof(struct scatterlist) * VIRTIO_BLK_INLINE_SG_CNT;
 	vblk->tag_set.driver_data = vblk;
 	vblk->tag_set.nr_hw_queues = vblk->num_vqs;
-	vblk->tag_set.nr_maps = 1;
-	if (vblk->io_queues[HCTX_TYPE_POLL])
-		vblk->tag_set.nr_maps = 3;
 
 	err = blk_mq_alloc_tag_set(&vblk->tag_set);
 	if (err)
-- 
2.25.1

