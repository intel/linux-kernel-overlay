From d6342005d8722ff816509b4ddcbd7830e6773de4 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Wed, 14 Oct 2020 09:42:35 -0700
Subject: [PATCH 14/41] x86/entry: Save EHFI classification when entering
 kernel mode

EHFI provides functionality to classify the most recent thread running on
the system. We enter into kernel mode from a task running in user space
via system call or interrupt. Save the classification of the previously
running task very early after entering into kernel mode. In this manner,
we don't lose the classification value due to pollution from kernel
activity.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/entry/entry_64.S        |  8 ++++++
 arch/x86/entry/entry_64_compat.S |  6 +++++
 arch/x86/include/asm/ehfi.h      | 43 ++++++++++++++++++++++++++++++++
 3 files changed, 57 insertions(+)
 create mode 100644 arch/x86/include/asm/ehfi.h

diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index 97b1f84bb53f..a65d4cfb012e 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -27,6 +27,7 @@
 #include <asm/unistd.h>
 #include <asm/thread_info.h>
 #include <asm/hw_irq.h>
+#include <asm/ehfi.h>
 #include <asm/page_types.h>
 #include <asm/irqflags.h>
 #include <asm/paravirt.h>
@@ -93,6 +94,8 @@ SYM_CODE_START(entry_SYSCALL_64)
 	SWITCH_TO_KERNEL_CR3 scratch_reg=%rsp
 	movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp
 
+	EHFI_SAVE_CLASSID
+
 SYM_INNER_LABEL(entry_SYSCALL_64_safe_stack, SYM_L_GLOBAL)
 
 	/* Construct struct pt_regs on stack */
@@ -981,6 +984,11 @@ SYM_CODE_START_LOCAL(error_entry)
 	/* We have user CR3.  Change to kernel CR3. */
 	SWITCH_TO_KERNEL_CR3 scratch_reg=%rax
 
+	/*
+	 * We may not get the correct classification if we entered here from
+	 * IRET fault but that is OK as it should be a rare case.
+	 */
+	EHFI_SAVE_CLASSID
 .Lerror_entry_from_usermode_after_swapgs:
 	/* Put us onto the real thread stack. */
 	popq	%r12				/* save return addr in %12 */
diff --git a/arch/x86/entry/entry_64_compat.S b/arch/x86/entry/entry_64_compat.S
index 0051cf5c792d..5a147da0f449 100644
--- a/arch/x86/entry/entry_64_compat.S
+++ b/arch/x86/entry/entry_64_compat.S
@@ -9,6 +9,7 @@
 #include <asm/current.h>
 #include <asm/errno.h>
 #include <asm/ia32_unistd.h>
+#include <asm/ehfi.h>
 #include <asm/thread_info.h>
 #include <asm/segment.h>
 #include <asm/irqflags.h>
@@ -55,6 +56,8 @@ SYM_CODE_START(entry_SYSENTER_compat)
 	SWITCH_TO_KERNEL_CR3 scratch_reg=%rax
 	popq	%rax
 
+	EHFI_SAVE_CLASSID
+
 	movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp
 
 	/* Construct struct pt_regs on stack */
@@ -211,6 +214,7 @@ SYM_CODE_START(entry_SYSCALL_compat)
 	movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp
 
 SYM_INNER_LABEL(entry_SYSCALL_compat_safe_stack, SYM_L_GLOBAL)
+	EHFI_SAVE_CLASSID
 
 	/* Construct struct pt_regs on stack */
 	pushq	$__USER32_DS		/* pt_regs->ss */
@@ -368,6 +372,8 @@ SYM_CODE_START(entry_INT80_compat)
 	movq	%rsp, %rdi
 	movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp
 
+	EHFI_SAVE_CLASSID
+
 	pushq	6*8(%rdi)		/* regs->ss */
 	pushq	5*8(%rdi)		/* regs->rsp */
 	pushq	4*8(%rdi)		/* regs->eflags */
diff --git a/arch/x86/include/asm/ehfi.h b/arch/x86/include/asm/ehfi.h
new file mode 100644
index 000000000000..7900a601c385
--- /dev/null
+++ b/arch/x86/include/asm/ehfi.h
@@ -0,0 +1,43 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_X86_EHFI_H
+#define _ASM_X86_EHFI_H
+
+#include <linux/bits.h>
+
+#include <asm/msr-index.h>
+
+#define EHFI_CHAR_VALID			BIT(31)
+
+#ifdef CONFIG_X86_64
+.macro	EHFI_SAVE_CLASSID
+		/*
+		 * Task classification:
+		 * A) read the classification result of the current task.
+		 * B) call HRESET to reset the classification hardware.
+		 *
+		 */
+		ALTERNATIVE "jmp 1f", "", X86_FEATURE_EHFI
+		push %rdx
+		push %rcx
+		push %rax
+		movl	$MSR_IA32_HW_FEEDBACK_CHAR, %ecx
+		rdmsr
+		/*
+		 * Only update the classification result if it is valid (i.e.,
+		 * MSR_IA32_HW_FEEDBACK_CHAR[63]). Such valid bit is loaded in
+		 * %edx[31].
+		 */
+		test	$EHFI_CHAR_VALID, %edx
+		jz 2f
+		movq	PER_CPU_VAR(current_task), %rdx
+		movl	%eax, TASK_classid(%rdx)
+	2:
+		pop %rax
+		pop %rcx
+		pop %rdx
+	1:
+.endm
+#else /* CONFIG_X86_64 */
+#define EHFI_SAVE_CLASSID
+#endif /* CONFIG_X86_64 */
+#endif /* _ASM_X86_EHFI_H */
-- 
2.32.0

