From d87f8f420175a73a3851f347bba1466052f222e2 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Thu, 6 Jul 2023 15:04:18 +0800
Subject: [PATCH 0082/2351] Revert "drm/i915/display/mtl: Fill port width in
 DDI_BUF_/TRANS_DDI_FUNC_/PORT_BUF_CTL for HDMI"

This reverts commit a1697483bde44904d85526654b9ae1aaa5ff740d.
---
 drivers/gpu/drm/i915/display/intel_ddi.c | 48 +++---------------------
 1 file changed, 6 insertions(+), 42 deletions(-)

diff --git a/drivers/gpu/drm/i915/display/intel_ddi.c b/drivers/gpu/drm/i915/display/intel_ddi.c
index a5c7dbcbbaf1f..0f285741de1e1 100644
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@ -541,8 +541,6 @@ intel_ddi_transcoder_func_reg_val_get(struct intel_encoder *encoder,
 			temp |= TRANS_DDI_HDMI_SCRAMBLING;
 		if (crtc_state->hdmi_high_tmds_clock_ratio)
 			temp |= TRANS_DDI_HIGH_TMDS_CHAR_RATE;
-		if (DISPLAY_VER(dev_priv) >= 14)
-			temp |= DDI_PORT_WIDTH(crtc_state->lane_count);
 	} else if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_ANALOG)) {
 		temp |= TRANS_DDI_MODE_SELECT_FDI_OR_128B132B;
 		temp |= (crtc_state->fdi_lanes - 1) << 1;
@@ -3159,10 +3157,6 @@ static void intel_enable_ddi_hdmi(struct intel_atomic_state *state,
 	if (has_buf_trans_select(dev_priv))
 		hsw_prepare_hdmi_ddi_buffers(encoder, crtc_state);
 
-	/* e. Enable D2D Link for C10/C20 Phy */
-	if (DISPLAY_VER(dev_priv) >= 14)
-		mtl_ddi_enable_d2d(encoder);
-
 	encoder->set_signal_levels(encoder, crtc_state);
 
 	/* Display WA #1143: skl,kbl,cfl */
@@ -3208,39 +3202,13 @@ static void intel_enable_ddi_hdmi(struct intel_atomic_state *state,
 	 *
 	 * On ADL_P the PHY link rate and lane count must be programmed but
 	 * these are both 0 for HDMI.
-	 *
-	 * But MTL onwards HDMI2.1 is supported and in TMDS mode this
-	 * is always filled with 4 lanes, already set in the crtc_state.
-	 * The same is required to be filled in PORT_BUF_CTL for C10/20 Phy.
 	 */
-	if (DISPLAY_VER(dev_priv) >= 14) {
-		u32 ddi_buf = 0;
-		u8  lane_count = mtl_get_port_width(crtc_state->lane_count);
-		u32 port_buf = 0;
-
-		port_buf |= XELPDP_PORT_WIDTH(lane_count);
-
-		if (intel_bios_is_lane_reversal_needed(dev_priv, port))
-			port_buf |= XELPDP_PORT_REVERSAL;
-
-		intel_de_rmw(dev_priv, XELPDP_PORT_BUF_CTL1(port), 0, port_buf);
-
-		ddi_buf |= DDI_BUF_CTL_ENABLE |
-			   DDI_PORT_WIDTH(lane_count);
-
-		intel_de_write(dev_priv, DDI_BUF_CTL(port),
-			       dig_port->saved_port_bits | ddi_buf);
-
-		/* i. Poll for PORT_BUF_CTL Idle Status == 0, timeout after 100 us */
-		intel_wait_ddi_buf_active(dev_priv, port);
-	} else {
-		buf_ctl = dig_port->saved_port_bits | DDI_BUF_CTL_ENABLE;
-		if (IS_ALDERLAKE_P(dev_priv) && intel_phy_is_tc(dev_priv, phy)) {
-			drm_WARN_ON(&dev_priv->drm, !intel_tc_port_in_legacy_mode(dig_port));
-			buf_ctl |= DDI_BUF_CTL_TC_PHY_OWNERSHIP;
-		}
-		intel_de_write(dev_priv, DDI_BUF_CTL(port), buf_ctl);
+	buf_ctl = dig_port->saved_port_bits | DDI_BUF_CTL_ENABLE;
+	if (IS_ALDERLAKE_P(dev_priv) && intel_phy_is_tc(dev_priv, phy)) {
+		drm_WARN_ON(&dev_priv->drm, !intel_tc_port_in_legacy_mode(dig_port));
+		buf_ctl |= DDI_BUF_CTL_TC_PHY_OWNERSHIP;
 	}
+	intel_de_write(dev_priv, DDI_BUF_CTL(port), buf_ctl);
 
 	intel_wait_ddi_buf_active(dev_priv, port);
 
@@ -3753,11 +3721,7 @@ static void intel_ddi_read_func_ctl(struct intel_encoder *encoder,
 		fallthrough;
 	case TRANS_DDI_MODE_SELECT_DVI:
 		pipe_config->output_types |= BIT(INTEL_OUTPUT_HDMI);
-		if (DISPLAY_VER(dev_priv) >= 14)
-			pipe_config->lane_count =
-				((temp & DDI_PORT_WIDTH_MASK) >> DDI_PORT_WIDTH_SHIFT) + 1;
-		else
-			pipe_config->lane_count = 4;
+		pipe_config->lane_count = 4;
 		break;
 	case TRANS_DDI_MODE_SELECT_DP_SST:
 		if (encoder->type == INTEL_OUTPUT_EDP)
-- 
2.25.1

