From c8a86f1d944f6200fb624fe4210a6305f621aa06 Mon Sep 17 00:00:00 2001
From: SyazwanHalim <mohd.syazwan.abdul.halim@intel.com>
Date: Wed, 8 Mar 2023 11:39:22 +0800
Subject: [PATCH 1/2] Revert "virtio-blk: support mq_ops->queue_rqs()"

This reverts commit 0e9911fa768f32f30e5678512ea405d99a7a9fef.
---
 drivers/block/virtio_blk.c | 114 ++++++-------------------------------
 1 file changed, 16 insertions(+), 98 deletions(-)

diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index 6fc7850c2b0a..ad5f9ce8f3f9 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -101,7 +101,8 @@ static inline blk_status_t virtblk_result(struct virtblk_req *vbr)
 	}
 }
 
-static int virtblk_add_req(struct virtqueue *vq, struct virtblk_req *vbr)
+static int virtblk_add_req(struct virtqueue *vq, struct virtblk_req *vbr,
+		struct scatterlist *data_sg, bool have_data)
 {
 	struct scatterlist hdr, status, *sgs[3];
 	unsigned int num_out = 0, num_in = 0;
@@ -109,11 +110,11 @@ static int virtblk_add_req(struct virtqueue *vq, struct virtblk_req *vbr)
 	sg_init_one(&hdr, &vbr->out_hdr, sizeof(vbr->out_hdr));
 	sgs[num_out++] = &hdr;
 
-	if (vbr->sg_table.nents) {
+	if (have_data) {
 		if (vbr->out_hdr.type & cpu_to_virtio32(vq->vdev, VIRTIO_BLK_T_OUT))
-			sgs[num_out++] = vbr->sg_table.sgl;
+			sgs[num_out++] = data_sg;
 		else
-			sgs[num_out + num_in++] = vbr->sg_table.sgl;
+			sgs[num_out + num_in++] = data_sg;
 	}
 
 	sg_init_one(&status, &vbr->status, sizeof(vbr->status));
@@ -303,28 +304,6 @@ static void virtio_commit_rqs(struct blk_mq_hw_ctx *hctx)
 		virtqueue_notify(vq->vq);
 }
 
-static blk_status_t virtblk_prep_rq(struct blk_mq_hw_ctx *hctx,
-					struct virtio_blk *vblk,
-					struct request *req,
-					struct virtblk_req *vbr)
-{
-	blk_status_t status;
-
-	status = virtblk_setup_cmd(vblk->vdev, req, vbr);
-	if (unlikely(status))
-		return status;
-
-	blk_mq_start_request(req);
-
-	vbr->sg_table.nents = virtblk_map_data(hctx, req, vbr);
-	if (unlikely(vbr->sg_table.nents < 0)) {
-		virtblk_cleanup_cmd(req);
-		return BLK_STS_RESOURCE;
-	}
-
-	return BLK_STS_OK;
-}
-
 static blk_status_t virtio_queue_rq(struct blk_mq_hw_ctx *hctx,
 			   const struct blk_mq_queue_data *bd)
 {
@@ -332,17 +311,26 @@ static blk_status_t virtio_queue_rq(struct blk_mq_hw_ctx *hctx,
 	struct request *req = bd->rq;
 	struct virtblk_req *vbr = blk_mq_rq_to_pdu(req);
 	unsigned long flags;
+	int num;
 	int qid = hctx->queue_num;
 	bool notify = false;
 	blk_status_t status;
 	int err;
 
-	status = virtblk_prep_rq(hctx, vblk, req, vbr);
+	status = virtblk_setup_cmd(vblk->vdev, req, vbr);
 	if (unlikely(status))
 		return status;
 
+	blk_mq_start_request(req);
+
+	num = virtblk_map_data(hctx, req, vbr);
+	if (unlikely(num < 0)) {
+		virtblk_cleanup_cmd(req);
+		return BLK_STS_RESOURCE;
+	}
+
 	spin_lock_irqsave(&vblk->vqs[qid].lock, flags);
-	err = virtblk_add_req(vblk->vqs[qid].vq, vbr);
+	err = virtblk_add_req(vblk->vqs[qid].vq, vbr, vbr->sg_table.sgl, num);
 	if (err) {
 		virtqueue_kick(vblk->vqs[qid].vq);
 		/* Don't stop the queue if -ENOMEM: we may have failed to
@@ -372,75 +360,6 @@ static blk_status_t virtio_queue_rq(struct blk_mq_hw_ctx *hctx,
 	return BLK_STS_OK;
 }
 
-static bool virtblk_prep_rq_batch(struct request *req)
-{
-	struct virtio_blk *vblk = req->mq_hctx->queue->queuedata;
-	struct virtblk_req *vbr = blk_mq_rq_to_pdu(req);
-
-	req->mq_hctx->tags->rqs[req->tag] = req;
-
-	return virtblk_prep_rq(req->mq_hctx, vblk, req, vbr) == BLK_STS_OK;
-}
-
-static bool virtblk_add_req_batch(struct virtio_blk_vq *vq,
-					struct request **rqlist,
-					struct request **requeue_list)
-{
-	unsigned long flags;
-	int err;
-	bool kick;
-
-	spin_lock_irqsave(&vq->lock, flags);
-
-	while (!rq_list_empty(*rqlist)) {
-		struct request *req = rq_list_pop(rqlist);
-		struct virtblk_req *vbr = blk_mq_rq_to_pdu(req);
-
-		err = virtblk_add_req(vq->vq, vbr);
-		if (err) {
-			virtblk_unmap_data(req, vbr);
-			virtblk_cleanup_cmd(req);
-			rq_list_add(requeue_list, req);
-		}
-	}
-
-	kick = virtqueue_kick_prepare(vq->vq);
-	spin_unlock_irqrestore(&vq->lock, flags);
-
-	return kick;
-}
-
-static void virtio_queue_rqs(struct request **rqlist)
-{
-	struct request *req, *next, *prev = NULL;
-	struct request *requeue_list = NULL;
-
-	rq_list_for_each_safe(rqlist, req, next) {
-		struct virtio_blk_vq *vq = req->mq_hctx->driver_data;
-		bool kick;
-
-		if (!virtblk_prep_rq_batch(req)) {
-			rq_list_move(rqlist, &requeue_list, req, prev);
-			req = prev;
-			if (!req)
-				continue;
-		}
-
-		if (!next || req->mq_hctx != next->mq_hctx) {
-			req->rq_next = NULL;
-			kick = virtblk_add_req_batch(vq, rqlist, &requeue_list);
-			if (kick)
-				virtqueue_notify(vq->vq);
-
-			*rqlist = next;
-			prev = NULL;
-		} else
-			prev = req;
-	}
-
-	*rqlist = requeue_list;
-}
-
 /* return id (s/n) string for *disk to *id_str
  */
 static int virtblk_get_id(struct gendisk *disk, char *id_str)
@@ -875,7 +794,6 @@ static int virtblk_init_hctx(struct blk_mq_hw_ctx *hctx, void *data,
 
 static const struct blk_mq_ops virtio_mq_ops = {
 	.queue_rq	= virtio_queue_rq,
-	.queue_rqs	= virtio_queue_rqs,
 	.commit_rqs	= virtio_commit_rqs,
 	.init_hctx	= virtblk_init_hctx,
 	.complete	= virtblk_request_done,
-- 
2.25.1

