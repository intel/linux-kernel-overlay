From aca935cb23dd739977af6e408d48062b95bcd3ab Mon Sep 17 00:00:00 2001
From: "David E. Box" <david.e.box@linux.intel.com>
Date: Tue, 22 Oct 2019 21:22:38 -0700
Subject: [PATCH 11/15] platform/x86/intel/pmt: telelemetry: Add exports for
 kernel access

INTEL INTERNAL ONLY

Export symbols to allow drivers access to PMT Telemetry data available on
supported devices. A get_next_endpoint function provides callers with a
list of ids of individual telemetry endpoints. Callers then use the
provided get_endpoint_info function to get identifying information about
each endpoint. Future improvements to include filtering to allow searching
for specific classes of telemetry. Access to a telemetry endpoint is
allowed by registering the id and receiving a handle. The handle is used
in the provided read API to access the telemetry data. Registration
increments a kref on the handle that get decremented when the caller
unregisters the handle.

Additionally, drivers can register to be notified when new telemetry
endpoints are added or remove.

Signed-off-by: David E. Box <david.e.box@linux.intel.com>
---
 drivers/platform/x86/intel/pmt/class.c     |   3 +-
 drivers/platform/x86/intel/pmt/class.h     |  27 ++-
 drivers/platform/x86/intel/pmt/telemetry.c | 190 ++++++++++++++++++++-
 drivers/platform/x86/intel/pmt/telemetry.h | 119 +++++++++++++
 4 files changed, 326 insertions(+), 13 deletions(-)
 create mode 100644 drivers/platform/x86/intel/pmt/telemetry.h

diff --git a/drivers/platform/x86/intel/pmt/class.c b/drivers/platform/x86/intel/pmt/class.c
index 56399d66e484..094c2f71734f 100644
--- a/drivers/platform/x86/intel/pmt/class.c
+++ b/drivers/platform/x86/intel/pmt/class.c
@@ -17,7 +17,7 @@
 #include "../vsec.h"
 #include "class.h"
 
-#define PMT_XA_START		0
+#define PMT_XA_START		1
 #define PMT_XA_MAX		INT_MAX
 #define PMT_XA_LIMIT		XA_LIMIT(PMT_XA_START, PMT_XA_MAX)
 
@@ -228,6 +228,7 @@ static int intel_pmt_dev_register(struct intel_pmt_entry *entry,
 	res.start = entry->base_addr;
 	res.end = res.start + entry->size - 1;
 	res.flags = IORESOURCE_MEM;
+	res.name = NULL;
 
 	entry->base = devm_ioremap_resource(dev, &res);
 	if (IS_ERR(entry->base)) {
diff --git a/drivers/platform/x86/intel/pmt/class.h b/drivers/platform/x86/intel/pmt/class.h
index 036a08e0c0de..bec4dae3c5af 100644
--- a/drivers/platform/x86/intel/pmt/class.h
+++ b/drivers/platform/x86/intel/pmt/class.h
@@ -10,6 +10,7 @@
 #include <linux/io.h>
 
 #include "../vsec.h"
+#include "telemetry.h"
 
 /* PMT access types */
 #define ACCESS_BARID		2
@@ -19,7 +20,26 @@
 #define GET_BIR(v)		((v) & GENMASK(2, 0))
 #define GET_ADDRESS(v)		((v) & GENMASK(31, 3))
 
+struct telem_endpoint {
+	struct pci_dev		*parent;
+	struct telem_header	header;
+	struct device		*dev;
+	void __iomem		*base;
+	struct resource		res;
+	bool			present;
+	struct kref		kref;
+};
+
+struct intel_pmt_header {
+	u32	base_offset;
+	u32	size;
+	u32	guid;
+	u8	access_type;
+};
+
 struct intel_pmt_entry {
+	struct telem_endpoint	*ep;
+	struct intel_pmt_header	header;
 	struct bin_attribute	pmt_bin_attr;
 	struct kobject		*kobj;
 	struct device		*dev;
@@ -31,13 +51,6 @@ struct intel_pmt_entry {
 	int			devid;
 };
 
-struct intel_pmt_header {
-	u32	base_offset;
-	u32	size;
-	u32	guid;
-	u8	access_type;
-};
-
 struct intel_pmt_namespace {
 	const char *name;
 	struct xarray *xa;
diff --git a/drivers/platform/x86/intel/pmt/telemetry.c b/drivers/platform/x86/intel/pmt/telemetry.c
index 543a76018c23..431d78838362 100644
--- a/drivers/platform/x86/intel/pmt/telemetry.c
+++ b/drivers/platform/x86/intel/pmt/telemetry.c
@@ -19,6 +19,7 @@
 
 #include "../vsec.h"
 #include "class.h"
+#include "telemetry.h"
 
 #define TELEM_SIZE_OFFSET	0x0
 #define TELEM_GUID_OFFSET	0x4
@@ -30,6 +31,12 @@
 /* Used by client hardware to identify a fixed telemetry entry*/
 #define TELEM_CLIENT_FIXED_BLOCK_GUID	0x10000000
 
+#define NUM_BYTES_QWORD(v)	((v) << 3)
+#define SAMPLE_ID_OFFSET(v)	((v) << 3)
+
+static DEFINE_MUTEX(list_lock);
+static BLOCKING_NOTIFIER_HEAD(telem_notifier);
+
 struct pmt_telem_priv {
 	int				num_entries;
 	struct intel_pmt_entry		entry[];
@@ -71,6 +78,11 @@ static int pmt_telem_header_decode(struct intel_pmt_entry *entry,
 	if (header->size == 0)
 		return 1;
 
+	entry->header.access_type = header->access_type;
+	entry->header.guid = header->guid;
+	entry->header.base_offset = header->base_offset;
+	entry->header.size = header->size;
+
 	return 0;
 }
 
@@ -81,13 +93,169 @@ static struct intel_pmt_namespace pmt_telem_ns = {
 	.pmt_header_decode = pmt_telem_header_decode,
 };
 
+/* Called when all users unregister and the device is removed */
+static void pmt_telem_ep_release(struct kref *kref)
+{
+	struct telem_endpoint *ep;
+
+	ep = container_of(kref, struct telem_endpoint, kref);
+	kfree(ep);
+}
+
+/*
+ * driver api
+ */
+int pmt_telem_get_next_endpoint(int start)
+{
+	struct intel_pmt_entry *entry;
+	unsigned long found_idx;
+
+	mutex_lock(&list_lock);
+	xa_for_each_start(&telem_array, found_idx, entry, start) {
+		/*
+		 * Return first found index after start.
+		 * 0 is not valid id.
+		 */
+		if (found_idx > start)
+			break;
+	}
+	mutex_unlock(&list_lock);
+
+	return found_idx == start ? 0 : found_idx;
+}
+EXPORT_SYMBOL_GPL(pmt_telem_get_next_endpoint);
+
+struct telem_endpoint *pmt_telem_register_endpoint(int devid)
+{
+	struct intel_pmt_entry *entry;
+	unsigned long index = devid;
+
+	mutex_lock(&list_lock);
+	entry = xa_find(&telem_array, &index, index, XA_PRESENT);
+	if (!entry) {
+		mutex_unlock(&list_lock);
+		return ERR_PTR(-ENXIO);
+	}
+
+	kref_get(&entry->ep->kref);
+
+	mutex_unlock(&list_lock);
+
+	return entry->ep;
+}
+EXPORT_SYMBOL_GPL(pmt_telem_register_endpoint);
+
+void pmt_telem_unregister_endpoint(struct telem_endpoint *ep)
+{
+	kref_put(&ep->kref, pmt_telem_ep_release);
+}
+EXPORT_SYMBOL(pmt_telem_unregister_endpoint);
+
+int pmt_telem_get_endpoint_info(int devid,
+				struct telem_endpoint_info *info)
+{
+	struct intel_pmt_entry *entry;
+	unsigned long index = devid;
+	int err = 0;
+
+	if (!info)
+		return -EINVAL;
+
+	mutex_lock(&list_lock);
+	entry = xa_find(&telem_array, &index, index, XA_PRESENT);
+	if (!entry) {
+		err = -ENXIO;
+		goto unlock;
+	}
+
+	info->pdev = entry->ep->parent;
+	info->header = entry->ep->header;
+
+unlock:
+	mutex_unlock(&list_lock);
+	return err;
+
+}
+EXPORT_SYMBOL_GPL(pmt_telem_get_endpoint_info);
+
+int
+pmt_telem_read(struct telem_endpoint *ep, u32 id, u64 *data, u32 count)
+{
+	u32 offset, size;
+
+	if (!ep->present)
+		return -ENODEV;
+
+	offset = SAMPLE_ID_OFFSET(id);
+	size = ep->header.size;
+
+	if ((offset + NUM_BYTES_QWORD(count)) > size)
+		return -EINVAL;
+
+	pm_runtime_get_sync(ep->dev);
+	memcpy_fromio(data, ep->base + offset, NUM_BYTES_QWORD(count));
+	pm_runtime_mark_last_busy(ep->dev);
+	pm_runtime_put_autosuspend(ep->dev);
+
+	return ep->present ? 0 : -EPIPE;
+}
+EXPORT_SYMBOL_GPL(pmt_telem_read);
+
+int pmt_telem_register_notifier(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_register(&telem_notifier, nb);
+}
+EXPORT_SYMBOL(pmt_telem_register_notifier);
+
+int pmt_telem_unregister_notifier(struct notifier_block *nb)
+{
+	return blocking_notifier_chain_unregister(&telem_notifier, nb);
+}
+EXPORT_SYMBOL(pmt_telem_unregister_notifier);
+
+static int pmt_telem_add_endpoint(struct device *dev,
+				  struct pmt_telem_priv *priv,
+				  struct intel_pmt_entry *entry)
+{
+	struct telem_endpoint *ep;
+
+	/*
+	 * Endpoint lifetimes are managed by kref, not devres.
+	 */
+	entry->ep = kzalloc(sizeof(*(entry->ep)), GFP_KERNEL);
+	if (!entry->ep)
+		return -ENOMEM;
+
+	ep = entry->ep;
+	ep->dev = dev;
+	ep->parent = to_pci_dev(dev->parent);
+	ep->header.access_type = entry->header.access_type;
+	ep->header.guid = entry->header.guid;
+	ep->header.base_offset = entry->header.base_offset;
+	ep->header.size = entry->header.size;
+
+	/* use the already ioremapped entry base */
+	ep->base = entry->base;
+	ep->present = true;
+
+	kref_init(&ep->kref);
+
+	return 0;
+}
+
 static void pmt_telem_remove(struct auxiliary_device *auxdev)
 {
 	struct pmt_telem_priv *priv = auxiliary_get_drvdata(auxdev);
+	struct intel_pmt_entry *entry;
 	int i;
 
-	for (i = 0; i < priv->num_entries; i++)
+	for (i = 0, entry = priv->entry; i < priv->num_entries; i++, entry++) {
+		blocking_notifier_call_chain(&telem_notifier,
+					     PMT_TELEM_NOTIFY_REMOVE,
+					     &entry->devid);
+		kref_put(&priv->entry[i].ep->kref, pmt_telem_ep_release);
 		intel_pmt_dev_destroy(&priv->entry[i], &pmt_telem_ns);
+	}
 
 	pm_runtime_get_sync(&auxdev->dev);
 	pm_runtime_disable(&auxdev->dev);
@@ -96,6 +264,7 @@ static void pmt_telem_remove(struct auxiliary_device *auxdev)
 static int pmt_telem_probe(struct auxiliary_device *auxdev, const struct auxiliary_device_id *id)
 {
 	struct intel_vsec_device *intel_vsec_dev = auxdev_to_ivdev(auxdev);
+	struct intel_pmt_entry *entry;
 	struct pmt_telem_priv *priv;
 	size_t size;
 	int i, ret;
@@ -107,21 +276,32 @@ static int pmt_telem_probe(struct auxiliary_device *auxdev, const struct auxilia
 
 	auxiliary_set_drvdata(auxdev, priv);
 
-	for (i = 0; i < intel_vsec_dev->num_resources; i++) {
-		struct intel_pmt_entry *entry = &priv->entry[i];
-
+	for (i = 0, entry = priv->entry; i < intel_vsec_dev->num_resources; i++, entry++) {
 		ret = intel_pmt_dev_create(entry, &pmt_telem_ns, intel_vsec_dev, i);
 		if (ret < 0)
 			goto abort_probe;
-		if (ret)
+		if (ret) {
+			/* Skipping this entry. */
+			--entry;
 			continue;
+		}
 
 		priv->num_entries++;
+
+		ret = pmt_telem_add_endpoint(&auxdev->dev, priv, entry);
+		if (ret)
+			goto abort_probe;
 	}
 
 	pm_runtime_enable(&auxdev->dev);
 
+	for (i = 0, entry = priv->entry; i < priv->num_entries; i++, entry++)
+		blocking_notifier_call_chain(&telem_notifier,
+					     PMT_TELEM_NOTIFY_ADD,
+					     &entry->devid);
+
 	return 0;
+
 abort_probe:
 	pmt_telem_remove(auxdev);
 	return ret;
diff --git a/drivers/platform/x86/intel/pmt/telemetry.h b/drivers/platform/x86/intel/pmt/telemetry.h
new file mode 100644
index 000000000000..8ceefe56d061
--- /dev/null
+++ b/drivers/platform/x86/intel/pmt/telemetry.h
@@ -0,0 +1,119 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _INTEL_PMT_TELEM_H
+#define _INTEL_PMT_TELEM_H
+
+/* Telemetry types */
+#define PMT_TELEM_TELEMETRY	0
+#define PMT_TELEM_CRASHLOG	1
+
+struct telem_endpoint;
+
+struct telem_header {
+	u8	access_type;
+	u16	size;
+	u32	guid;
+	u32	base_offset;
+};
+
+struct telem_endpoint_info {
+	struct pci_dev		*pdev;
+	struct telem_header	header;
+};
+
+/* TELEMETRY API */
+
+/**
+ * pmt_telem_get_next_endpoint() - Get next device id for a telemetry endpoint
+ * @start:  starting devid to look from
+ *
+ * This functions can be used in a while loop predicate to retrieve the devid
+ * of all available telemetry endpoints. Functions pmt_telem_get_next_endpoint()
+ * and pmt_telem_register_endpoint() can be used inside of the loop to examine
+ * endpoint info and register to receive a pointer to the endpoint. The pointer
+ * is then usable in the telemetry read calls to access the telemetry data.
+ *
+ * Return:
+ * * devid       - devid of the next present endpoint from start
+ * * 0           - when no more endpoints are present after start
+ */
+int pmt_telem_get_next_endpoint(int start);
+
+/**
+ * pmt_telem_register_endpoint() - Register a telemetry endpoint
+ * @devid: device id/handle of the telemetry endpoint
+ *
+ * Increments the kref usage counter for the endpoint.
+ *
+ * Return:
+ * * endpoint    - On success returns pointer to the telemetry endpoint
+ * * -ENXIO      - telemetry endpoint not found
+ */
+struct telem_endpoint *pmt_telem_register_endpoint(int devid);
+
+/**
+ * pmt_telem_unregister_endpoint() - Unregister a telemetry endpoint
+ * @ep:   ep structure to populate.
+ *
+ * Decrements the kref usage counter for the endpoint.
+ */
+void pmt_telem_unregister_endpoint(struct telem_endpoint *ep);
+
+/**
+ * pmt_telem_get_endpoint_info() - Get info for an endpoint from its devid
+ * @devid:  device id/handle of the telemetry endpoint
+ * @info:   Endpoint info structure to be populated
+ *
+ * Return:
+ * * 0           - Success
+ * * -ENXIO      - telemetry endpoint not found for the devid
+ * * -EINVAL     - @info is NULL
+ */
+int pmt_telem_get_endpoint_info(int devid,
+				struct telem_endpoint_info *info);
+
+/**
+ * pmt_telem_read() - Read qwords from counter sram using sample id
+ * @ep:     Telemetry endpoint to be read
+ * @id:     The beginning sample id of the metric(s) to be read
+ * @data:   Allocated qword buffer
+ * @count:  Number of qwords requested
+ *
+ * Callers must ensure reads are aligned. When the call returns -ENODEV,
+ * the device has been removed and callers should unregister the telemetry
+ * endpoint.
+ *
+ * Return:
+ * * 0           - Success
+ * * -ENODEV	 - The device is not present.
+ * * -EINVAL	 - The offset is out out bounds
+ * * -EPIPE	 - The device was removed during the read. Data written
+ *		   but should be considered invalid.
+ */
+int pmt_telem_read(struct telem_endpoint *ep, u32 id, u64 *data,
+		   u32 count);
+
+/* Notifiers */
+
+#define PMT_TELEM_NOTIFY_ADD	0
+#define PMT_TELEM_NOTIFY_REMOVE	1
+
+/**
+ * pmt_telem_register_notifier() - Receive notification endpoint events
+ * @nb:   Notifier block
+ *
+ * Events:
+ *   PMT_TELEM_NOTIFY_ADD   - An endpoint has been added. Notifier data
+ *                            is the devid
+ *   PMT_TELEM_NOTIF_REMOVE - An endpoint has been removed. Notifier data
+ *                            is the devid
+ */
+int pmt_telem_register_notifier(struct notifier_block *nb);
+
+/**
+ * pmt_telem_unregister_notifier() - Unregister notification of endpoint events
+ * @nb:   Notifier block
+ *
+ */
+int pmt_telem_unregister_notifier(struct notifier_block *nb);
+
+#endif
-- 
2.32.0

