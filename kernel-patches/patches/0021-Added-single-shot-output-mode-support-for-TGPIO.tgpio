From ad2a968ce7ea8def43e34fb804669a2d27b0d9bc Mon Sep 17 00:00:00 2001
From: Rajvi Jingar <rajvi.jingar@intel.com>
Date: Fri, 10 Jan 2020 15:47:12 -0800
Subject: [PATCH 21/31] Added single-shot output mode support for TGPIO

This patch adds an example to configure timed GPIO pin to single-shot
output mode.

Signed-off-by: Rajvi Jingar <rajvi.jingar@intel.com>
---
 tools/testing/selftests/ptp/testptp.c | 26 ++++++++++++++++++++++----
 1 file changed, 22 insertions(+), 4 deletions(-)

diff --git a/tools/testing/selftests/ptp/testptp.c b/tools/testing/selftests/ptp/testptp.c
index 046fc99e9a02..303140e14403 100644
--- a/tools/testing/selftests/ptp/testptp.c
+++ b/tools/testing/selftests/ptp/testptp.c
@@ -26,6 +26,7 @@
 #include <linux/ptp_clock.h>
 
 #define DEVICE "/dev/ptp0"
+#define NSEC_PER_SEC 1000000000L
 
 #ifndef ADJ_SETOFFSET
 #define ADJ_SETOFFSET 0x0100
@@ -136,6 +137,7 @@ static void usage(char *progname)
 		"            1 - external time stamp\n"
 		"            2 - periodic output\n"
 		" -p val     enable output with a period of 'val' nanoseconds\n"
+		"            period val 0 to set single shot output for TGPIO pins\n"
 		" -H val     set output phase to 'val' nanoseconds (requires -p)\n"
 		" -w val     set output pulse width to 'val' nanoseconds (requires -p)\n"
 		" -P val     enable or disable (val=1|0) the system clock PPS\n"
@@ -449,7 +451,13 @@ int main(int argc, char *argv[])
 		}
 	}
 
-	if (perout >= 0) {
+	if (perout >= 0 || single_shot == 1) {
+		memset(&desc, 0, sizeof(desc));
+		desc.index = index;
+		if (ioctl(fd, PTP_PIN_GETFUNC2, &desc)) {
+			perror("PTP_PIN_GETFUNC2");
+		}
+
 		if (clock_gettime(clkid, &ts)) {
 			perror("clock_gettime");
 			return -1;
@@ -473,10 +481,20 @@ int main(int argc, char *argv[])
 			perout_request.start.nsec = 0;
 		}
 
-		if (ioctl(fd, PTP_PEROUT_REQUEST2, &perout_request)) {
-			perror("PTP_PEROUT_REQUEST");
+		if (perout <= 0 && (desc.flags & PTP_PINDESC_INPUTDISABLE)) {
+			perout_request.period.nsec = NSEC_PER_SEC / 2;
+			perout_request.flags = PTP_PEROUT_ONE_SHOT;
+			if (ioctl(fd, PTP_PEROUT_REQUEST2, &perout_request)) {
+				perror("PTP_PEROUT_REQUEST2");
+			} else {
+				puts("single shot output request okay");
+			}
 		} else {
-			puts("periodic output request okay");
+			if (ioctl(fd, PTP_PEROUT_REQUEST2, &perout_request)) {
+				perror("PTP_PEROUT_REQUEST2");
+			} else {
+				puts("periodic output request okay");
+			}
 		}
 	}
 
-- 
2.25.1

