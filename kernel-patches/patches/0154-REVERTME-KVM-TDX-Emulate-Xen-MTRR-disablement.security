From 12bd3f6070ef0d23153ff95b65e869cb31a0b570 Mon Sep 17 00:00:00 2001
From: Isaku Yamahata <isaku.yamahata@intel.com>
Date: Tue, 27 Jun 2023 07:38:26 -0700
Subject: [PATCH 154/163] [REVERTME] KVM: TDX: Emulate Xen MTRR disablement

The TDX module doesn't allow VMM to disable CPUID.MTRR
(CPUID[EAX=1].EDX[12]) bit.  It forcibly sets the bit to 1(MTRR available)
unconditionally and VMM can't change it.  The v6.5 guest kernel doesn't
disable MTRR explicitly.  It uses CPUID.MTRR and results in a kernel panic
when setting CR4.CD=1 to disable cache during programming MTRRs.

The guest kernel has Xen MTRR disablement.
  Commit f9626104a5b6 ("x86/mm/mtrr: Generalize runtime disabling of MTRRs")
When MTRR is available and MTRRdefType.enable = 0 as BIOS hand-off state,
the kernel pretends as MTRR isn't available.  That is a deviation from SDM
because MTRRdefType.enable = 0 means all memory access is UC according to
the SDM.

Mimic the Xen guest MTRR disablement for the TD guest kernel to boot.

Signed-off-by: Isaku Yamahata <isaku.yamahata@intel.com>
---
 arch/x86/kvm/vmx/tdx.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/arch/x86/kvm/vmx/tdx.c b/arch/x86/kvm/vmx/tdx.c
index 201b7f92230a..67ff136746c1 100644
--- a/arch/x86/kvm/vmx/tdx.c
+++ b/arch/x86/kvm/vmx/tdx.c
@@ -2208,6 +2208,24 @@ int tdx_get_msr(struct kvm_vcpu *vcpu, struct msr_data *msr)
 		 */
 		msr->data = 0;
 		return 0;
+	case MSR_MTRRdefType:
+		/*
+		 * FIXME: Xen convention to disable guest MTRR:
+		 * The guest kernel pretends as if MTRR isn't available when
+		 * CPUID.MTRR = 1 (MTRR available) and MTRRdefType.enable = 0
+		 * (MTRRs disabled) as BIOS hand-off state. Which is deviation
+		 * from SDM.  MTRRdefType.enable = 0 means all memory access is
+		 * UC according to the SDM.
+		 *
+		 * The TD guest kernel has to disable MTRR otherwise it tries
+		 * program MTRRs to disable caching. CR4.CD=1 results in the
+		 * unexpected #VE and the guest kernel panic.  As workaround,
+		 * utilize the Xen convention in the guest kernel.
+		 * E(MTRR enable)=0, FE(fixed range MTRR enable)=0,
+		 * default memory type=WB
+		 */
+		msr->data = MTRR_TYPE_WRBACK;
+		return 0;
 	default:
 		if (tdx_has_emulated_msr(msr->index, false))
 			return kvm_get_msr_common(vcpu, msr);
-- 
2.25.1

