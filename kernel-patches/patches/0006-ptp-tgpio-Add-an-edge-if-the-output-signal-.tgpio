From 0afe2f8ee054c8c8cb281fdd721960d170c680ec Mon Sep 17 00:00:00 2001
From: Lakshmi Sowjanya D <lakshmi.sowjanya.d@intel.com>
Date: Tue, 13 Dec 2022 10:52:33 +0530
Subject: [PATCH 6/6] ptp: tgpio: Add an edge if the output signal ends high

Always the periodic signal should start low. Inserting an edge to make
sure the current signal ends/starts low. Signal is also made to end low
to accommodate the use case for oneshot, which in other case edge is
insterted by the hardware.

Signed-off-by: Lakshmi Sowjanya D <lakshmi.sowjanya.d@intel.com>
---
 drivers/ptp/ptp-intel-pmc-tgpio.c | 53 +++++++++++++++++++++++++++++--
 include/linux/timekeeping.h       |  3 ++
 kernel/time/timekeeping.c         | 48 ++++++++++++++++++++++++++++
 3 files changed, 102 insertions(+), 2 deletions(-)

diff --git a/drivers/ptp/ptp-intel-pmc-tgpio.c b/drivers/ptp/ptp-intel-pmc-tgpio.c
index 6e5ee6e1ecc8..79abd86dd8b1 100644
--- a/drivers/ptp/ptp-intel-pmc-tgpio.c
+++ b/drivers/ptp/ptp-intel-pmc-tgpio.c
@@ -66,6 +66,7 @@ struct intel_pmc_tgpio_t {
 
 		ktime_t			 curr_ns;
 		u64			 curr_art;
+		bool			 out_high;
 
 		struct dentry		*root;
 		struct debugfs_regset32	*regset;
@@ -154,6 +155,45 @@ static int intel_pmc_tgpio_settime64(struct ptp_clock_info *info,
 	return -EOPNOTSUPP;
 }
 
+static int intel_pmc_tgpio_insert_edge(struct intel_pmc_tgpio_t *tgpio,
+					u32 index, u32 ctrl)
+{
+	struct system_counterval_t sys_counter;
+	ktime_t trigger;
+	int err;
+	u64 art;
+
+	trigger = ktime_get_real();
+	trigger = ktime_add_ns(trigger, NSEC_PER_SEC / 20);
+
+	err = ktime_convert_real_to_system_counter(trigger, &sys_counter);
+	if (err)
+		return err;
+
+	err = convert_tsc_to_art(&sys_counter, &art);
+	if (err)
+		return err;
+
+	/* In disabled state */
+	ctrl &= ~(TGPIOCTL_DIR | TGPIOCTL_PM);
+	ctrl &= ~TGPIOCTL_EP;
+	ctrl |= TGPIOCTL_EP_TOGGLE_EDGE;
+
+	INTEL_PMC_TGPIO_WR_REG(TGPIOCOMPV31_0, index, art & 0xFFFFFFFF);
+	INTEL_PMC_TGPIO_WR_REG(TGPIOCOMPV63_32, index, art >> 32);
+
+	ctrl |= TGPIOCTL_EN;
+	INTEL_PMC_TGPIO_WR_REG(TGPIOCTL, index, ctrl);
+
+	/* sleep for 100 milli-second */
+	msleep(2 * (MSEC_PER_SEC / 20));
+	ctrl &= ~TGPIOCTL_EN;
+	INTEL_PMC_TGPIO_WR_REG(TGPIOCTL, index, ctrl);
+	tgpio->pin[index].out_high = 0;
+
+	return 0;
+}
+
 static void intel_pmc_tgpio_pre_config(
 struct intel_pmc_tgpio_t *tgpio, unsigned int index, unsigned int ctrl,
 unsigned int ctrl_new, int *enable_toggle)
@@ -173,6 +213,9 @@ int enable_toggle)
 		ctrl |= TGPIOCTL_EN;
 	if (enable_toggle > 1 || enable_toggle < -1)
 		INTEL_PMC_TGPIO_WR_REG(TGPIOCTL, index, ctrl);
+	if (enable_toggle < -1 && tgpio->pin[index].out_high == 1)
+		intel_pmc_tgpio_insert_edge(tgpio, index, ctrl);
+
 }
 
 static int intel_pmc_tgpio_config_input
@@ -340,7 +383,6 @@ unsigned int flags, int on)
 		ctrl_new &= ~TGPIOCTL_EP;
 		ctrl_new |= TGPIOCTL_EP_TOGGLE_EDGE;
 		ctrl_new &= ~TGPIOCTL_DIR;
-
 		if (flags & PTP_PEROUT_ONE_SHOT)
 			ctrl_new &= ~TGPIOCTL_PM;
 		else
@@ -351,6 +393,14 @@ unsigned int flags, int on)
 		enable_toggle = enable_toggle > 0 ? -2 : -1;
 	}
 
+	tgpio->pin[index].out_high = (INTEL_PMC_TGPIO_RD_REG(TGPIOEC31_0, index)
+								& 0x1);
+	if (tgpio->pin[index].out_high == 1 && ((ctrl_new &  TGPIOCTL_PM) != 0)
+					&& !(flags & PTP_PEROUT_FREQ_ADJ)) {
+		ctrl &= ~TGPIOCTL_PM;
+		intel_pmc_tgpio_insert_edge(tgpio, index, ctrl);
+	}
+
 	intel_pmc_tgpio_pre_config
 		(tgpio, index, ctrl, ctrl_new, &enable_toggle);
 
@@ -371,7 +421,6 @@ unsigned int flags, int on)
 		tgpio->pin[index].curr_ns = timespec64_to_ktime(new_period_ns);
 		tgpio->pin[index].curr_art = new_period;
 	}
-
 	intel_pmc_tgpio_post_config(tgpio, index, ctrl_new, enable_toggle);
 
 	return 0;
diff --git a/include/linux/timekeeping.h b/include/linux/timekeeping.h
index 7f7e4a3f4394..eccefae28c62 100644
--- a/include/linux/timekeeping.h
+++ b/include/linux/timekeeping.h
@@ -276,6 +276,9 @@ struct system_counterval_t {
 	struct clocksource	*cs;
 };
 
+extern int ktime_convert_real_to_system_counter(ktime_t sys_realtime,
+					struct system_counterval_t *ret);
+
 /*
  * Get cross timestamp between system clock and device clock
  */
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index d9b48f7a35e0..ac834ee21009 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -378,6 +378,24 @@ u32 (*arch_gettimeoffset)(void) = default_arch_gettimeoffset;
 static inline u32 arch_gettimeoffset(void) { return 0; }
 #endif
 
+static inline u64 timekeeping_ns_delta_to_cycles(const struct tk_read_base *tkr,
+						u64 nsec)
+{
+	u64 cycles;
+
+	/* If arch requires, subtract get_arch_timeoffset() */
+	cycles = nsec - arch_gettimeoffset();
+
+	if (fls64(cycles) + tkr->shift > sizeof(cycles) * 8)
+		return (typeof(cycles))-1;
+
+	cycles <<= tkr->shift;
+	cycles -= tkr->xtime_nsec;
+	do_div(cycles, tkr->mult);
+
+	return cycles;
+}
+
 static inline u64 timekeeping_delta_to_ns(const struct tk_read_base *tkr, u64 delta)
 {
 	u64 nsec;
@@ -1290,6 +1308,36 @@ int get_device_system_crosststamp(int (*get_time_fn)
 }
 EXPORT_SYMBOL_GPL(get_device_system_crosststamp);
 
+int ktime_convert_real_to_system_counter(ktime_t sys_realtime,
+					struct system_counterval_t *ret)
+{
+	struct timekeeper *tk = &tk_core.timekeeper;
+	u64 ns_delta;
+	ktime_t base_real;
+	unsigned int seq;
+
+	do {
+		seq = read_seqcount_begin(&tk_core.seq);
+
+		base_real = ktime_add(tk->tkr_mono.base,
+					tk_core.timekeeper.offs_real);
+		if (ktime_compare(sys_realtime, base_real) < 0)
+			return -EINVAL;
+
+		ret->cs = tk->tkr_mono.clock;
+		ns_delta = ktime_to_ns(ktime_sub(sys_realtime, base_real));
+		ret->cycles = timekeeping_ns_delta_to_cycles(&tk->tkr_mono,
+								ns_delta);
+		if (ret->cycles == (typeof(ret->cycles))-1)
+			return -ERANGE;
+
+		ret->cycles += tk->tkr_mono.cycle_last;
+	} while (read_seqcount_retry(&tk_core.seq, seq));
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ktime_convert_real_to_system_counter);
+
 /**
  * do_settimeofday64 - Sets the time of day.
  * @ts:     pointer to the timespec64 variable containing the new time
-- 
2.17.1

