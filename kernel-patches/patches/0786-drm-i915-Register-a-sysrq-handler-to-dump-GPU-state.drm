From 3c2b2d5aab60848653c7349f27905cc8c5377619 Mon Sep 17 00:00:00 2001
From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Wed, 17 Nov 2021 10:33:29 +0000
Subject: [PATCH 786/800] drm/i915: Register a sysrq handler to dump GPU state

Couple in a sysrq handler for 'G' to show the current GPU state in
dmesg. Useful for diagnosing a hung system, along with the other task
and cpu state available from sysrq.

Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
Reviewed-by: Andrzej Hajda <andrzej.hajda@intel.com>
Signed-off-by: Zawawi, Muhammad Zul Husni <muhammad.zul.husni.zawawi@intel.com>
---
 drivers/gpu/drm/i915/Makefile      |   1 +
 drivers/gpu/drm/i915/i915_driver.c |   3 +
 drivers/gpu/drm/i915/i915_sysrq.c  | 152 +++++++++++++++++++++++++++++
 drivers/gpu/drm/i915/i915_sysrq.h  |  14 +++
 4 files changed, 170 insertions(+)
 create mode 100644 drivers/gpu/drm/i915/i915_sysrq.c
 create mode 100644 drivers/gpu/drm/i915/i915_sysrq.h

diff --git a/drivers/gpu/drm/i915/Makefile b/drivers/gpu/drm/i915/Makefile
index 42d668e628d7..348e32246791 100644
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@ -46,6 +46,7 @@ i915-y += i915_driver.o \
 	  i915_suspend.o \
 	  i915_switcheroo.o \
 	  i915_sysfs.o \
+	  i915_sysrq.o \
 	  i915_utils.o \
 	  intel_device_info.o \
 	  intel_dram.o \
diff --git a/drivers/gpu/drm/i915/i915_driver.c b/drivers/gpu/drm/i915/i915_driver.c
index c459eb362c47..bd46a6e317a9 100644
--- a/drivers/gpu/drm/i915/i915_driver.c
+++ b/drivers/gpu/drm/i915/i915_driver.c
@@ -91,6 +91,7 @@
 #include "i915_switcheroo.h"
 #include "i915_sysfs.h"
 #include "i915_utils.h"
+#include "i915_sysrq.h"
 #include "i915_vgpu.h"
 #include "intel_dram.h"
 #include "intel_gvt.h"
@@ -756,6 +757,7 @@ static void i915_driver_register(struct drm_i915_private *dev_priv)
 
 	i915_debugfs_register(dev_priv);
 	i915_setup_sysfs(dev_priv);
+	i915_register_sysrq(dev_priv);
 
 	/* Depends on sysfs having been initialized */
 	i915_perf_register(dev_priv);
@@ -798,6 +800,7 @@ static void i915_driver_unregister(struct drm_i915_private *dev_priv)
 	i915_perf_unregister(dev_priv);
 	i915_pmu_unregister(dev_priv);
 
+	i915_unregister_sysrq(dev_priv);
 	i915_teardown_sysfs(dev_priv);
 	drm_dev_unplug(&dev_priv->drm);
 
diff --git a/drivers/gpu/drm/i915/i915_sysrq.c b/drivers/gpu/drm/i915/i915_sysrq.c
new file mode 100644
index 000000000000..830610616e69
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_sysrq.c
@@ -0,0 +1,152 @@
+// SPDX-License-Identifier: MIT
+/*
+ * Copyright © 2021 Intel Corporation
+ */
+
+#include <linux/list.h>
+#include <linux/mutex.h>
+#include <linux/rculist.h>
+#include <linux/rcupdate.h>
+#include <linux/slab.h>
+#include <linux/sysrq.h>
+
+#include "gt/intel_engine.h"
+#include "gt/intel_gt.h"
+#include "gt/intel_gt_pm.h"
+#include "gt/intel_timeline.h"
+
+#include "i915_drv.h"
+#include "i915_request.h"
+#include "i915_sysrq.h"
+#include "i915_irq.h"
+
+static DEFINE_MUTEX(sysrq_mutex);
+static LIST_HEAD(sysrq_list);
+
+struct sysrq_cb {
+	struct list_head link;
+	struct rcu_head rcu;
+
+	void (*fn)(void *data);
+	void *data;
+};
+
+static void sysrq_handle_showgpu(int key)
+{
+	struct sysrq_cb *cb;
+
+	rcu_read_lock();
+	list_for_each_entry(cb, &sysrq_list, link)
+		cb->fn(cb->data);
+	rcu_read_unlock();
+}
+
+static const struct sysrq_key_op sysrq_showgpu_op = {
+		.handler        = sysrq_handle_showgpu,
+		.help_msg       = "show-gpu(G)",
+		.action_msg     = "Show GPU state",
+		.enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+
+static int register_sysrq(void (*fn)(void *data), void *data)
+{
+	struct sysrq_cb *cb;
+	int ret = 0;
+
+	cb = kmalloc(sizeof(*cb), GFP_KERNEL);
+	if (!cb)
+		return -ENOMEM;
+
+	cb->fn = fn;
+	cb->data = data;
+
+	mutex_lock(&sysrq_mutex);
+	if (list_empty(&sysrq_list))
+		ret = register_sysrq_key('G', &sysrq_showgpu_op);
+	if (ret == 0)
+		list_add_tail_rcu(&cb->link, &sysrq_list);
+	else
+		kfree(cb);
+	mutex_unlock(&sysrq_mutex);
+
+	return ret;
+}
+
+static void unregister_sysrq(void (*fn)(void *data), void *data)
+{
+	struct sysrq_cb *cb;
+
+	mutex_lock(&sysrq_mutex);
+	list_for_each_entry(cb, &sysrq_list, link) {
+		if (cb->fn == fn && cb->data == data) {
+			list_del_rcu(&cb->link);
+			if (list_empty(&sysrq_list))
+				unregister_sysrq_key('G', &sysrq_showgpu_op);
+			kfree_rcu(cb, rcu);
+			break;
+		}
+	}
+	mutex_unlock(&sysrq_mutex);
+
+	/* Flush the handler before our caller can free fn/data */
+	synchronize_rcu();
+}
+
+static void show_gpu_mem(struct drm_i915_private *i915, struct drm_printer *p)
+{
+	struct intel_memory_region *mr;
+	enum intel_region_id id;
+
+	for_each_memory_region(mr, i915, id)
+		drm_printf(p, "%s: total:%pa bytes\n",
+			   mr->name, &mr->total);
+}
+
+static void show_gt(struct intel_gt *gt, struct drm_printer *p)
+{
+	struct intel_engine_cs *engine;
+	enum intel_engine_id id;
+
+	drm_printf(p, "GT awake? %s [%d], %llums\n",
+		   str_yes_no(gt->awake),
+		   atomic_read(&gt->wakeref.count),
+		   ktime_to_ms(intel_gt_get_awake_time(gt)));
+
+	for_each_engine(engine, gt, id) {
+		if (intel_engine_is_idle(engine))
+			continue;
+
+		intel_engine_dump(engine, p, "%s\n", engine->name);
+	}
+
+	intel_gt_show_timelines(gt, p, i915_request_show_with_schedule);
+}
+
+static void show_rpm(struct drm_i915_private *i915, struct drm_printer *p)
+{
+	drm_printf(p, "Runtime power status: %s\n",
+		   str_enabled_disabled(!(i915->display.power.domains.init_wakeref)));
+	drm_printf(p, "IRQs disabled: %s\n",
+		   str_yes_no(!intel_irqs_enabled(i915)));
+	print_intel_runtime_pm_wakeref(&i915->runtime_pm, p);
+}
+
+static void show_gpu(void *data)
+{
+	struct drm_i915_private *i915 = data;
+	struct drm_printer p = drm_info_printer(i915->drm.dev);
+
+	show_rpm(i915, &p);
+	show_gt(to_gt(i915), &p);
+	show_gpu_mem(i915, &p);
+}
+
+int i915_register_sysrq(struct drm_i915_private *i915)
+{
+	return register_sysrq(show_gpu, i915);
+}
+
+void i915_unregister_sysrq(struct drm_i915_private *i915)
+{
+	unregister_sysrq(show_gpu, i915);
+}
diff --git a/drivers/gpu/drm/i915/i915_sysrq.h b/drivers/gpu/drm/i915/i915_sysrq.h
new file mode 100644
index 000000000000..7e43515a6919
--- /dev/null
+++ b/drivers/gpu/drm/i915/i915_sysrq.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: MIT */
+/*
+ * Copyright © 2021 Intel Corporation
+ */
+
+#ifndef __I915_SYSRQ_H__
+#define __I915_SYSRQ_H__
+
+struct drm_i915_private;
+
+int i915_register_sysrq(struct drm_i915_private *i915);
+void i915_unregister_sysrq(struct drm_i915_private *i915);
+
+#endif /* __I915_SYSRQ_H__ */
-- 
2.25.1

