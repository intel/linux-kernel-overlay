From a5005cef26447eea07222d6c14ec821e995aec92 Mon Sep 17 00:00:00 2001
From: Juston Li <juston.li@intel.com>
Date: Wed, 28 Jul 2021 14:47:23 -0700
Subject: [PATCH 287/333] drm/i915/pxp:[PXP-MULTI] block pxp_ops when
 termination is in progress

pxp_ops_ioctl during termination could cause pxp_start to be called
causing further global terminates to be queued.

Set hw_state_invalidated earlier and use it to block pxp_ioctls during
termination.

Also remove the fetch_and_zero on terminate complete as we want to wait
until after the arb session is back up before allowing ioctls.

Reference from chromium:
	BUG=b:191508777
	TEST=tast run <IP> video.PlayDRM*

	Cq-Depend: chromium:3132929, chromium:3134852

Signed-off-by: Juston Li <juston.li@intel.com>
Reviewed-by: Alan Previn <alan.previn.teres.alexis@intel.com>
Signed-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>
Acked-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
---
 drivers/gpu/drm/i915/pxp/intel_pxp.c         | 14 +++++++-------
 drivers/gpu/drm/i915/pxp/intel_pxp_session.c |  4 +++-
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp.c b/drivers/gpu/drm/i915/pxp/intel_pxp.c
index c7aa43c6ef26..7979915fe779 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp.c
@@ -262,6 +262,7 @@ void intel_pxp_fini(struct drm_i915_private *i915)
 
 void intel_pxp_mark_termination_in_progress(struct intel_pxp *pxp)
 {
+	pxp->hw_state_invalidated = true;
 	pxp->arb_session.is_valid = false;
 	pxp->arb_session.tag = 0;
 	reinit_completion(&pxp->termination);
@@ -652,6 +653,12 @@ int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmf
 		return 0;
 	}
 
+	if (pxp->hw_state_invalidated) {
+		drm_dbg(&i915->drm, "pxp ioctl retry required due to state attacked\n");
+		pxp_ops->status = PRELIM_DRM_I915_PXP_OP_STATUS_RETRY_REQUIRED;
+		goto out_pm;
+	}
+
 	if (!intel_pxp_is_active(pxp)) {
 		ret = intel_pxp_start(pxp);
 		if (ret)
@@ -660,12 +667,6 @@ int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmf
 
 	mutex_lock(&pxp->session_mutex);
 
-	if (pxp->hw_state_invalidated) {
-		drm_dbg(&i915->drm, "pxp ioctl retry required due to state attacked\n");
-		pxp_ops->status = PRELIM_DRM_I915_PXP_OP_STATUS_RETRY_REQUIRED;
-		goto out_unlock;
-	}
-
 	switch (pxp_ops->action) {
 	case PRELIM_DRM_I915_PXP_ACTION_SET_SESSION_STATUS:
 		ret = pxp_set_session_status(pxp, pxp_ops, drmfile);
@@ -681,7 +682,6 @@ int i915_pxp_ops_ioctl(struct drm_device *dev, void *data, struct drm_file *drmf
 		break;
 	}
 
-out_unlock:
 	mutex_unlock(&pxp->session_mutex);
 out_pm:
 	intel_runtime_pm_put(&i915->runtime_pm, wakeref);
diff --git a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
index 32574bb351d4..e50f831516cf 100644
--- a/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
+++ b/drivers/gpu/drm/i915/pxp/intel_pxp_session.c
@@ -469,8 +469,10 @@ void intel_pxp_terminate(struct intel_pxp *pxp, bool post_invalidation_needs_res
 static void pxp_terminate_complete(struct intel_pxp *pxp)
 {
 	/* Re-create the arb session after teardown handle complete */
-	if (fetch_and_zero(&pxp->hw_state_invalidated))
+	if (pxp->hw_state_invalidated) {
 		pxp_create_arb_session(pxp);
+		pxp->hw_state_invalidated = false;
+	}
 
 	complete_all(&pxp->termination);
 }
-- 
2.42.0

