From ead18078bddeb63b85b3a781a1933acc9e91b97c Mon Sep 17 00:00:00 2001
From: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date: Wed, 21 Jul 2021 15:34:03 +0300
Subject: [PATCH 13/20] TO BE FOLDED: pinctrl: meteorlake: Converted to be
 enumerated by HID

Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
---
 drivers/pinctrl/intel/pinctrl-meteorlake.c | 771 ++++++++++-----------
 1 file changed, 370 insertions(+), 401 deletions(-)

diff --git a/drivers/pinctrl/intel/pinctrl-meteorlake.c b/drivers/pinctrl/intel/pinctrl-meteorlake.c
index fa744eb16362..7591de73d2a4 100644
--- a/drivers/pinctrl/intel/pinctrl-meteorlake.c
+++ b/drivers/pinctrl/intel/pinctrl-meteorlake.c
@@ -27,8 +27,9 @@
 		.size = ((e) - (s) + 1),		\
 	}
 
-#define MTL_COMMUNITY(s, e, g)				\
+#define MTL_COMMUNITY(b, s, e, g)			\
 	{						\
+		.barno = (b),				\
 		.padown_offset = MTL_PAD_OWN,		\
 		.padcfglock_offset = MTL_PADCFGLOCK,	\
 		.hostown_offset = MTL_HOSTSW_OWN,	\
@@ -40,427 +41,395 @@
 		.ngpps = ARRAY_SIZE(g),			\
 	}
 
-/* Meteor Lake */
-static const struct pinctrl_pin_desc mtl_community0_pins[] = {
-	/* CPU */
-	PINCTRL_PIN(0, "PECI"),
-	PINCTRL_PIN(1, "UFS_RESET_B"),
-	PINCTRL_PIN(2, "VIDSOUT"),
-	PINCTRL_PIN(3, "VIDSCK"),
-	PINCTRL_PIN(4, "VIDALERT_B"),
-	/* GPP_V */
-	PINCTRL_PIN(5, "BATLOW_B"),
-	PINCTRL_PIN(6, "AC_PRESENT"),
-	PINCTRL_PIN(7, "SOC_WAKE_B"),
-	PINCTRL_PIN(8, "PWRBTN_B"),
-	PINCTRL_PIN(9, "SLP_S3_B"),
-	PINCTRL_PIN(10, "SLP_S4_B"),
-	PINCTRL_PIN(11, "SLP_A_B"),
-	PINCTRL_PIN(12, "GPP_V_7"),
-	PINCTRL_PIN(13, "SUSCLK"),
-	PINCTRL_PIN(14, "SLP_WLAN_B"),
-	PINCTRL_PIN(15, "SLP_S5_B"),
-	PINCTRL_PIN(16, "LANPHYPC"),
-	PINCTRL_PIN(17, "SLP_LAN_B"),
-	PINCTRL_PIN(18, "GPP_V_13"),
-	PINCTRL_PIN(19, "WAKE_B"),
-	PINCTRL_PIN(20, "GPP_V_15"),
-	PINCTRL_PIN(21, "GPP_V_16"),
-	PINCTRL_PIN(22, "GPP_V_17"),
-	PINCTRL_PIN(23, "GPP_V_18"),
-	PINCTRL_PIN(24, "CATERR_B"),
-	PINCTRL_PIN(25, "PROCHOT_B"),
-	PINCTRL_PIN(26, "THERMTRIP_B"),
-	PINCTRL_PIN(27, "DSI_DE_TE_2_GENLOCK_REF"),
-	PINCTRL_PIN(28, "DSI_DE_TE_1_DISP_UTILS"),
-	/* GPP_C */
-	PINCTRL_PIN(29, "SMBCLK"),
-	PINCTRL_PIN(30, "SMBDATA"),
-	PINCTRL_PIN(31, "SMBALERT_B"),
-	PINCTRL_PIN(32, "SML0CLK"),
-	PINCTRL_PIN(33, "SML0DATA"),
-	PINCTRL_PIN(34, "SML0ALERT_B"),
-	PINCTRL_PIN(35, "SML1CLK"),
-	PINCTRL_PIN(36, "SML1DATA"),
-	PINCTRL_PIN(37, "SML1ALERT_B"),
-	PINCTRL_PIN(38, "SRCCLKREQ0_B"),
-	PINCTRL_PIN(39, "SRCCLKREQ1_B"),
-	PINCTRL_PIN(40, "SRCCLKREQ2_B"),
-	PINCTRL_PIN(41, "SRCCLKREQ3_B"),
-	PINCTRL_PIN(42, "SRCCLKREQ4_B"),
-	PINCTRL_PIN(43, "GPP_C_14"),
-	PINCTRL_PIN(44, "GPP_C_15"),
-	PINCTRL_PIN(45, "TBT_LSX0_A"),
-	PINCTRL_PIN(46, "TBT_LSX0_B"),
-	PINCTRL_PIN(47, "TBT_LSX1_A"),
-	PINCTRL_PIN(48, "TBT_LSX1_B"),
-	PINCTRL_PIN(49, "TBT_LSX2_A"),
-	PINCTRL_PIN(50, "TBT_LSX2_B"),
-	PINCTRL_PIN(51, "TBT_LSX3_A"),
-	PINCTRL_PIN(52, "TBT_LSX3_B"),
-};
-
-static const struct intel_padgroup mtl_community0_gpps[] = {
-	MTL_GPP(0, 0, 4),	/* CPU */
-	MTL_GPP(1, 5, 28),	/* GPP_V */
-	MTL_GPP(2, 29, 52),	/* GPP_C */
-};
-
-static const struct intel_community mtl_community0[] = {
-	MTL_COMMUNITY(0, 52, mtl_community0_gpps),
-};
-
-static const struct intel_pinctrl_soc_data mtl_community0_soc_data = {
-	.uid = "0",
-	.pins = mtl_community0_pins,
-	.npins = ARRAY_SIZE(mtl_community0_pins),
-	.communities = mtl_community0,
-	.ncommunities = ARRAY_SIZE(mtl_community0),
-};
-
-static const struct pinctrl_pin_desc mtl_community1_pins[] = {
+/* Meteor Lake-S */
+static const struct pinctrl_pin_desc mtls_pins[] = {
+	/* GPP_D */
+	PINCTRL_PIN(0, "GPP_D_0"),
+	PINCTRL_PIN(1, "GPP_D_1"),
+	PINCTRL_PIN(2, "GPP_D_2"),
+	PINCTRL_PIN(3, "GPP_D_3"),
+	PINCTRL_PIN(4, "GPP_D_4"),
+	PINCTRL_PIN(5, "CNV_RF_RESET_B"),
+	PINCTRL_PIN(6, "CRF_CLKREQ"),
+	PINCTRL_PIN(7, "GPP_D_7"),
+	PINCTRL_PIN(8, "GPP_D_8"),
+	PINCTRL_PIN(9, "SML0CLK"),
+	PINCTRL_PIN(10, "SML0DATA"),
+	PINCTRL_PIN(11, "GPP_D_11"),
+	PINCTRL_PIN(12, "GPP_D_12"),
+	PINCTRL_PIN(13, "GPP_D_13"),
+	PINCTRL_PIN(14, "GPP_D_14"),
+	PINCTRL_PIN(15, "GPP_D_15"),
+	PINCTRL_PIN(16, "GPP_D_16"),
+	PINCTRL_PIN(17, "GPP_D_17"),
+	PINCTRL_PIN(18, "GPP_D_18"),
+	PINCTRL_PIN(19, "GPP_D_19"),
+	PINCTRL_PIN(20, "GPP_D_20"),
+	PINCTRL_PIN(21, "GPP_D_21"),
+	PINCTRL_PIN(22, "GPP_D_22"),
+	PINCTRL_PIN(23, "GPP_D_23"),
+	PINCTRL_PIN(24, "GSPI3_CLK_LOOPBK"),
+	/* GPP_R */
+	PINCTRL_PIN(25, "HDA_BCLK"),
+	PINCTRL_PIN(26, "HDA_SYNC"),
+	PINCTRL_PIN(27, "HDA_SDO"),
+	PINCTRL_PIN(28, "HDA_SDI_0"),
+	PINCTRL_PIN(29, "HDA_RSTB"),
+	PINCTRL_PIN(30, "GPP_R_5"),
+	PINCTRL_PIN(31, "GPP_R_6"),
+	PINCTRL_PIN(32, "GPP_R_7"),
+	PINCTRL_PIN(33, "GPP_R_8"),
+	PINCTRL_PIN(34, "GPP_R_9"),
+	PINCTRL_PIN(35, "GPP_R_10"),
+	PINCTRL_PIN(36, "GPP_R_11"),
+	PINCTRL_PIN(37, "GPP_R_12"),
+	PINCTRL_PIN(38, "GSPI2_CLK_LOOPBK"),
+	/* GPP_J */
+	PINCTRL_PIN(39, "GPP_J_0"),
+	PINCTRL_PIN(40, "CNV_BRI_DT"),
+	PINCTRL_PIN(41, "CNV_BRI_RSP"),
+	PINCTRL_PIN(42, "CNV_RGI_DT"),
+	PINCTRL_PIN(43, "CNV_RGI_RSP"),
+	PINCTRL_PIN(44, "GPP_J_5"),
+	PINCTRL_PIN(45, "GPP_J_6"),
+	PINCTRL_PIN(46, "BOOTHALT_B"),
+	PINCTRL_PIN(47, "RTCCLKOUT"),
+	PINCTRL_PIN(48, "BPKI3C_SDA"),
+	PINCTRL_PIN(49, "BPKI3C_SCL"),
+	PINCTRL_PIN(50, "DAM"),
+	PINCTRL_PIN(51, "HDACPU_SDI"),
+	PINCTRL_PIN(52, "HDACPU_SDO"),
+	PINCTRL_PIN(53, "HDACPU_BCLK"),
+	PINCTRL_PIN(54, "AUX_PWRGD"),
+	PINCTRL_PIN(55, "GLB_RST_WARN_B"),
+	/* vGPIO */
+	PINCTRL_PIN(56, "CNV_BTEN"),
+	PINCTRL_PIN(57, "CNV_BT_HOST_WAKEB"),
+	PINCTRL_PIN(58, "CNV_BT_IF_SELECT"),
+	PINCTRL_PIN(59, "vCNV_BT_UART_TXD"),
+	PINCTRL_PIN(60, "vCNV_BT_UART_RXD"),
+	PINCTRL_PIN(61, "vCNV_BT_UART_CTS_B"),
+	PINCTRL_PIN(62, "vCNV_BT_UART_RTS_B"),
+	PINCTRL_PIN(63, "vCNV_MFUART1_TXD"),
+	PINCTRL_PIN(64, "vCNV_MFUART1_RXD"),
+	PINCTRL_PIN(65, "vCNV_MFUART1_CTS_B"),
+	PINCTRL_PIN(66, "vCNV_MFUART1_RTS_B"),
+	PINCTRL_PIN(67, "vUART0_TXD"),
+	PINCTRL_PIN(68, "vUART0_RXD"),
+	PINCTRL_PIN(69, "vUART0_CTS_B"),
+	PINCTRL_PIN(70, "vUART0_RTS_B"),
+	PINCTRL_PIN(71, "vISH_UART0_TXD"),
+	PINCTRL_PIN(72, "vISH_UART0_RXD"),
+	PINCTRL_PIN(73, "vISH_UART0_CTS_B"),
+	PINCTRL_PIN(74, "vISH_UART0_RTS_B"),
+	PINCTRL_PIN(75, "vCNV_BT_I2S_BCLK"),
+	PINCTRL_PIN(76, "vCNV_BT_I2S_WS_SYNC"),
+	PINCTRL_PIN(77, "vCNV_BT_I2S_SDO"),
+	PINCTRL_PIN(78, "vCNV_BT_I2S_SDI"),
+	PINCTRL_PIN(79, "vI2S2_SCLK"),
+	PINCTRL_PIN(80, "vI2S2_SFRM"),
+	PINCTRL_PIN(81, "vI2S2_TXD"),
+	PINCTRL_PIN(82, "vI2S2_RXD"),
 	/* GPP_A */
-	PINCTRL_PIN(0, "ESPI_IO_0"),
-	PINCTRL_PIN(1, "ESPI_IO_1"),
-	PINCTRL_PIN(2, "ESPI_IO_2"),
-	PINCTRL_PIN(3, "ESPI_IO_3"),
-	PINCTRL_PIN(4, "ESPI_CS0_B"),
-	PINCTRL_PIN(5, "ESPI_CLK"),
-	PINCTRL_PIN(6, "ESPI_RESET_B"),
-	PINCTRL_PIN(7, "GPP_A_7"),
-	PINCTRL_PIN(8, "GPP_A_8"),
-	PINCTRL_PIN(9, "GPP_A_9"),
-	PINCTRL_PIN(10, "GPP_A_10"),
-	PINCTRL_PIN(11, "PMC_I2C_SDA"),
-	PINCTRL_PIN(12, "PMC_I2C_SCL"),
-	PINCTRL_PIN(13, "ESPI_CS1_B"),
-	PINCTRL_PIN(14, "ESPI_CS2_B"),
-	PINCTRL_PIN(15, "ESPI_CS3_B"),
-	PINCTRL_PIN(16, "ESPI_ALERT0_B"),
-	PINCTRL_PIN(17, "ESPI_ALERT1_B"),
-	PINCTRL_PIN(18, "ESPI_ALERT2_B"),
-	PINCTRL_PIN(19, "ESPI_ALERT3_B"),
-	PINCTRL_PIN(20, "ADR_COMPLETE"),
-	PINCTRL_PIN(21, "PMCALERT_B"),
-	PINCTRL_PIN(22, "GPP_A_22"),
-	PINCTRL_PIN(23, "GPP_A_23"),
-	PINCTRL_PIN(24, "ESPI_CLK_LOOPBK"),
-	/* GPP_E */
-	PINCTRL_PIN(25, "SATAXPCIE_0"),
-	PINCTRL_PIN(26, "USBC_SMLACLK"),
-	PINCTRL_PIN(27, "USBC_SMLADATA"),
-	PINCTRL_PIN(28, "CPU_GP_0"),
-	PINCTRL_PIN(29, "SATA_DEVSLP_0"),
-	PINCTRL_PIN(30, "SATA_DEVSLP_1"),
-	PINCTRL_PIN(31, "GPP_E_6"),
-	PINCTRL_PIN(32, "GPP_E_7"),
-	PINCTRL_PIN(33, "DDPA_CTRLDATA"),
-	PINCTRL_PIN(34, "USB2_OC0_B"),
-	PINCTRL_PIN(35, "GPP_E_10"),
-	PINCTRL_PIN(36, "GPP_E_11"),
-	PINCTRL_PIN(37, "GPP_E_12"),
-	PINCTRL_PIN(38, "GPP_E_13"),
-	PINCTRL_PIN(39, "DDSP_HPDA"),
-	PINCTRL_PIN(40, "CPU_GP_2"),
-	PINCTRL_PIN(41, "CPU_GP_3"),
-	PINCTRL_PIN(42, "GPP_E_17"),
-	PINCTRL_PIN(43, "GPP_E_18"),
-	PINCTRL_PIN(44, "GPP_E_19"),
-	PINCTRL_PIN(45, "GPP_E_20"),
-	PINCTRL_PIN(46, "GPP_E_21"),
-	PINCTRL_PIN(47, "DDPA_CTRLCLK"),
-	PINCTRL_PIN(48, "GPP_E_23"),
-	PINCTRL_PIN(49, "THC0_GSPI0_CLK_LOOPBK"),
-};
-
-static const struct intel_padgroup mtl_community1_gpps[] = {
-	MTL_GPP(0, 0, 24),	/* GPP_A */
-	MTL_GPP(1, 25, 49),	/* GPP_E */
-};
-
-static const struct intel_community mtl_community1[] = {
-	MTL_COMMUNITY(0, 49, mtl_community1_gpps),
-};
-
-static const struct intel_pinctrl_soc_data mtl_community1_soc_data = {
-	.uid = "1",
-	.pins = mtl_community1_pins,
-	.npins = ARRAY_SIZE(mtl_community1_pins),
-	.communities = mtl_community1,
-	.ncommunities = ARRAY_SIZE(mtl_community1),
-};
-
-static const struct pinctrl_pin_desc mtl_community3_pins[] = {
+	PINCTRL_PIN(83, "ESPI_IO_0"),
+	PINCTRL_PIN(84, "ESPI_IO_1"),
+	PINCTRL_PIN(85, "ESPI_IO_2"),
+	PINCTRL_PIN(86, "ESPI_IO_3"),
+	PINCTRL_PIN(87, "ESPI_CS0B"),
+	PINCTRL_PIN(88, "ESPI_CLK"),
+	PINCTRL_PIN(89, "ESPI_RESETB"),
+	PINCTRL_PIN(90, "ESPI_CS1B"),
+	PINCTRL_PIN(91, "ESPI_CS2B"),
+	PINCTRL_PIN(92, "ESPI_CS3B"),
+	PINCTRL_PIN(93, "ESPI_ALERT0B"),
+	PINCTRL_PIN(94, "ESPI_ALERT1B"),
+	PINCTRL_PIN(95, "ESPI_ALERT2B"),
+	PINCTRL_PIN(96, "ESPI_ALERT3B"),
+	PINCTRL_PIN(97, "ESPI_CLK_LOOPBK"),
+	/* DIR_ESPI */
+	PINCTRL_PIN(98, "DMI_SPARE"),
+	PINCTRL_PIN(99, "DMI_PERSTB"),
+	PINCTRL_PIN(100, "DMI_CLKREQB"),
+	PINCTRL_PIN(101, "DIR_ESPI_IO_0"),
+	PINCTRL_PIN(102, "DIR_ESPI_IO_1"),
+	PINCTRL_PIN(103, "DIR_ESPI_IO_2"),
+	PINCTRL_PIN(104, "DIR_ESPI_IO_3"),
+	PINCTRL_PIN(105, "DIR_ESPI_CSB"),
+	PINCTRL_PIN(106, "DIR_ESPI_RESETB"),
+	PINCTRL_PIN(107, "DIR_ESPI_CLK"),
+	PINCTRL_PIN(108, "DIR_ESPI_RCLK"),
+	PINCTRL_PIN(109, "DIR_ESPI_ALERTB"),
+	/* GPP_B */
+	PINCTRL_PIN(110, "GPP_B_0"),
+	PINCTRL_PIN(111, "GPP_B_1"),
+	PINCTRL_PIN(112, "GPP_B_2"),
+	PINCTRL_PIN(113, "GPP_B_3"),
+	PINCTRL_PIN(114, "GPP_B_4"),
+	PINCTRL_PIN(115, "GPP_B_5"),
+	PINCTRL_PIN(116, "CLKOUT_48"),
+	PINCTRL_PIN(117, "GPP_B_7"),
+	PINCTRL_PIN(118, "GPP_B_8"),
+	PINCTRL_PIN(119, "GPP_B_9"),
+	PINCTRL_PIN(120, "GPP_B_10"),
+	PINCTRL_PIN(121, "GPP_B_11"),
+	PINCTRL_PIN(122, "SLP_S0B"),
+	PINCTRL_PIN(123, "PLTRSTB"),
+	PINCTRL_PIN(124, "GPP_B_14"),
+	PINCTRL_PIN(125, "GPP_B_15"),
+	PINCTRL_PIN(126, "GPP_B_16"),
+	PINCTRL_PIN(127, "GPP_B_17"),
+	PINCTRL_PIN(128, "GPP_B_18"),
+	PINCTRL_PIN(129, "FUSA_DIAGTEST_EN"),
+	PINCTRL_PIN(130, "FUSA_DIAGTEST_MODE"),
+	PINCTRL_PIN(131, "GPP_B_21"),
+	/* DSW */
+	PINCTRL_PIN(132, "BATLOWB"),
+	PINCTRL_PIN(133, "ACPRESENT"),
+	PINCTRL_PIN(134, "LAN_WAKEB"),
+	PINCTRL_PIN(135, "PWRBTNB"),
+	PINCTRL_PIN(136, "SLP_S3B"),
+	PINCTRL_PIN(137, "SLP_S4B"),
+	PINCTRL_PIN(138, "SLP_AB"),
+	PINCTRL_PIN(139, "GPD_7"),
+	PINCTRL_PIN(140, "SUSCLK"),
+	PINCTRL_PIN(141, "SLP_WLANB"),
+	PINCTRL_PIN(142, "SLP_S5B"),
+	PINCTRL_PIN(143, "LANPHYPC"),
+	PINCTRL_PIN(144, "GPD_12"),
+	PINCTRL_PIN(145, "SLP_LANB"),
+	PINCTRL_PIN(146, "SLP_SUSB"),
+	PINCTRL_PIN(147, "WAKEB"),
+	PINCTRL_PIN(148, "DSW_SPARE"),
+	/* GPP_C */
+	PINCTRL_PIN(149, "SMBCLK"),
+	PINCTRL_PIN(150, "SMBDATA"),
+	PINCTRL_PIN(151, "SMBALERTB"),
+	PINCTRL_PIN(152, "GPP_C_3"),
+	PINCTRL_PIN(153, "GPP_C_4"),
+	PINCTRL_PIN(154, "GPP_C_5"),
+	PINCTRL_PIN(155, "GPP_C_6"),
+	PINCTRL_PIN(156, "GPP_C_7"),
+	PINCTRL_PIN(157, "GPP_C_8"),
+	PINCTRL_PIN(158, "GPP_C_9"),
+	PINCTRL_PIN(159, "GPP_C_10"),
+	PINCTRL_PIN(160, "GPP_C_11"),
+	PINCTRL_PIN(161, "GPP_C_12"),
+	PINCTRL_PIN(162, "GPP_C_13"),
+	PINCTRL_PIN(163, "GPP_C_14"),
+	PINCTRL_PIN(164, "GPP_C_15"),
+	PINCTRL_PIN(165, "GPP_C_16"),
+	PINCTRL_PIN(166, "GPP_C_17"),
+	PINCTRL_PIN(167, "GPP_C_18"),
+	PINCTRL_PIN(168, "GPP_C_19"),
+	PINCTRL_PIN(169, "GPP_C_20"),
+	PINCTRL_PIN(170, "GPP_C_21"),
+	PINCTRL_PIN(171, "GPP_C_22"),
+	PINCTRL_PIN(172, "GPP_C_23"),
 	/* GPP_H */
-	PINCTRL_PIN(0, "GPP_H_0"),
-	PINCTRL_PIN(1, "GPP_H_1"),
-	PINCTRL_PIN(2, "GPP_H_2"),
-	PINCTRL_PIN(3, "GPP_H_3"),
-	PINCTRL_PIN(4, "I2C2_SDA"),
-	PINCTRL_PIN(5, "I2C2_SCL"),
-	PINCTRL_PIN(6, "I2C3_SDA"),
-	PINCTRL_PIN(7, "I2C3_SCL"),
-	PINCTRL_PIN(8, "UART0_RXD"),
-	PINCTRL_PIN(9, "UART0_TXD"),
-	PINCTRL_PIN(10, "UART0_RTS_B"),
-	PINCTRL_PIN(11, "UART0_CTS_B"),
-	PINCTRL_PIN(12, "GPP_H_12"),
-	PINCTRL_PIN(13, "CPU_C10_GATE_B"),
-	PINCTRL_PIN(14, "ISH_UART1_RXD"),
-	PINCTRL_PIN(15, "ISH_UART1_TXD"),
-	PINCTRL_PIN(16, "DDPB_CTRLCLK"),
-	PINCTRL_PIN(17, "DDPB_CTRLDATA"),
-	PINCTRL_PIN(18, "GPP_H_18"),
-	PINCTRL_PIN(19, "I2C0_SDA"),
-	PINCTRL_PIN(20, "I2C0_SCL"),
-	PINCTRL_PIN(21, "I2C1_SDA"),
-	PINCTRL_PIN(22, "I2C1_SCL"),
-	PINCTRL_PIN(23, "GPP_H_23"),
-	PINCTRL_PIN(24, "LPI3C1_CLK_LOOPBK"),
-	PINCTRL_PIN(25, "LPI3C0_CLK_LOOPBK"),
-	/* GPP_F */
-	PINCTRL_PIN(26, "CNV_BRI_DT"),
-	PINCTRL_PIN(27, "CNV_BRI_RSP"),
-	PINCTRL_PIN(28, "CNV_RGI_DT"),
-	PINCTRL_PIN(29, "CNV_RGI_RSP"),
-	PINCTRL_PIN(30, "CNV_RF_RESET_B"),
-	PINCTRL_PIN(31, "GPP_F_5"),
-	PINCTRL_PIN(32, "CNV_PA_BLANKING"),
-	PINCTRL_PIN(33, "FUSA_DIAGTEST_EN"),
-	PINCTRL_PIN(34, "FUSA_DIAGTEST_MODE"),
-	PINCTRL_PIN(35, "BOOTMPC"),
-	PINCTRL_PIN(36, "SATAXPCIE_1"),
-	PINCTRL_PIN(37, "GPP_F_11"),
-	PINCTRL_PIN(38, "GSXDOUT"),
-	PINCTRL_PIN(39, "GSXSLOAD"),
-	PINCTRL_PIN(40, "GSXDIN"),
-	PINCTRL_PIN(41, "GSXSRESETB"),
-	PINCTRL_PIN(42, "GSXCLK"),
-	PINCTRL_PIN(43, "GMII_MDC_0"),
-	PINCTRL_PIN(44, "GMII_MDIO_0"),
-	PINCTRL_PIN(45, "GPP_F_19"),
-	PINCTRL_PIN(46, "GPP_F_20"),
-	PINCTRL_PIN(47, "GPP_F_21"),
-	PINCTRL_PIN(48, "GPP_F_22"),
-	PINCTRL_PIN(49, "GPP_F_23"),
-	PINCTRL_PIN(50, "THC1_GSPI1_CLK_LOOPBK"),
-	PINCTRL_PIN(51, "GSPI0A_CLK_LOOPBK"),
-	/* SPI0 */
-	PINCTRL_PIN(52, "SPI0_IO_2"),
-	PINCTRL_PIN(53, "SPI0_IO_3"),
-	PINCTRL_PIN(54, "SPI0_MOSI_IO_0"),
-	PINCTRL_PIN(55, "SPI0_MISO_IO_1"),
-	PINCTRL_PIN(56, "SPI0_TPM_CS_B"),
-	PINCTRL_PIN(57, "SPI0_FLASH_0_CS_B"),
-	PINCTRL_PIN(58, "SPI0_FLASH_1_CS_B"),
-	PINCTRL_PIN(59, "SPI0_CLK"),
-	PINCTRL_PIN(60, "L_BKLTEN"),
-	PINCTRL_PIN(61, "L_BKLTCTL"),
-	PINCTRL_PIN(62, "L_VDDEN"),
-	PINCTRL_PIN(63, "SYS_PWROK"),
-	PINCTRL_PIN(64, "SYS_RESET_B"),
-	PINCTRL_PIN(65, "MLK_RST_B"),
-	PINCTRL_PIN(66, "SPI0_CLK_LOOPBK"),
-	/* vGPIO_3 */
-	PINCTRL_PIN(67, "ESPI_USB_OCB_0"),
-	PINCTRL_PIN(68, "ESPI_USB_OCB_1"),
-	PINCTRL_PIN(69, "ESPI_USB_OCB_2"),
-	PINCTRL_PIN(70, "ESPI_USB_OCB_3"),
-	PINCTRL_PIN(71, "USB_CPU_OCB_0"),
-	PINCTRL_PIN(72, "USB_CPU_OCB_1"),
-	PINCTRL_PIN(73, "USB_CPU_OCB_2"),
-	PINCTRL_PIN(74, "USB_CPU_OCB_3"),
-	PINCTRL_PIN(75, "TS0_IN_INT"),
-	PINCTRL_PIN(76, "TS1_IN_INT"),
-	PINCTRL_PIN(77, "THC0_WOT_INT"),
-	PINCTRL_PIN(78, "THC1_WOT_INT"),
-	PINCTRL_PIN(79, "THC0_WHC_INT"),
-	PINCTRL_PIN(80, "THC1_WHC_INT"),
-};
-
-static const struct intel_padgroup mtl_community3_gpps[] = {
-	MTL_GPP(0, 0, 25),	/* GPP_H */
-	MTL_GPP(1, 26, 51),	/* GPP_F */
-	MTL_GPP(2, 52, 66),	/* SPI0 */
-	MTL_GPP(3, 67, 80),	/* vGPIO_3 */
-};
-
-static const struct intel_community mtl_community3[] = {
-	MTL_COMMUNITY(0, 80, mtl_community3_gpps),
-};
-
-static const struct intel_pinctrl_soc_data mtl_community3_soc_data = {
-	.uid = "3",
-	.pins = mtl_community3_pins,
-	.npins = ARRAY_SIZE(mtl_community3_pins),
-	.communities = mtl_community3,
-	.ncommunities = ARRAY_SIZE(mtl_community3),
-};
-
-static const struct pinctrl_pin_desc mtl_community4_pins[] = {
+	PINCTRL_PIN(173, "GPP_H_0"),
+	PINCTRL_PIN(174, "GPP_H_1"),
+	PINCTRL_PIN(175, "GPP_H_2"),
+	PINCTRL_PIN(176, "GPP_H_3"),
+	PINCTRL_PIN(177, "GPP_H_4"),
+	PINCTRL_PIN(178, "GPP_H_5"),
+	PINCTRL_PIN(179, "GPP_H_6"),
+	PINCTRL_PIN(180, "GPP_H_7"),
+	PINCTRL_PIN(181, "GPP_H_8"),
+	PINCTRL_PIN(182, "GPP_H_9"),
+	PINCTRL_PIN(183, "GPP_H_10"),
+	PINCTRL_PIN(184, "GPP_H_11"),
+	PINCTRL_PIN(185, "GPP_H_12"),
+	PINCTRL_PIN(186, "GPP_H_13"),
+	PINCTRL_PIN(187, "GPP_H_14"),
+	PINCTRL_PIN(188, "GPP_H_15"),
+	PINCTRL_PIN(189, "GPP_H_16"),
+	PINCTRL_PIN(190, "GPP_H_17"),
+	PINCTRL_PIN(191, "GPP_H_18"),
+	PINCTRL_PIN(192, "GPP_H_19"),
+	/* vGPIO_0 */
+	PINCTRL_PIN(193, "ESPI_USB_OCB_0"),
+	PINCTRL_PIN(194, "ESPI_USB_OCB_1"),
+	PINCTRL_PIN(195, "ESPI_USB_OCB_2"),
+	PINCTRL_PIN(196, "ESPI_USB_OCB_3"),
+	PINCTRL_PIN(197, "USB_CPU_OCB_0"),
+	PINCTRL_PIN(198, "USB_CPU_OCB_1"),
+	PINCTRL_PIN(199, "USB_CPU_OCB_2"),
+	PINCTRL_PIN(200, "USB_CPU_OCB_3"),
+	PINCTRL_PIN(201, "USB_CPU_OCB_4"),
+	PINCTRL_PIN(202, "USB_CPU_OCB_5"),
+	PINCTRL_PIN(203, "USB_CPU_OCB_6"),
+	PINCTRL_PIN(204, "USB_CPU_OCB_7"),
+	/* vGPIO_4 */
+	PINCTRL_PIN(205, "ESPI_ISCLK_XTAL_CLKREQ"),
 	/* GPP_S */
-	PINCTRL_PIN(0, "SNDW0_CLK"),
-	PINCTRL_PIN(1, "SNDW0_DATA0"),
-	PINCTRL_PIN(2, "SNDW1_CLK"),
-	PINCTRL_PIN(3, "SNDW1_DATA"),
-	PINCTRL_PIN(4, "SNDW2_CLK"),
-	PINCTRL_PIN(5, "SNDW2_DATA"),
-	PINCTRL_PIN(6, "SNDW3_CLK"),
-	PINCTRL_PIN(7, "SNDW3_DATA"),
-	/* JTAG */
-	PINCTRL_PIN(8, "JTAG_MBPB0"),
-	PINCTRL_PIN(9, "JTAG_MBPB1"),
-	PINCTRL_PIN(10, "JTAG_MBPB2"),
-	PINCTRL_PIN(11, "JTAG_MBPB3"),
-	PINCTRL_PIN(12, "JTAG_TDO"),
-	PINCTRL_PIN(13, "PRDY_B"),
-	PINCTRL_PIN(14, "PREQ_B"),
-	PINCTRL_PIN(15, "JTAG_TDI"),
-	PINCTRL_PIN(16, "JTAG_TMS"),
-	PINCTRL_PIN(17, "JTAG_TCK"),
-	PINCTRL_PIN(18, "DBG_PMODE"),
-	PINCTRL_PIN(19, "JTAG_TRST_B"),
+	PINCTRL_PIN(206, "GPP_S_0"),
+	PINCTRL_PIN(207, "GPP_S_1"),
+	PINCTRL_PIN(208, "GPP_S_2"),
+	PINCTRL_PIN(209, "GPP_S_3"),
+	PINCTRL_PIN(210, "GPP_S_4"),
+	PINCTRL_PIN(211, "GPP_S_5"),
+	PINCTRL_PIN(212, "GPP_S_6"),
+	PINCTRL_PIN(213, "GPP_S_7"),
+	/* GPP_E */
+	PINCTRL_PIN(214, "SATAXPCIE_0"),
+	PINCTRL_PIN(215, "SATAXPCIE_1"),
+	PINCTRL_PIN(216, "SATAXPCIE_2"),
+	PINCTRL_PIN(217, "GPP_E_3"),
+	PINCTRL_PIN(218, "GPP_E_4"),
+	PINCTRL_PIN(219, "GPP_E_5"),
+	PINCTRL_PIN(220, "GPP_E_6"),
+	PINCTRL_PIN(221, "GPP_E_7"),
+	PINCTRL_PIN(222, "GPP_E_8"),
+	PINCTRL_PIN(223, "GPP_E_9"),
+	PINCTRL_PIN(224, "GPP_E_10"),
+	PINCTRL_PIN(225, "GPP_E_11"),
+	PINCTRL_PIN(226, "GPP_E_12"),
+	PINCTRL_PIN(227, "GPP_E_13"),
+	PINCTRL_PIN(228, "GPP_E_14"),
+	PINCTRL_PIN(229, "GPP_E_15"),
+	PINCTRL_PIN(230, "GPP_E_16"),
+	PINCTRL_PIN(231, "GPP_E_17"),
+	PINCTRL_PIN(232, "GPP_E_18"),
+	PINCTRL_PIN(233, "GPP_E_19"),
+	PINCTRL_PIN(234, "GPP_E_20"),
+	PINCTRL_PIN(235, "GPP_E_21"),
+	PINCTRL_PIN(236, "SPI1_CLK_LOOPBK"),
+	/* GPP_K */
+	PINCTRL_PIN(237, "GPP_K_0"),
+	PINCTRL_PIN(238, "GPP_K_1"),
+	PINCTRL_PIN(239, "GPP_K_2"),
+	PINCTRL_PIN(240, "GPP_K_3"),
+	PINCTRL_PIN(241, "GPP_K_4"),
+	PINCTRL_PIN(242, "GPP_K_5"),
+	PINCTRL_PIN(243, "FUSE_SORT_BUMP_0"),
+	PINCTRL_PIN(244, "FUSE_SORT_BUMP_1"),
+	PINCTRL_PIN(245, "CORE_VID_0"),
+	PINCTRL_PIN(246, "CORE_VID_1"),
+	PINCTRL_PIN(247, "FUSE_SORT_BUMP_2"),
+	PINCTRL_PIN(248, "RESET_SYNCB"),
+	PINCTRL_PIN(249, "SYS_RESETB"),
+	PINCTRL_PIN(250, "MLK_RSTB"),
+	/* GPP_F */
+	PINCTRL_PIN(251, "SATAXPCIE_3"),
+	PINCTRL_PIN(252, "SATAXPCIE_4"),
+	PINCTRL_PIN(253, "SATAXPCIE_5"),
+	PINCTRL_PIN(254, "SATAXPCIE_6"),
+	PINCTRL_PIN(255, "SATAXPCIE_7"),
+	PINCTRL_PIN(256, "SATA_DEVSLP_3"),
+	PINCTRL_PIN(257, "SATA_DEVSLP_4"),
+	PINCTRL_PIN(258, "SATA_DEVSLP_5"),
+	PINCTRL_PIN(259, "SATA_DEVSLP_6"),
+	PINCTRL_PIN(260, "GPP_F_9"),
+	PINCTRL_PIN(261, "GPP_F_10"),
+	PINCTRL_PIN(262, "GPP_F_11"),
+	PINCTRL_PIN(263, "GPP_F_12"),
+	PINCTRL_PIN(264, "GPP_F_13"),
+	PINCTRL_PIN(265, "PS_ONB"),
+	PINCTRL_PIN(266, "M2_SKT2_CFG_0"),
+	PINCTRL_PIN(267, "M2_SKT2_CFG_1"),
+	PINCTRL_PIN(268, "M2_SKT2_CFG_2"),
+	PINCTRL_PIN(269, "M2_SKT2_CFG_3"),
+	PINCTRL_PIN(270, "DNX_FORCE_RELOAD"),
+	PINCTRL_PIN(271, "GPP_F_20"),
+	PINCTRL_PIN(272, "GPP_F_21"),
+	PINCTRL_PIN(273, "GPP_F_22"),
+	PINCTRL_PIN(274, "GPP_F_23"),
+	/* GPP_I */
+	PINCTRL_PIN(275, "GPP_I_0"),
+	PINCTRL_PIN(276, "GPP_I_1"),
+	PINCTRL_PIN(277, "GPP_I_2"),
+	PINCTRL_PIN(278, "GPP_I_3"),
+	PINCTRL_PIN(279, "GPP_I_4"),
+	PINCTRL_PIN(280, "GPP_I_5"),
+	PINCTRL_PIN(281, "GPP_I_6"),
+	PINCTRL_PIN(282, "GPP_I_7"),
+	PINCTRL_PIN(283, "GPP_I_8"),
+	PINCTRL_PIN(284, "GPP_I_9"),
+	PINCTRL_PIN(285, "GPP_I_10"),
+	PINCTRL_PIN(286, "GPP_I_11"),
+	PINCTRL_PIN(287, "GPP_I_12"),
+	PINCTRL_PIN(288, "GPP_I_13"),
+	PINCTRL_PIN(289, "GPP_I_14"),
+	PINCTRL_PIN(290, "GPP_I_15"),
+	PINCTRL_PIN(291, "GPP_I_16"),
+	PINCTRL_PIN(292, "GSPI0_CLK_LOOPBK"),
+	PINCTRL_PIN(293, "GSPI1_CLK_LOOPBK"),
+	PINCTRL_PIN(294, "ISH_I3C0_CLK_LOOPBK"),
+	PINCTRL_PIN(295, "I3C0_CLK_LOOPBK"),
+	/* JTAG_CPU */
+	PINCTRL_PIN(296, "JTAG_TDO"),
+	PINCTRL_PIN(297, "JTAGX"),
+	PINCTRL_PIN(298, "PRDYB"),
+	PINCTRL_PIN(299, "PREQB"),
+	PINCTRL_PIN(300, "JTAG_TDI"),
+	PINCTRL_PIN(301, "JTAG_TMS"),
+	PINCTRL_PIN(302, "JTAG_TCK"),
+	PINCTRL_PIN(303, "DBG_PMODE"),
+	PINCTRL_PIN(304, "CPU_TRSTB"),
+	PINCTRL_PIN(305, "CPUPWRGD"),
+	PINCTRL_PIN(306, "PM_SPARE0"),
+	PINCTRL_PIN(307, "PM_SPARE1"),
+	PINCTRL_PIN(308, "CRASHLOG_TRIG_N"),
+	PINCTRL_PIN(309, "TRIGGER_IN"),
+	PINCTRL_PIN(310, "TRIGGER_OUT"),
+	PINCTRL_PIN(311, "FBRK_OUT_N"),
 };
 
-static const struct intel_padgroup mtl_community4_gpps[] = {
-	MTL_GPP(0, 0, 7),	/* GPP_S */
-	MTL_GPP(1, 8, 19),	/* JTAG */
+static const struct intel_padgroup mtls_community0_gpps[] = {
+	MTL_GPP(0, 0, 24),	/* GPP_D */
+	MTL_GPP(1, 25, 38),	/* GPP_R */
+	MTL_GPP(2, 39, 55),	/* GPP_J */
+	MTL_GPP(3, 56, 82),	/* vGPIO */
 };
 
-static const struct intel_community mtl_community4[] = {
-	MTL_COMMUNITY(0, 19, mtl_community4_gpps),
+static const struct intel_padgroup mtls_community1_gpps[] = {
+	MTL_GPP(0, 83, 97),	/* GPP_A */
+	MTL_GPP(1, 98, 109),	/* DIR_ESPI */
+	MTL_GPP(2, 110, 131),	/* GPP_B */
 };
 
-static const struct intel_pinctrl_soc_data mtl_community4_soc_data = {
-	.uid = "4",
-	.pins = mtl_community4_pins,
-	.npins = ARRAY_SIZE(mtl_community4_pins),
-	.communities = mtl_community4,
-	.ncommunities = ARRAY_SIZE(mtl_community4),
+static const struct intel_padgroup mtls_community2_gpps[] = {
+	MTL_GPP(0, 132, 148),	/* DSW */
 };
 
-static const struct pinctrl_pin_desc mtl_community5_pins[] = {
-	/* GPP_B */
-	PINCTRL_PIN(0, "ADM_VID_0"),
-	PINCTRL_PIN(1, "ADM_VID_1"),
-	PINCTRL_PIN(2, "GPP_B_2"),
-	PINCTRL_PIN(3, "GPP_B_3"),
-	PINCTRL_PIN(4, "GPP_B_4"),
-	PINCTRL_PIN(5, "GPP_B_5"),
-	PINCTRL_PIN(6, "GPP_B_6"),
-	PINCTRL_PIN(7, "GPP_B_7"),
-	PINCTRL_PIN(8, "GPP_B_8"),
-	PINCTRL_PIN(9, "GPP_B_9"),
-	PINCTRL_PIN(10, "GPP_B_10"),
-	PINCTRL_PIN(11, "USB2_OC1_B"),
-	PINCTRL_PIN(12, "SLP_S0_B"),
-	PINCTRL_PIN(13, "PLTRST_B"),
-	PINCTRL_PIN(14, "USB2_OC2_B"),
-	PINCTRL_PIN(15, "USB2_OC3_B"),
-	PINCTRL_PIN(16, "GPP_B_16"),
-	PINCTRL_PIN(17, "GPP_B_17"),
-	PINCTRL_PIN(18, "ISH_I2C2_SDA"),
-	PINCTRL_PIN(19, "ISH_I2C2_SCL"),
-	PINCTRL_PIN(20, "GPP_B_20"),
-	PINCTRL_PIN(21, "GPP_B_21"),
-	PINCTRL_PIN(22, "TIME_SYNC_0"),
-	PINCTRL_PIN(23, "TIME_SYNC_1"),
-	PINCTRL_PIN(24, "ISHI3C0_CLK_LOOPBK"),
-	/* GPP_D */
-	PINCTRL_PIN(25, "IMGCLKOUT_1"),
-	PINCTRL_PIN(26, "I2C3A_SDA"),
-	PINCTRL_PIN(27, "I2C3A_SCL"),
-	PINCTRL_PIN(28, "CPU_GP_1"),
-	PINCTRL_PIN(29, "IMGCLKOUT_0"),
-	PINCTRL_PIN(30, "GPP_D_5"),
-	PINCTRL_PIN(31, "GPP_D_6"),
-	PINCTRL_PIN(32, "IMGCLKOUT_4"),
-	PINCTRL_PIN(33, "GPP_D_8"),
-	PINCTRL_PIN(34, "GPP_D_9"),
-	PINCTRL_PIN(35, "HDA_BCLK"),
-	PINCTRL_PIN(36, "HDA_SYNC"),
-	PINCTRL_PIN(37, "HDA_SDO"),
-	PINCTRL_PIN(38, "HDA_SDI_0"),
-	PINCTRL_PIN(39, "GPP_D_14"),
-	PINCTRL_PIN(40, "GPP_D_15"),
-	PINCTRL_PIN(41, "HDA_SDI_1"),
-	PINCTRL_PIN(42, "HDA_RST_B"),
-	PINCTRL_PIN(43, "SRCCLKREQ6_B"),
-	PINCTRL_PIN(44, "SRCCLKREQ7_B"),
-	PINCTRL_PIN(45, "SRCCLKREQ8_B"),
-	PINCTRL_PIN(46, "UFS_REFCLK"),
-	PINCTRL_PIN(47, "BPKI3C_SDA"),
-	PINCTRL_PIN(48, "BPKI3C_SCL"),
-	PINCTRL_PIN(49, "BOOTHALT_B"),
-	/* vGPIO */
-	PINCTRL_PIN(50, "CNV_BTEN"),
-	PINCTRL_PIN(51, "CNV_BT_HOST_WAKEB"),
-	PINCTRL_PIN(52, "CNV_BT_IF_SELECT"),
-	PINCTRL_PIN(53, "vCNV_BT_UART_TXD"),
-	PINCTRL_PIN(54, "vCNV_BT_UART_RXD"),
-	PINCTRL_PIN(55, "vCNV_BT_UART_CTS_B"),
-	PINCTRL_PIN(56, "vCNV_BT_UART_RTS_B"),
-	PINCTRL_PIN(57, "vCNV_MFUART1_TXD"),
-	PINCTRL_PIN(58, "vCNV_MFUART1_RXD"),
-	PINCTRL_PIN(59, "vCNV_MFUART1_CTS_B"),
-	PINCTRL_PIN(60, "vCNV_MFUART1_RTS_B"),
-	PINCTRL_PIN(61, "vUART0_TXD"),
-	PINCTRL_PIN(62, "vUART0_RXD"),
-	PINCTRL_PIN(63, "vUART0_CTS_B"),
-	PINCTRL_PIN(64, "vUART0_RTS_B"),
-	PINCTRL_PIN(65, "vISH_UART0_TXD"),
-	PINCTRL_PIN(66, "vISH_UART0_RXD"),
-	PINCTRL_PIN(67, "vISH_UART0_CTS_B"),
-	PINCTRL_PIN(68, "vISH_UART0_RTS_B"),
-	PINCTRL_PIN(69, "vCNV_BT_I2S_BCLK"),
-	PINCTRL_PIN(70, "vCNV_BT_I2S_WS_SYNC"),
-	PINCTRL_PIN(71, "vCNV_BT_I2S_SDO"),
-	PINCTRL_PIN(72, "vCNV_BT_I2S_SDI"),
-	PINCTRL_PIN(73, "vI2S2_SCLK"),
-	PINCTRL_PIN(74, "vI2S2_SFRM"),
-	PINCTRL_PIN(75, "vI2S2_TXD"),
-	PINCTRL_PIN(76, "vI2S2_RXD"),
-	PINCTRL_PIN(77, "vCNV_BT_I2S_BCLK_2"),
-	PINCTRL_PIN(78, "vCNV_BT_I2S_WS_SYNC_2"),
-	PINCTRL_PIN(79, "vCNV_BT_I2S_SDO_2"),
-	PINCTRL_PIN(80, "vCNV_BT_I2S_SDI_2"),
-	PINCTRL_PIN(81, "vI2S2_SCLK_2"),
-	PINCTRL_PIN(82, "vI2S2_SFRM_2"),
-	PINCTRL_PIN(83, "vI2S2_TXD_2"),
-	PINCTRL_PIN(84, "vI2S2_RXD_2"),
+static const struct intel_padgroup mtls_community3_gpps[] = {
+	MTL_GPP(0, 149, 172),	/* GPP_C */
+	MTL_GPP(1, 173, 192),	/* GPP_H */
+	MTL_GPP(2, 193, 204),	/* vGPIO_0 */
+	MTL_GPP(3, 205, 205),	/* vGPIO_4 */
 };
 
-static const struct intel_padgroup mtl_community5_gpps[] = {
-	MTL_GPP(0, 0, 24),	/* GPP_B */
-	MTL_GPP(1, 25, 49),	/* GPP_D */
-	MTL_GPP(2, 50, 81),	/* vGPIO_0 */
-	MTL_GPP(3, 82, 84),	/* vGPIO_1 */
+static const struct intel_padgroup mtls_community4_gpps[] = {
+	MTL_GPP(0, 206, 213),	/* GPP_S */
+	MTL_GPP(1, 214, 236),	/* GPP_E */
+	MTL_GPP(2, 237, 250),	/* GPP_K */
+	MTL_GPP(3, 251, 274),	/* GPP_F */
 };
 
-static const struct intel_community mtl_community5[] = {
-	MTL_COMMUNITY(0, 84, mtl_community5_gpps),
+static const struct intel_padgroup mtls_community5_gpps[] = {
+	MTL_GPP(0, 275, 295),	/* GPP_I */
+	MTL_GPP(1, 296, 311),	/* JTAG_CPU */
 };
 
-static const struct intel_pinctrl_soc_data mtl_community5_soc_data = {
-	.uid = "5",
-	.pins = mtl_community5_pins,
-	.npins = ARRAY_SIZE(mtl_community5_pins),
-	.communities = mtl_community5,
-	.ncommunities = ARRAY_SIZE(mtl_community5),
+static const struct intel_community mtls_communities[] = {
+	MTL_COMMUNITY(0, 0, 82, mtls_community0_gpps),
+	MTL_COMMUNITY(1, 83, 131, mtls_community1_gpps),
+	MTL_COMMUNITY(2, 132, 148, mtls_community2_gpps),
+	MTL_COMMUNITY(3, 149, 205, mtls_community3_gpps),
+	MTL_COMMUNITY(4, 206, 274, mtls_community4_gpps),
+	MTL_COMMUNITY(5, 275, 311, mtls_community5_gpps),
 };
 
-static const struct intel_pinctrl_soc_data *mtl_soc_data_array[] = {
-	&mtl_community0_soc_data,
-	&mtl_community1_soc_data,
-	&mtl_community3_soc_data,
-	&mtl_community4_soc_data,
-	&mtl_community5_soc_data,
-	NULL
+static const struct intel_pinctrl_soc_data mtls_soc_data = {
+	.pins = mtls_pins,
+	.npins = ARRAY_SIZE(mtls_pins),
+	.communities = mtls_communities,
+	.ncommunities = ARRAY_SIZE(mtls_communities),
 };
 
 static const struct acpi_device_id mtl_pinctrl_acpi_match[] = {
-	{ "INTC1083", (kernel_ulong_t)mtl_soc_data_array },
-	{ "INTC1086", (kernel_ulong_t)mtl_soc_data_array },
+	{ "INTC1083", (kernel_ulong_t)&mtls_soc_data },
+	{ "INTC1086", (kernel_ulong_t)&mtls_soc_data },
 	{ }
 };
 MODULE_DEVICE_TABLE(acpi, mtl_pinctrl_acpi_match);
@@ -468,7 +437,7 @@ MODULE_DEVICE_TABLE(acpi, mtl_pinctrl_acpi_match);
 static INTEL_PINCTRL_PM_OPS(mtl_pinctrl_pm_ops);
 
 static struct platform_driver mtl_pinctrl_driver = {
-	.probe = intel_pinctrl_probe_by_uid,
+	.probe = intel_pinctrl_probe_by_hid,
 	.driver = {
 		.name = "meteorlake-pinctrl",
 		.acpi_match_table = mtl_pinctrl_acpi_match,
-- 
2.32.0

