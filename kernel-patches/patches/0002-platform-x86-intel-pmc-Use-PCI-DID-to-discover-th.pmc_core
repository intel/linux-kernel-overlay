From 377acce419cf87513e125ae0f5a273597b202ea3 Mon Sep 17 00:00:00 2001
From: "David E. Box" <david.e.box@linux.intel.com>
Date: Thu, 1 Feb 2024 15:53:01 -0800
Subject: [PATCH 2/2] platform/x86/intel/pmc: Use PCI DID to discover the PMC
 SSRAM device

Due to new chiplet architecture, the PCI Bus enumeration of the integrated
devices in a package may no longer be fixed for a given CPU. Change the PMC
SSRAM discovery to search for the device by PCI DID instead of assuming its
location on the PCI bus, which may not always be the same.

Signed-off-by: David E. Box <david.e.box@linux.intel.com>
---
 drivers/platform/x86/intel/pmc/arl.c        | 20 ++++++++++++++------
 drivers/platform/x86/intel/pmc/core.h       |  2 +-
 drivers/platform/x86/intel/pmc/core_ssram.c |  4 ++--
 drivers/platform/x86/intel/pmc/mtl.c        |  4 ++--
 4 files changed, 19 insertions(+), 11 deletions(-)

diff --git a/drivers/platform/x86/intel/pmc/arl.c b/drivers/platform/x86/intel/pmc/arl.c
index 1bd85cfe944a..4c48a91e3e19 100644
--- a/drivers/platform/x86/intel/pmc/arl.c
+++ b/drivers/platform/x86/intel/pmc/arl.c
@@ -17,6 +17,11 @@
 #define SOCS_LPM_REQ_GUID	0x8478657
 #define PCHS_LPM_REQ_GUID	0x9684572
 
+enum soc_type {
+	SOC_M,
+	SOC_S
+};
+
 static const u8 ARL_LPM_REG_INDEX[] = {0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20};
 
 const struct pmc_bit_map arl_socs_ltr_show_map[] = {
@@ -650,6 +655,7 @@ const struct pmc_reg_map arl_pchs_reg_map = {
 	.etr3_offset = ETR3_OFFSET,
 };
 
+#define PMC_DEVID_SOCM 0x7e7f
 #define PMC_DEVID_SOCS 0xae7f
 #define PMC_DEVID_IOEP 0x7ecf
 #define PMC_DEVID_PCHS 0x7f27
@@ -703,8 +709,8 @@ int arl_core_init(struct pmc_dev *pmcdev) {
 int arl_core_generic_init(struct pmc_dev *pmcdev, int soc_tp)
 {
 	struct pmc *pmc = pmcdev->pmcs[PMC_IDX_SOC];
+	unsigned int devid;
 	int ret;
-	int func = 0;
 	bool ssram_init = true;
 
 	arl_d3_fixup();
@@ -713,21 +719,23 @@ int arl_core_generic_init(struct pmc_dev *pmcdev, int soc_tp)
 	pmcdev->regmap_list = arl_pmc_info_list;
 
 	if (soc_tp == SOC_M)
-		func = 2;
+		devid =  PMC_DEVID_SOCM;
+	else if (soc_tp == SOC_S)
+		devid =  PMC_DEVID_SOCS;
+	else
+		return -EINVAL;
 
 	/*
 	 * If ssram init fails use legacy method to at least get the
 	 * primary PMC
 	 */
-	ret = pmc_core_ssram_init(pmcdev, func);
+	ret = pmc_core_ssram_init(pmcdev, devid);
 	if (ret) {
 		ssram_init = false;
 		if (soc_tp == SOC_M)
 			pmc->map = &mtl_socm_reg_map;
-		else if (soc_tp == SOC_S)
-			pmc->map = &arl_socs_reg_map;
 		else
-			return -EINVAL;
+			pmc->map = &arl_socs_reg_map;
 
 		ret = get_primary_reg_base(pmc);
 		if (ret)
diff --git a/drivers/platform/x86/intel/pmc/core.h b/drivers/platform/x86/intel/pmc/core.h
index 53d8e5c394e4..09643aebbb31 100644
--- a/drivers/platform/x86/intel/pmc/core.h
+++ b/drivers/platform/x86/intel/pmc/core.h
@@ -579,7 +579,7 @@ extern void pmc_core_get_low_power_modes(struct pmc_dev *pmcdev);
 extern void pmc_core_punit_pmt_init(struct pmc_dev *pmcdev, u32 guid);
 extern void pmc_core_set_device_d3(unsigned int device);
 
-extern int pmc_core_ssram_init(struct pmc_dev *pmcdev, int func);
+extern int pmc_core_ssram_init(struct pmc_dev *pmcdev, unsigned int devid);
 
 int spt_core_init(struct pmc_dev *pmcdev);
 int cnp_core_init(struct pmc_dev *pmcdev);
diff --git a/drivers/platform/x86/intel/pmc/core_ssram.c b/drivers/platform/x86/intel/pmc/core_ssram.c
index 1bde86c54eb9..9f3353b45d26 100644
--- a/drivers/platform/x86/intel/pmc/core_ssram.c
+++ b/drivers/platform/x86/intel/pmc/core_ssram.c
@@ -290,12 +290,12 @@ pmc_core_ssram_get_pmc(struct pmc_dev *pmcdev, int pmc_idx, u32 offset)
 	return pmc_core_pmc_add(pmcdev, pwrm_base, map, pmc_idx);
 }
 
-int pmc_core_ssram_init(struct pmc_dev *pmcdev, int func)
+int pmc_core_ssram_init(struct pmc_dev *pmcdev, unsigned int devid)
 {
 	struct pci_dev *pcidev;
 	int ret;
 
-	pcidev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(20, func));
+	pcidev = pci_get_device(PCI_VENDOR_ID_INTEL, devid, NULL);
 	if (!pcidev)
 		return -ENODEV;
 
diff --git a/drivers/platform/x86/intel/pmc/mtl.c b/drivers/platform/x86/intel/pmc/mtl.c
index c7d15d864039..1357dbe7ca4b 100644
--- a/drivers/platform/x86/intel/pmc/mtl.c
+++ b/drivers/platform/x86/intel/pmc/mtl.c
@@ -995,7 +995,7 @@ int mtl_core_init(struct pmc_dev *pmcdev)
 {
 	struct pmc *pmc = pmcdev->pmcs[PMC_IDX_SOC];
 	int ret;
-	int func = 2;
+	unsigned int devid = PMC_DEVID_SOCM;
 	bool ssram_init = true;
 
 	mtl_d3_fixup();
@@ -1008,7 +1008,7 @@ int mtl_core_init(struct pmc_dev *pmcdev)
 	 * If ssram init fails use legacy method to at least get the
 	 * primary PMC
 	 */
-	ret = pmc_core_ssram_init(pmcdev, func);
+	ret = pmc_core_ssram_init(pmcdev, devid);
 	if (ret) {
 		ssram_init = false;
 		dev_warn(&pmcdev->pdev->dev,
-- 
2.25.1

