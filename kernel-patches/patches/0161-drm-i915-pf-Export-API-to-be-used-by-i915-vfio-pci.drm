From d4c5a4a17ccc999b2e286596376f1606b4eff5dc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20Winiarski?= <michal.winiarski@intel.com>
Date: Thu, 9 Jun 2022 20:12:08 +0200
Subject: [PATCH 161/184] drm/i915/pf: Export API to be used by i915-vfio-pci
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The logic needed to obtain the device state is already implemented in
helpers. Add small amount of code calling the helpers, and exporting the
API that allows vendor-specific VFIO driver to implement migration.

v2: locking moved to intel_iov_provisioning_get_tile_mask()
v3: adjust for vfio-migration-v2

Signed-off-by: Michał Winiarski <michal.winiarski@intel.com>
Acked-by: Michal Wajdeczko <michal.wajdeczko@intel.com>
---
 drivers/gpu/drm/i915/gt/iov/intel_iov_state.c |  35 +++
 drivers/gpu/drm/i915/gt/iov/intel_iov_state.h |   2 +
 drivers/gpu/drm/i915/i915_sriov.c             | 263 ++++++++++++++++++
 include/drm/i915_sriov.h                      |  33 +++
 4 files changed, 333 insertions(+)
 create mode 100644 include/drm/i915_sriov.h

diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
index acb1a18d82f9..6afb3166d31b 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.c
@@ -156,11 +156,22 @@ static void pf_clear_vf_ggtt_entries(struct intel_iov *iov, u32 vfid)
 	i915_ggtt_set_space_owner(gt->ggtt, vfid, &config->ggtt_region);
 }
 
+static void pf_reset_vf_guc_migration_state(struct intel_iov *iov, u32 vfid)
+{
+	struct intel_iov_data *data = &iov->pf.state.data[vfid];
+	void *guc_state = fetch_and_zero(&data->guc_state);
+
+	lockdep_assert_held(pf_provisioning_mutex(iov));
+
+	kfree(guc_state);
+}
+
 static int pf_process_vf_flr_finish(struct intel_iov *iov, u32 vfid)
 {
 	intel_iov_event_reset(iov, vfid);
 
 	mutex_lock(pf_provisioning_mutex(iov));
+	pf_reset_vf_guc_migration_state(iov, vfid);
 	pf_clear_vf_ggtt_entries(iov, vfid);
 	mutex_unlock(pf_provisioning_mutex(iov));
 
@@ -750,3 +761,27 @@ int intel_iov_state_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf,
 
 	return err;
 }
+
+int intel_iov_state_store_guc_migration_state(struct intel_iov *iov, u32 vfid,
+					      const void *buf, size_t size)
+{
+	struct intel_iov_data *data = &iov->pf.state.data[vfid];
+	void *guc_state;
+
+	if (size != PF2GUC_SAVE_RESTORE_VF_BUFF_SIZE)
+		return -EINVAL;
+
+	mutex_lock(pf_provisioning_mutex(iov));
+	guc_state = kzalloc(size, GFP_KERNEL);
+	if (!guc_state) {
+		mutex_unlock(pf_provisioning_mutex(iov));
+		return -ENOMEM;
+	}
+
+	memcpy(guc_state, buf, size);
+
+	data->guc_state = guc_state;
+	mutex_unlock(pf_provisioning_mutex(iov));
+
+	return 0;
+}
diff --git a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
index d237aa192b71..822a685fe3cb 100644
--- a/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
+++ b/drivers/gpu/drm/i915/gt/iov/intel_iov_state.h
@@ -24,6 +24,8 @@ ssize_t intel_iov_state_save_ggtt(struct intel_iov *iov, u32 vfid, void *buf, si
 int intel_iov_state_restore_ggtt(struct intel_iov *iov, u32 vfid, const void *buf, size_t size);
 int intel_iov_state_save_vf(struct intel_iov *iov, u32 vfid, void *buf, size_t size);
 int intel_iov_state_restore_vf(struct intel_iov *iov, u32 vfid, const void *buf, size_t size);
+int intel_iov_state_store_guc_migration_state(struct intel_iov *iov, u32 vfid,
+					      const void *buf, size_t size);
 
 int intel_iov_state_process_guc2pf(struct intel_iov *iov,
 				   const u32 *msg, u32 len);
diff --git a/drivers/gpu/drm/i915/i915_sriov.c b/drivers/gpu/drm/i915/i915_sriov.c
index 87fa6a5aab8d..98fb0cf56d17 100644
--- a/drivers/gpu/drm/i915/i915_sriov.c
+++ b/drivers/gpu/drm/i915/i915_sriov.c
@@ -3,6 +3,8 @@
  * Copyright © 2023 Intel Corporation
  */
 
+#include <drm/i915_sriov.h>
+
 #include "i915_sriov.h"
 #include "i915_sriov_sysfs.h"
 #include "i915_drv.h"
@@ -959,6 +961,267 @@ int i915_sriov_pf_resume_vf(struct drm_i915_private *i915, unsigned int vfid)
 	return result;
 }
 
+/**
+ * i915_sriov_pause_vf - Pause VF.
+ * @pdev: the i915 struct
+ * @vfid: VF identifier
+ *
+ * This function will pause VF on all tiles.
+ * This function shall be called only on PF.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int i915_sriov_pause_vf(struct pci_dev *pdev, unsigned int vfid)
+{
+	struct drm_i915_private *i915 = pci_get_drvdata(pdev);
+
+	if (!IS_SRIOV_PF(i915))
+		return -ENODEV;
+
+	return i915_sriov_pf_pause_vf(i915, vfid);
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_pause_vf, I915);
+
+/**
+ * i915_sriov_resume_vf - Resume VF.
+ * @pdev: the i915 struct
+ * @vfid: VF identifier
+ *
+ * This function will resume VF on all tiles.
+ * This function shall be called only on PF.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int i915_sriov_resume_vf(struct pci_dev *pdev, unsigned int vfid)
+{
+	struct drm_i915_private *i915 = pci_get_drvdata(pdev);
+
+	if (!IS_SRIOV_PF(i915))
+		return -ENODEV;
+
+	return i915_sriov_pf_resume_vf(i915, vfid);
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_resume_vf, I915);
+
+/**
+ * i915_sriov_wait_vf_flr_done - Wait for VF FLR completion.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ *
+ * This function will wait until VF FLR is processed by PF on all tiles (or
+ * until timeout occurs).
+ * This function shall be called only on PF.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int i915_sriov_wait_vf_flr_done(struct pci_dev *pdev, unsigned int vfid)
+{
+	struct drm_i915_private *i915 = pci_get_drvdata(pdev);
+	struct intel_gt *gt;
+	unsigned int id;
+	int ret;
+
+	if (!IS_SRIOV_PF(i915))
+		return -ENODEV;
+
+	for_each_gt(gt, i915, id) {
+		ret = wait_for(intel_iov_state_no_flr(&gt->iov, vfid), I915_VF_FLR_TIMEOUT_MS);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_wait_vf_flr_done, I915);
+
+static struct intel_gt *
+sriov_to_gt(struct pci_dev *pdev, unsigned int tile)
+{
+	struct drm_i915_private *i915 = pci_get_drvdata(pdev);
+	struct intel_gt *gt;
+
+	if (!i915 || !IS_SRIOV_PF(i915))
+		return NULL;
+
+	if (!HAS_EXTRA_GT_LIST(i915) && tile > 0)
+		return NULL;
+
+	gt = NULL;
+	if (tile < ARRAY_SIZE(i915->gt))
+		gt = i915->gt[tile];
+
+	return gt;
+}
+
+/**
+ * i915_sriov_ggtt_size - Get size needed to store VF GGTT.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ * @tile: tile identifier
+ *
+ * This function shall be called only on PF.
+ *
+ * Return: Size in bytes.
+ */
+size_t
+i915_sriov_ggtt_size(struct pci_dev *pdev, unsigned int vfid, unsigned int tile)
+{
+	struct intel_gt *gt;
+	ssize_t size;
+
+	gt = sriov_to_gt(pdev, tile);
+	if (!gt)
+		return 0;
+
+	if (gt->type == GT_MEDIA)
+		return 0;
+
+	size = intel_iov_state_save_ggtt(&gt->iov, vfid, NULL, 0);
+	WARN_ON(size < 0);
+
+	return size;
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_ggtt_size, I915);
+
+/**
+ * i915_sriov_ggtt_save - Save VF GGTT.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ * @tile: tile identifier
+ * @buf: buffer to save VF GGTT
+ * @size: size of buffer to save VF GGTT
+ *
+ * This function shall be called only on PF.
+ *
+ * Return: Size of data written on success or a negative error code on failure.
+ */
+ssize_t i915_sriov_ggtt_save(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+			     void *buf, size_t size)
+{
+	struct intel_gt *gt;
+
+	gt = sriov_to_gt(pdev, tile);
+	if (!gt)
+		return -ENODEV;
+
+	if (gt->type == GT_MEDIA)
+		return -ENODEV;
+
+	WARN_ON(buf == NULL && size == 0);
+
+	return intel_iov_state_save_ggtt(&gt->iov, vfid, buf, size);
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_ggtt_save, I915);
+
+/**
+ * i915_sriov_ggtt_load - Load VF GGTT.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ * @tile: tile identifier
+ * @buf: buffer with VF GGTT
+ * @size: size of buffer with VF GGTT
+ *
+ * This function shall be called only on PF.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int
+i915_sriov_ggtt_load(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+		     const void *buf, size_t size)
+{
+	struct intel_gt *gt;
+
+	gt = sriov_to_gt(pdev, tile);
+	if (!gt)
+		return -ENODEV;
+
+	if (gt->type == GT_MEDIA)
+		return -ENODEV;
+
+	return intel_iov_state_restore_ggtt(&gt->iov, vfid, buf, size);
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_ggtt_load, I915);
+
+/**
+ * i915_sriov_fw_state_size - Get size needed to store GuC FW state.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ * @tile: tile identifier
+ *
+ * This function shall be called only on PF.
+ *
+ * Return: Size in bytes.
+ */
+size_t
+i915_sriov_fw_state_size(struct pci_dev *pdev, unsigned int vfid, unsigned int tile)
+{
+	struct intel_gt *gt;
+
+	gt = sriov_to_gt(pdev, tile);
+	if (!gt)
+		return 0;
+
+	return SZ_4K;
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_fw_state_size, I915);
+
+/**
+ * i915_sriov_fw_state_save - Save GuC FW state.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ * @tile: tile identifier
+ * @buf: buffer to save GuC FW state
+ * @size: size of buffer to save GuC FW state
+ *
+ * This function shall be called only on PF.
+ *
+ * Return: Size of data written on success or a negative error code on failure.
+ */
+ssize_t
+i915_sriov_fw_state_save(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+			 void *buf, size_t size)
+{
+	struct intel_gt *gt;
+	int ret;
+
+	gt = sriov_to_gt(pdev, tile);
+	if (!gt)
+		return -ENODEV;
+
+	ret = intel_iov_state_save_vf(&gt->iov, vfid, buf, size);
+	if (ret)
+		return ret;
+
+	return SZ_4K;
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_fw_state_save, I915);
+
+/**
+ * i915_sriov_fw_state_load - Load GuC FW state.
+ * @pdev: PF pci device
+ * @vfid: VF identifier
+ * @tile: tile identifier
+ * @buf: buffer with GuC FW state to load
+ * @size: size of buffer with GuC FW state
+ *
+ * This function shall be called only on PF.
+ *
+ * Return: 0 on success or a negative error code on failure.
+ */
+int
+i915_sriov_fw_state_load(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+			 const void *buf, size_t size)
+{
+	struct intel_gt *gt;
+
+	gt = sriov_to_gt(pdev, tile);
+	if (!gt)
+		return -ENODEV;
+
+	return intel_iov_state_store_guc_migration_state(&gt->iov, vfid, buf, size);
+}
+EXPORT_SYMBOL_NS_GPL(i915_sriov_fw_state_load, I915);
+
 /**
  * i915_sriov_pf_clear_vf - Unprovision VF.
  * @i915: the i915 struct
diff --git a/include/drm/i915_sriov.h b/include/drm/i915_sriov.h
new file mode 100644
index 000000000000..0522ec0b2786
--- /dev/null
+++ b/include/drm/i915_sriov.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: MIT */
+
+#include <linux/pci.h>
+#include <linux/types.h>
+
+int i915_sriov_pause_vf(struct pci_dev *pdev, unsigned int vfid);
+int i915_sriov_resume_vf(struct pci_dev *pdev, unsigned int vfid);
+
+int i915_sriov_wait_vf_flr_done(struct pci_dev *pdev, unsigned int vfid);
+
+size_t
+i915_sriov_ggtt_size(struct pci_dev *pdev, unsigned int vfid, unsigned int tile);
+ssize_t i915_sriov_ggtt_save(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+			     void *buf, size_t size);
+int
+i915_sriov_ggtt_load(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+		     const void *buf, size_t size);
+
+size_t
+i915_sriov_fw_state_size(struct pci_dev *pdev, unsigned int vfid,
+			 unsigned int tile);
+ssize_t
+i915_sriov_fw_state_save(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+			 void *buf, size_t size);
+int
+i915_sriov_fw_state_load(struct pci_dev *pdev, unsigned int vfid, unsigned int tile,
+			 const void *buf, size_t size);
+
+size_t
+i915_sriov_lmem_size(struct pci_dev *pdev, unsigned int vfid, unsigned int tile);
+void *i915_sriov_lmem_map(struct pci_dev *pdev, unsigned int vfid, unsigned int tile);
+void
+i915_sriov_lmem_unmap(struct pci_dev *pdev, unsigned int vfid, unsigned int tile);
-- 
2.25.1

