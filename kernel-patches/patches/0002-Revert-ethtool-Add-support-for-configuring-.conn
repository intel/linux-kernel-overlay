From e25b60464276261fb3ea6ec0cdb4f64745de40fd Mon Sep 17 00:00:00 2001
From: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date: Wed, 28 Sep 2022 19:51:30 +0800
Subject: [PATCH 2/6] Revert "ethtool: Add support for configuring frame
 preemption"

This reverts commit aada4a46aa851d23f437b103858fed052f3e3ad2.

Revert old implementation of ioctl().

Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
---
 drivers/net/ethernet/intel/igc/igc_ethtool.c |  7 ++-
 include/linux/ethtool.h                      |  8 +--
 include/uapi/linux/ethtool.h                 | 22 -------
 net/ethtool/ioctl.c                          | 61 --------------------
 4 files changed, 6 insertions(+), 92 deletions(-)

diff --git a/drivers/net/ethernet/intel/igc/igc_ethtool.c b/drivers/net/ethernet/intel/igc/igc_ethtool.c
index b75b53762328..b7a52c0b25a0 100644
--- a/drivers/net/ethernet/intel/igc/igc_ethtool.c
+++ b/drivers/net/ethernet/intel/igc/igc_ethtool.c
@@ -1692,12 +1692,15 @@ static int igc_ethtool_get_preempt(struct net_device *netdev,
 }
 
 static int igc_ethtool_set_preempt(struct net_device *netdev,
-				   struct ethtool_fp *fpcmd)
+				   struct ethtool_fp *fpcmd,
+				   struct netlink_ext_ack *extack)
 {
 	struct igc_adapter *adapter = netdev_priv(netdev);
 
-	if (fpcmd->add_frag_size < 68 || fpcmd->add_frag_size > 260)
+	if (fpcmd->add_frag_size < 68 || fpcmd->add_frag_size > 260) {
+		NL_SET_ERR_MSG_MOD(extack, "Invalid value for add-frag-size");
 		return -EINVAL;
+	}
 
 	adapter->frame_preemption_active = fpcmd->enabled;
 	adapter->add_frag_size = fpcmd->add_frag_size;
diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index 66e1ba6d749c..b98291d391f3 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -81,7 +81,7 @@ struct net_device;
 /* Some generic methods drivers may use in their ethtool_ops */
 u32 ethtool_op_get_link(struct net_device *dev);
 int ethtool_op_get_ts_info(struct net_device *dev, struct ethtool_ts_info *eti);
-u8 ethtool_frag_size_to_mult(u32 frag_size);
+
 
 /**
  * struct ethtool_link_ext_state_info - link extended state and substate.
@@ -401,8 +401,6 @@ struct ethtool_pause_stats {
  * @get_ethtool_phy_stats: Return extended statistics about the PHY device.
  *	This is only useful if the device maintains PHY statistics and
  *	cannot use the standard PHY library helpers.
- * @get_preempt: Get the network device Frame Preemption parameters.
- * @set_preempt: Set the network device Frame Preemption parameters.
  *
  * All operations are optional (i.e. the function pointer may be set
  * to %NULL) and callers must take this into account.  Callers must
@@ -501,10 +499,6 @@ struct ethtool_ops {
 				      struct ethtool_fecparam *);
 	int	(*set_fecparam)(struct net_device *,
 				      struct ethtool_fecparam *);
-	int	(*get_preempt)(struct net_device *,
-				      struct ethtool_fp *);
-	int	(*set_preempt)(struct net_device *,
-				      struct ethtool_fp *);
 	void	(*get_ethtool_phy_stats)(struct net_device *,
 					 struct ethtool_stats *, u64 *);
 	int	(*get_phy_tunable)(struct net_device *,
diff --git a/include/uapi/linux/ethtool.h b/include/uapi/linux/ethtool.h
index fd7ee31207f6..13772f039c8d 100644
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@ -369,25 +369,6 @@ struct ethtool_eee {
 	__u32	reserved[2];
 };
 
-/**
- * struct ethtool_fp - Frame Preemption information
- * @cmd: ETHTOOL_{G,S}FP
- * @fp_supported: If frame preemption is supported.
- * @fp_enabled: If frame preemption should be advertised to the link partner
- *	as enabled.
- * @supported_queues_mask: Bitmask indicating which queues support being
- *	configured as preemptible (bit 0 -> queue 0, bit N -> queue N).
- * @preemptible_queues_mask: Bitmask indicating which queues are
- *	configured as preemptible (bit 0 -> queue 0, bit N -> queue N).
- * @min_frag_size: Minimum size for all non-final fragment size.
- */
-struct ethtool_fp {
-	__u32	cmd;
-	__u8	enabled;
-	__u32	add_frag_size;
-	__u32	reserved[2];
-};
-
 /**
  * struct ethtool_modinfo - plugin module eeprom information
  * @cmd: %ETHTOOL_GMODULEINFO
@@ -1532,9 +1513,6 @@ enum ethtool_fec_config_bits {
 #define ETHTOOL_GFECPARAM	0x00000050 /* Get FEC settings */
 #define ETHTOOL_SFECPARAM	0x00000051 /* Set FEC settings */
 
-#define ETHTOOL_GFP		0x00000052 /* Get Frame Preemption settings */
-#define ETHTOOL_SFP		0x00000053 /* Set Frame Preemption settings */
-
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
 #define SPARC_ETH_SSET		ETHTOOL_SSET
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index 6a2090c71ff5..80d2a00d3097 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -54,31 +54,6 @@ int ethtool_op_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
 }
 EXPORT_SYMBOL(ethtool_op_get_ts_info);
 
-/**
- * ethtool_frag_size_to_mult() - Convert from a Frame Preemption
- * Additional Fragment size in bytes to a multiplier.
- * @frag_size: minimum non-final fragment size in bytes.
- *
- * The multiplier is defined as:
- *	"A 2-bit integer value used to indicate the minimum size of
- *	non-final fragments supported by the receiver on the given port
- *	associated with the local System. This value is expressed in units
- *	of 64 octets of additional fragment length."
- *	Equivalent to `30.14.1.7 aMACMergeAddFragSize` from the IEEE 802.3-2018
- *	standard.
- *
- * Return: the multiplier is a number in the [0, 2] interval.
- */
-u8 ethtool_frag_size_to_mult(u32 frag_size)
-{
-	u8 mult = (frag_size / 64) - 1;
-
-	mult = clamp_t(u8, mult, 0, 3);
-
-	return mult;
-}
-EXPORT_SYMBOL(ethtool_frag_size_to_mult);
-
 /* Handlers for each ethtool command */
 
 static int ethtool_get_features(struct net_device *dev, void __user *useraddr)
@@ -2687,36 +2662,6 @@ static int ethtool_set_fecparam(struct net_device *dev, void __user *useraddr)
 	return dev->ethtool_ops->set_fecparam(dev, &fecparam);
 }
 
-static int ethtool_get_preempt(struct net_device *dev, void __user *useraddr)
-{
-	struct ethtool_fp fpparam = { .cmd = ETHTOOL_GFP };
-	int rc;
-
-	if (!dev->ethtool_ops->get_preempt)
-		return -EOPNOTSUPP;
-
-	rc = dev->ethtool_ops->get_preempt(dev, &fpparam);
-	if (rc)
-		return rc;
-
-	if (copy_to_user(useraddr, &fpparam, sizeof(fpparam)))
-		return -EFAULT;
-	return 0;
-}
-
-static int ethtool_set_preempt(struct net_device *dev, void __user *useraddr)
-{
-	struct ethtool_fp fpparam;
-
-	if (!dev->ethtool_ops->set_preempt)
-		return -EOPNOTSUPP;
-
-	if (copy_from_user(&fpparam, useraddr, sizeof(fpparam)))
-		return -EFAULT;
-
-	return dev->ethtool_ops->set_preempt(dev, &fpparam);
-}
-
 /* The main entry point in this file.  Called from net/core/dev_ioctl.c */
 
 int dev_ethtool(struct net *net, struct ifreq *ifr)
@@ -2996,12 +2941,6 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
 	case ETHTOOL_SFECPARAM:
 		rc = ethtool_set_fecparam(dev, useraddr);
 		break;
-	case ETHTOOL_GFP:
-		rc = ethtool_get_preempt(dev, useraddr);
-		break;
-	case ETHTOOL_SFP:
-		rc = ethtool_set_preempt(dev, useraddr);
-		break;
 	default:
 		rc = -EOPNOTSUPP;
 	}
-- 
2.17.1

