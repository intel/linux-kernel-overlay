From 77640188a178c93d9fcf727a527dc1aa322f6860 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Piotr=20Pi=C3=B3rkowski?= <piotr.piorkowski@intel.com>
Date: Mon, 11 Sep 2023 20:09:44 +0200
Subject: [PATCH 287/319] drm/i915/guc: Add GuC enable/disable class engines
 scheduling
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Let's implement GuC action SET_ENGINE_CLASS_SCHEDULING (0x1003)
to enable/disable scheduling on a particular engine class, and
GuC action SET_ENGINE_CLASS_SCHEDULING_DONE (0x1004) to acknowledge
enable/disable scheduling on particular engine class.

Signed-off-by: Piotr Pi√≥rkowski <piotr.piorkowski@intel.com>
Signed-off-by: Zawawi, Muhammad Zul Husni <muhammad.zul.husni.zawawi@intel.com>
---
 .../gpu/drm/i915/gt/uc/abi/guc_actions_abi.h  | 93 ++++++++++++++++++-
 drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c     |  4 +
 .../gpu/drm/i915/gt/uc/intel_guc_submission.c | 34 +++++++
 .../gpu/drm/i915/gt/uc/intel_guc_submission.h |  6 ++
 4 files changed, 135 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h
index f359bef046e0..bd1762ebee97 100644
--- a/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h
+++ b/drivers/gpu/drm/i915/gt/uc/abi/guc_actions_abi.h
@@ -58,6 +58,97 @@
 #define HOST2GUC_SELF_CFG_RESPONSE_MSG_LEN		GUC_HXG_RESPONSE_MSG_MIN_LEN
 #define HOST2GUC_SELF_CFG_RESPONSE_MSG_0_NUM		GUC_HXG_RESPONSE_MSG_0_DATA0
 
+/**
+ * DOC: HOST2GUC_SET_ENGINE_SCHED
+ *
+ * This H2G action allows to start/stop scheduling on a class engines.
+ *
+ * This G2H message must be sent as `CTB HXG Message`_.
+ *
+ *  +---+-------+--------------------------------------------------------------+
+ *  |   | Bits  | Description                                                  |
+ *  +===+=======+==============================================================+
+ *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_HOST_                                |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 30:28 | TYPE = GUC_HXG_TYPE_REQUEST_                                 |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 27:16 | DATA0 = MBZ                                                  |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   |  15:0 | ACTION = _`GUC_ACTION_HOST2GUC_SET_ENGINE_SCHED` = 0x1003    |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 1 |  31:0 | **ENGINE_CLASS** - Engine Class for which the change in      |
+ *  |   |       |                    Scheduling State is requeste              |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 2 |  31:0 | **STATE** - new state value                                  |
+ *  |   |       |                                                              |
+ *  |   |       |   - _`GUC_SET_ENGINE_SCHED_STATE_DISABLE` = 0                |
+ *  |   |       |   - _`GUC_SET_ENGINE_SCHED_STATE_ENABLE` = 1                 |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 3 |  31:0 | **IMMEDIATE_MODE** - Immediate mode                          |
+ *  |   |       |                                                              |
+ *  |   |       |   - _`GUC_SET_ENGINE_SCHED_IMM_MODE_DISABLE` = 0             |
+ *  |   |       |   - _`GUC_SET_ENGINE_SCHED_IMM_MODE_ENABLE` = 1              |
+ *  +---+-------+--------------------------------------------------------------+
+ *
+ *  +---+-------+--------------------------------------------------------------+
+ *  |   | Bits  | Description                                                  |
+ *  +===+=======+==============================================================+
+ *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_GUC_                                 |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 30:28 | TYPE = GUC_HXG_TYPE_RESPONSE_SUCCESS_                        |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   |  27:0 | DATA0 = MBZ                                                  |
+ *  +---+-------+--------------------------------------------------------------+
+ */
+#define GUC_ACTION_HOST2GUC_SET_ENGINE_SCHED			0x1003
+
+#define HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_LEN		(GUC_HXG_REQUEST_MSG_MIN_LEN + 3u)
+#define HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_0_MBZ		GUC_HXG_REQUEST_MSG_0_DATA0
+#define HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_1_ENGINE_CLASS	GUC_HXG_REQUEST_MSG_n_DATAn
+#define HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_2_STATE		GUC_HXG_REQUEST_MSG_n_DATAn
+#define   GUC_SET_ENGINE_SCHED_STATE_DISABLE				0u
+#define   GUC_SET_ENGINE_SCHED_STATE_ENABLE				1u
+#define HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_3_IMM_MODE	GUC_HXG_REQUEST_MSG_n_DATAn
+#define   GUC_SET_ENGINE_SCHED_IMM_MODE_DISABLE				0u
+#define   GUC_SET_ENGINE_SCHED_IMM_MODE_ENABLE				1u
+
+#define HOST2GUC_SET_ENGINE_SCHED_RESPONSE_MSG_LEN		GUC_HXG_RESPONSE_MSG_MIN_LEN
+#define HOST2GUC_SET_ENGINE_SCHED_RESPONSE_MSG_0_MBZ		GUC_HXG_RESPONSE_MSG_0_DATA0
+
+/**
+ * DOC: GUC2HOST_SET_ENGINE_SCHED_DONE
+ *
+ * This message is used by the GuC to acknowledge enable/disable scheduling
+ * on particular Engine Class.
+ *
+ * This G2H message must be sent as `CTB HXG Message`_.
+ *
+ *  +---+-------+--------------------------------------------------------------+
+ *  |   | Bits  | Description                                                  |
+ *  +===+=======+==============================================================+
+ *  | 0 |    31 | ORIGIN = GUC_HXG_ORIGIN_GUC_                                 |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 30:28 | TYPE = GUC_HXG_TYPE_EVENT_                                   |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   | 27:16 | DATA0 = MBZ                                                  |
+ *  |   +-------+--------------------------------------------------------------+
+ *  |   |  15:0 | ACTION = _`GUC_ACTION_GUC2HOST_SET_ENGINE_SCHED_DONE` =      |
+ *  |   |       |          0x1004                                              |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 1 |  31:0 | **ENGINE_CLASS** - Engine Class for which the Scheduling was |
+ *  |   |       |                    enabled or disabled                       |
+ *  +---+-------+--------------------------------------------------------------+
+ *  | 2 |  31:0 | **IS_RUNNABLE** - Whether the Engines are made runnable or   |
+ *  |   |       |                   not                                        |
+ *  +---+-------+--------------------------------------------------------------+
+ */
+#define GUC_ACTION_GUC2HOST_SET_ENGINE_SCHED_DONE		0x1004
+
+#define GUC2HOST_SET_ENGINE_SCHED_DONE_MSG_LEN			(GUC_HXG_EVENT_MSG_MIN_LEN + 2u)
+#define GUC2HOST_SET_ENGINE_SCHED_DONE_MSG_0_MBZ		GUC_HXG_EVENT_MSG_0_DATA0
+#define GUC2HOST_SET_ENGINE_SCHED_DONE_MSG_1_ENGINE_CLASS	GUC_HXG_EVENT_MSG_n_DATAn
+#define GUC2HOST_SET_ENGINE_SCHED_DONE_MSG_2_IS_RUNNABLE	GUC_HXG_EVENT_MSG_n_DATAn
+
 /**
  * DOC: HOST2GUC_CONTROL_CTB
  *
@@ -121,8 +212,6 @@ enum intel_guc_action {
 	INTEL_GUC_ACTION_SCHED_CONTEXT = 0x1000,
 	INTEL_GUC_ACTION_SCHED_CONTEXT_MODE_SET = 0x1001,
 	INTEL_GUC_ACTION_SCHED_CONTEXT_MODE_DONE = 0x1002,
-	INTEL_GUC_ACTION_SCHED_ENGINE_MODE_SET = 0x1003,
-	INTEL_GUC_ACTION_SCHED_ENGINE_MODE_DONE = 0x1004,
 	INTEL_GUC_ACTION_V69_SET_CONTEXT_PRIORITY = 0x1005,
 	INTEL_GUC_ACTION_V69_SET_CONTEXT_EXECUTION_QUANTUM = 0x1006,
 	INTEL_GUC_ACTION_V69_SET_CONTEXT_PREEMPTION_TIMEOUT = 0x1007,
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c b/drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c
index e8f1f07b906c..b7da823845e4 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c
@@ -1147,6 +1147,9 @@ static int ct_process_request(struct intel_guc_ct *ct, struct ct_incoming_msg *r
 	case INTEL_GUC_ACTION_SCHED_CONTEXT_MODE_DONE:
 		ret = intel_guc_sched_done_process_msg(guc, payload, len);
 		break;
+	case GUC_ACTION_GUC2HOST_SET_ENGINE_SCHED_DONE:
+		ret = intel_guc_process_set_engine_sched_done(guc, hxg, hxg_len);
+		break;
 	case INTEL_GUC_ACTION_CONTEXT_RESET_NOTIFICATION:
 		ret = intel_guc_context_reset_process_msg(guc, payload, len);
 		break;
@@ -1236,6 +1239,7 @@ static int ct_handle_event(struct intel_guc_ct *ct, struct ct_incoming_msg *requ
 	 * circular dependency if the space was returned there.
 	 */
 	switch (action) {
+	case GUC_ACTION_GUC2HOST_SET_ENGINE_SCHED_DONE:
 	case INTEL_GUC_ACTION_SCHED_CONTEXT_MODE_DONE:
 	case INTEL_GUC_ACTION_DEREGISTER_CONTEXT_DONE:
 		g2h_release_space(ct, request->size);
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
index cabdc645fcdd..112713c10bfc 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.c
@@ -2810,6 +2810,40 @@ static void guc_context_post_unpin(struct intel_context *ce)
 	lrc_post_unpin(ce);
 }
 
+int intel_guc_set_engine_sched(struct intel_guc *guc, u32 class, u32 flags)
+{
+	u32 state = flags & SET_ENGINE_SCHED_FLAGS_ENABLE ?
+		    GUC_SET_ENGINE_SCHED_STATE_ENABLE : GUC_SET_ENGINE_SCHED_STATE_DISABLE;
+	u32 imm_mode = flags & SET_ENGINE_SCHED_FLAGS_IMMEDIATE ?
+		       GUC_SET_ENGINE_SCHED_IMM_MODE_ENABLE : GUC_SET_ENGINE_SCHED_IMM_MODE_DISABLE;
+	u32 g2h_len_dw = HOST2GUC_SET_ENGINE_SCHED_RESPONSE_MSG_LEN;
+	u32 request[HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_LEN] = {
+		FIELD_PREP(GUC_HXG_MSG_0_ORIGIN, GUC_HXG_ORIGIN_HOST) |
+		FIELD_PREP(GUC_HXG_MSG_0_TYPE, GUC_HXG_TYPE_REQUEST) |
+		FIELD_PREP(GUC_HXG_REQUEST_MSG_0_ACTION, GUC_ACTION_HOST2GUC_SET_ENGINE_SCHED),
+		FIELD_PREP(HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_1_ENGINE_CLASS, class),
+		FIELD_PREP(HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_2_STATE, state),
+		FIELD_PREP(HOST2GUC_SET_ENGINE_SCHED_REQUEST_MSG_3_IMM_MODE, imm_mode),
+	};
+
+	GEM_BUG_ON(class > MAX_ENGINE_INSTANCE);
+
+	return guc_submission_send_busy_loop(guc, request, ARRAY_SIZE(request), g2h_len_dw, true);
+}
+
+int intel_guc_process_set_engine_sched_done(struct intel_guc *guc, const u32 *msg, u32 len)
+{
+	if (len != GUC2HOST_SET_ENGINE_SCHED_DONE_MSG_LEN)
+		return -EPROTO;
+
+	if (FIELD_GET(GUC2HOST_SET_ENGINE_SCHED_DONE_MSG_0_MBZ, msg[0] != 0))
+		return -EPROTO;
+
+	decr_outstanding_submission_g2h(guc);
+
+	return 0;
+}
+
 static void __guc_context_sched_enable(struct intel_guc *guc,
 				       struct intel_context *ce)
 {
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.h b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.h
index c57b29cdb1a6..4d4269d5a71b 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_guc_submission.h
@@ -53,4 +53,10 @@ static inline bool intel_guc_submission_is_used(struct intel_guc *guc)
 	return intel_guc_is_used(guc) && intel_guc_submission_is_wanted(guc);
 }
 
+int intel_guc_set_engine_sched(struct intel_guc *guc, u32 class, u32 flags);
+#define SET_ENGINE_SCHED_FLAGS_ENABLE		BIT(0)
+#define SET_ENGINE_SCHED_FLAGS_IMMEDIATE	BIT(1)
+
+int intel_guc_process_set_engine_sched_done(struct intel_guc *guc, const u32 *msg, u32 len);
+
 #endif
-- 
2.25.1

