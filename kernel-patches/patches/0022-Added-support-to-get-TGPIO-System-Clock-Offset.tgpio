From e8d48d393c50f98e9ce863765b6b7ba39f541c48 Mon Sep 17 00:00:00 2001
From: Rajvi Jingar <rajvi.jingar@intel.com>
Date: Fri, 10 Jan 2020 15:55:24 -0800
Subject: [PATCH 22/34] Added support to get TGPIO/System Clock Offset

This patch extends test program to Compute TGPIO/System Clock Offset.

Signed-off-by: Rajvi Jingar <rajvi.jingar@intel.com>
---
 tools/testing/selftests/ptp/testptp.c | 44 ++++++++++++++++++++++++++-
 1 file changed, 43 insertions(+), 1 deletion(-)

diff --git a/tools/testing/selftests/ptp/testptp.c b/tools/testing/selftests/ptp/testptp.c
index 45db2ad6b623..e637577133cc 100644
--- a/tools/testing/selftests/ptp/testptp.c
+++ b/tools/testing/selftests/ptp/testptp.c
@@ -167,6 +167,7 @@ static void usage(char *progname)
 		" -f val     adjust the ptp clock frequency by 'val' ppb\n"
 		" -F chan    Enable single channel mask and keep device open for debugfs verification.\n"
 		" -g         get the ptp clock time\n"
+		" -G         Compute TGPIO / System Clock Offset\n"
 		" -h         prints this message\n"
 		" -i val     index for event/trigger\n"
 		" -k val     measure the time offset between system and phc clock\n"
@@ -225,6 +226,7 @@ int main(int argc, char *argv[])
 	int extts = 0;
 	int flagtest = 0;
 	int gettime = 0;
+	int getratio = 0;
 	int index = 0;
 	int list_pins = 0;
 	int pct_offset = 0;
@@ -247,7 +249,7 @@ int main(int argc, char *argv[])
 
 	progname = strrchr(argv[0], '/');
 	progname = progname ? 1+progname : argv[0];
-	while (EOF != (c = getopt(argc, argv, "a:cd:e:Ef:F:ghH:i:k:lL:n:o:p:P:sSt:T:w:x:Xz"))) {
+	while (EOF != (c = getopt(argc, argv, "a:cd:e:Ef:F:GghH:i:k:lL:n:o:p:P:sSt:T:w:x:Xz"))) {
 		switch (c) {
 		case 'a':
 			new_period = atoi(optarg);
@@ -275,6 +277,8 @@ int main(int argc, char *argv[])
 			break;
 		case 'H':
 			perout_phase = atoll(optarg);
+		case 'G':
+			getratio = 1;
 			break;
 		case 'i':
 			index = atoi(optarg);
@@ -433,6 +437,44 @@ int main(int argc, char *argv[])
 		}
 	}
 
+	if (getratio) {
+		uint64_t sys_tgpio_offset;
+		double sys_tgpio_ratio;
+		uint32_t sys_delta;
+		uint64_t prev_ec;
+		struct timespec sys_tgpio_time;
+		struct ptp_sys_offset_precise sys_offset, sys_offset_0;
+
+		if (ioctl(fd, PTP_SYS_OFFSET_PRECISE, &sys_offset_0))
+			perror("PTP_SYS_OFFSET_PRECISE");
+
+		millisleep(2000);
+		if (ioctl(fd, PTP_SYS_OFFSET_PRECISE, &sys_offset))
+			perror("PTP_SYS_OFFSET_PRECISE");
+
+		sys_tgpio_offset = sys_offset.sys_monoraw.sec - sys_offset.device.sec;
+		sys_tgpio_offset *= NSEC_PER_SEC;
+		printf("Offset: %ld\n", sys_tgpio_offset);
+		sys_tgpio_offset += sys_offset.sys_monoraw.nsec;
+		printf("Offset: %ld\n", sys_tgpio_offset);
+		sys_tgpio_offset -= sys_offset.device.nsec;
+		printf("Offset: %ld\n", sys_tgpio_offset);
+		print_time("System", ptp_time_to_timespec(sys_offset.sys_monoraw));
+		print_time("Device", ptp_time_to_timespec(sys_offset.device));
+		sys_delta = sys_offset.sys_monoraw.sec - sys_offset_0.sys_monoraw.sec;
+		sys_delta *= NSEC_PER_SEC;
+		sys_delta += sys_offset.sys_monoraw.nsec - sys_offset_0.sys_monoraw.nsec;
+		printf("system delta: %u\n", sys_delta);
+		sys_tgpio_ratio = sys_offset.device.sec - sys_offset_0.device.sec;
+		sys_tgpio_ratio *= NSEC_PER_SEC;
+		sys_tgpio_ratio += sys_offset.device.nsec;
+		sys_tgpio_ratio -= sys_offset_0.device.nsec;
+		printf("device delta: %.0f\n", sys_tgpio_ratio);
+		sys_tgpio_ratio = sys_delta / sys_tgpio_ratio;
+		sys_tgpio_time = ptp_time_to_timespec(sys_offset.sys_monoraw);
+		printf("system:tgpio clock ratio = %.12f\n\n", sys_tgpio_ratio);
+	}
+
 	if (settime == 1) {
 		clock_gettime(CLOCK_REALTIME, &ts);
 		if (clock_settime(clkid, &ts)) {
-- 
2.25.1

