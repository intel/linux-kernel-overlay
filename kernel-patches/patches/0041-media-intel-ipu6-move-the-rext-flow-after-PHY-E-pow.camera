From 8b83beecb2d00b8040df97030d69827bf8616482 Mon Sep 17 00:00:00 2001
From: zouxiaoh <xiaohong.zou@intel.com>
Date: Wed, 22 Mar 2023 15:45:06 +0800
Subject: [PATCH 41/60] media: intel/ipu6: move the rext flow after PHY-E power
 up

For MTL, the PHY rext flow only can be applied on PHY-E as the
external resistor connected to PHY-E, we can get the calibration
value and then apply this calibration value to other PHYs to
speed up the PHY power up.

It is unnecessary to do this rext flow for each PHY power up, on the
contrary, it will slow down the power up flow. This patch move the
calibration value acquire after the PHY-E power up sequence.

This change has been merged as Chromium CL:4216794.

Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/media/pci/intel/ipu6/ipu6-isys-csi2.c |   5 -
 .../media/pci/intel/ipu6/ipu6-isys-dwc-phy.c  | 102 +++---------------
 2 files changed, 14 insertions(+), 93 deletions(-)

diff --git a/drivers/media/pci/intel/ipu6/ipu6-isys-csi2.c b/drivers/media/pci/intel/ipu6/ipu6-isys-csi2.c
index c2f73625b155..c5eb58adbb34 100644
--- a/drivers/media/pci/intel/ipu6/ipu6-isys-csi2.c
+++ b/drivers/media/pci/intel/ipu6/ipu6-isys-csi2.c
@@ -169,11 +169,6 @@ static int ipu6_csi2_dwc_phy_power_set(struct ipu_isys *isys,
 	primary = port & ~1;
 	secondary = primary + 1;
 	if (on) {
-		/* do rext flow for PHY-E */
-		ret = ipu6_isys_dwc_phy_termcal_rext(isys, mbps);
-		if (ret)
-			return ret;
-
 		if (nlanes == 4) {
 			dev_dbg(&isys->adev->dev,
 				"config phy %u and %u in aggregation mode",
diff --git a/drivers/media/pci/intel/ipu6/ipu6-isys-dwc-phy.c b/drivers/media/pci/intel/ipu6/ipu6-isys-dwc-phy.c
index fd6ea80bb371..c62be7d196e7 100644
--- a/drivers/media/pci/intel/ipu6/ipu6-isys-dwc-phy.c
+++ b/drivers/media/pci/intel/ipu6/ipu6-isys-dwc-phy.c
@@ -418,9 +418,11 @@ void ipu6_isys_dwc_phy_aggr_setup(struct ipu_isys *isys, u32 master, u32 slave,
 	dwc_dphy_ifc_write_mask(isys, slave, 0x305, 0xa, 0, 5);
 }
 
+#define PHY_E	(4)
 int ipu6_isys_dwc_phy_powerup_ack(struct ipu_isys *isys, u32 phy_id)
 {
 	int rval;
+	u32 rescal_done;
 
 	rval = dwc_dphy_pwr_up(isys, phy_id);
 	if (rval != 0) {
@@ -435,6 +437,18 @@ int ipu6_isys_dwc_phy_powerup_ack(struct ipu_isys *isys, u32 phy_id)
 
 	dev_dbg(&isys->adev->dev, "phy %u is ready!", phy_id);
 
+	if (phy_id != PHY_E || isys->phy_termcal_val)
+		return 0;
+
+	usleep_range(100, 200);
+	rescal_done = dwc_dphy_ifc_read_mask(isys, phy_id, 0x221, 7, 1);
+	if (rescal_done) {
+		isys->phy_termcal_val = dwc_dphy_ifc_read_mask(isys, phy_id,
+							       0x220, 2, 4);
+		dev_dbg(&isys->adev->dev, "termcal done with value = %u",
+			isys->phy_termcal_val);
+	}
+
 	return 0;
 }
 
@@ -449,91 +463,3 @@ void ipu6_isys_dwc_phy_reset(struct ipu_isys *isys, u32 phy_id)
 	dwc_dphy_write(isys, phy_id, IPU_DWC_DPHY_TEST_IFC_REQ,
 		       TEST_IFC_REQ_RESET);
 }
-
-#define PHY_E	(4)
-int ipu6_isys_dwc_phy_termcal_rext(struct ipu_isys *isys, u32 mbps)
-{
-	u32 index;
-	u32 osc_freq_target;
-	u32 cfg_clk_freqrange;
-	u32 rescal_done;
-	struct ipu_bus_device *adev = to_ipu_bus_device(&isys->adev->dev);
-	struct ipu_device *isp = adev->isp;
-	int ret;
-	u32 phy_id = PHY_E;
-
-	if (isys->phy_termcal_val) {
-		dev_dbg(&isys->adev->dev, "phy term cal already done, ignore.");
-		return 0;
-	}
-
-	dev_dbg(&isys->adev->dev, "phy %u term calibration with %u mbps",
-		phy_id, mbps);
-
-	ipu6_isys_dwc_phy_reset(isys, phy_id);
-
-	index = get_hsfreq_by_mbps(mbps);
-	if (index == DPHY_FREQ_RANGE_INVALID_INDEX) {
-		dev_err(&isys->adev->dev, "link freq not found for mbps %u",
-			mbps);
-		return -EINVAL;
-	}
-
-	dwc_dphy_write_mask(isys, phy_id, IPU_DWC_DPHY_HSFREQRANGE,
-			    freqranges[index].hsfreq, 0, 7);
-
-	/*
-	 * Enable override to configure the DDL target oscillation
-	 * frequency on bit 0 of register 0xe4
-	 */
-	dwc_dphy_ifc_write_mask(isys, phy_id, 0xe4, 0x1, 0, 1);
-	/*
-	 * configure registers 0xe2, 0xe3 with the
-	 * appropriate DDL target oscillation frequency
-	 * 0x1cc(460)
-	 */
-	osc_freq_target = freqranges[index].osc_freq_target;
-	dwc_dphy_ifc_write_mask(isys, phy_id, 0xe2,
-				osc_freq_target & 0xff, 0, 8);
-	dwc_dphy_ifc_write_mask(isys, phy_id, 0xe3,
-				(osc_freq_target >> 8) & 0xff, 0, 4);
-
-	if (mbps < 1500) {
-		/* deskew_polarity_rw, for < 1.5Gbps */
-		dwc_dphy_ifc_write_mask(isys, phy_id, 0x8, 0x1, 5, 1);
-	}
-
-	/*
-	 * Set cfgclkfreqrange[5:0] = round[(Fcfg_clk(MHz)-17)*4]
-	 * (38.4 - 17) * 4 = 84 (0x54)
-	 */
-	cfg_clk_freqrange = (isp->buttress.ref_clk / 10 - 17) * 4;
-	dwc_dphy_write_mask(isys, phy_id, IPU_DWC_DPHY_CFGCLKFREQRANGE,
-			    cfg_clk_freqrange, 0, 8);
-
-	/*
-	 * run without external reference resistor for 2Gbps
-	 * dwc_dphy_ifc_write_mask(isys, phy_id, 0x4, 0x0, 4, 1);
-	 */
-
-	dwc_dphy_write_mask(isys, phy_id, IPU_DWC_DPHY_DFT_CTRL2, 0x1, 4, 1);
-	dwc_dphy_write_mask(isys, phy_id, IPU_DWC_DPHY_DFT_CTRL2, 0x1, 8, 1);
-
-	ret = ipu6_isys_dwc_phy_powerup_ack(isys, phy_id);
-	if (ret)
-		return ret;
-
-	usleep_range(100, 200);
-	rescal_done = dwc_dphy_ifc_read_mask(isys, phy_id, 0x221, 7, 1);
-	if (rescal_done) {
-		isys->phy_termcal_val = dwc_dphy_ifc_read_mask(isys, phy_id,
-							       0x220, 2, 4);
-		dev_dbg(&isys->adev->dev, "termcal done with value = %u",
-			isys->phy_termcal_val);
-	}
-
-	/* whatever reset the phy E after rext flow */
-	ipu6_isys_dwc_phy_reset(isys, phy_id);
-
-	return 0;
-}
-- 
2.25.1

