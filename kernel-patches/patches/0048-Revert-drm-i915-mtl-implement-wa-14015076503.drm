From 715d5c5cf3006bdb391919140a4efbaf80f3cfa0 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Thu, 6 Jul 2023 15:03:02 +0800
Subject: [PATCH 0048/2351] Revert "drm/i915/mtl: implement wa 14015076503"

This reverts commit 1461eb50c5810cb6870e609823a75c603fdd88c9.
---
 drivers/gpu/drm/i915/gt/intel_reset.c     | 74 ++---------------------
 drivers/gpu/drm/i915/gt/uc/intel_gsc_fw.h |  2 -
 drivers/gpu/drm/i915/i915_reg.h           |  5 +-
 3 files changed, 6 insertions(+), 75 deletions(-)

diff --git a/drivers/gpu/drm/i915/gt/intel_reset.c b/drivers/gpu/drm/i915/gt/intel_reset.c
index b97d681830e2c..0bb9094fdacd5 100644
--- a/drivers/gpu/drm/i915/gt/intel_reset.c
+++ b/drivers/gpu/drm/i915/gt/intel_reset.c
@@ -14,8 +14,6 @@
 
 #include "gt/intel_gt_regs.h"
 
-#include "gt/uc/intel_gsc_fw.h"
-
 #include "i915_drv.h"
 #include "i915_file_private.h"
 #include "i915_gpu_error.h"
@@ -692,64 +690,6 @@ static reset_func intel_get_gpu_reset(const struct intel_gt *gt)
 		return NULL;
 }
 
-static int __reset_guc(struct intel_gt *gt)
-{
-	u32 guc_domain =
-		GRAPHICS_VER(gt->i915) >= 11 ? GEN11_GRDOM_GUC : GEN9_GRDOM_GUC;
-
-	return gen6_hw_domain_reset(gt, guc_domain);
-}
-
-static bool needs_wa_14015076503(struct intel_gt *gt, intel_engine_mask_t engine_mask)
-{
-	if (!IS_METEORLAKE(gt->i915) || !HAS_ENGINE(gt, GSC0))
-		return false;
-
-	if (!__HAS_ENGINE(engine_mask, GSC0))
-		return false;
-
-	return intel_gsc_uc_fw_init_done(&gt->uc.gsc);
-}
-
-static intel_engine_mask_t
-wa_14015076503_start(struct intel_gt *gt, intel_engine_mask_t engine_mask, bool first)
-{
-	if (!needs_wa_14015076503(gt, engine_mask))
-		return engine_mask;
-
-	/*
-	 * wa_14015076503: if the GSC FW is loaded, we need to alert it that
-	 * we're going to do a GSC engine reset and then wait for 200ms for the
-	 * FW to get ready for it. However, if this the first ALL_ENGINES reset
-	 * attempt and the GSC is not busy, we can try to instead reset the GuC
-	 * and all the other engines individually to avoid the 200ms wait.
-	 */
-	if (engine_mask == ALL_ENGINES && first && intel_engine_is_idle(gt->engine[GSC0])) {
-		__reset_guc(gt);
-		engine_mask = gt->info.engine_mask & ~BIT(GSC0);
-	} else {
-		intel_uncore_write(gt->uncore,
-				   HECI_GENERAL_STATUS(MTL_GSC_HECI2_BASE),
-				   BIT(0));
-		intel_uncore_write(gt->uncore,
-				   HECI_CONTROL_AND_STATUS(MTL_GSC_HECI2_BASE),
-				   BIT(2));
-		msleep(200);
-	}
-
-	return engine_mask;
-}
-
-static void
-wa_14015076503_end(struct intel_gt *gt, intel_engine_mask_t engine_mask)
-{
-	if (!needs_wa_14015076503(gt, engine_mask))
-		return;
-
-	intel_uncore_write(gt->uncore,
-			   HECI_GENERAL_STATUS(MTL_GSC_HECI2_BASE), 0);
-}
-
 int __intel_gt_reset(struct intel_gt *gt, intel_engine_mask_t engine_mask)
 {
 	const int retries = engine_mask == ALL_ENGINES ? RESET_MAX_RETRIES : 1;
@@ -767,16 +707,10 @@ int __intel_gt_reset(struct intel_gt *gt, intel_engine_mask_t engine_mask)
 	 */
 	intel_uncore_forcewake_get(gt->uncore, FORCEWAKE_ALL);
 	for (retry = 0; ret == -ETIMEDOUT && retry < retries; retry++) {
-		intel_engine_mask_t reset_mask;
-
-		reset_mask = wa_14015076503_start(gt, engine_mask, !retry);
-
-		GT_TRACE(gt, "engine_mask=%x\n", reset_mask);
+		GT_TRACE(gt, "engine_mask=%x\n", engine_mask);
 		preempt_disable();
-		ret = reset(gt, reset_mask, retry);
+		ret = reset(gt, engine_mask, retry);
 		preempt_enable();
-
-		wa_14015076503_end(gt, reset_mask);
 	}
 	intel_uncore_forcewake_put(gt->uncore, FORCEWAKE_ALL);
 
@@ -801,12 +735,14 @@ bool intel_has_reset_engine(const struct intel_gt *gt)
 
 int intel_reset_guc(struct intel_gt *gt)
 {
+	u32 guc_domain =
+		GRAPHICS_VER(gt->i915) >= 11 ? GEN11_GRDOM_GUC : GEN9_GRDOM_GUC;
 	int ret;
 
 	GEM_BUG_ON(!HAS_GT_UC(gt->i915));
 
 	intel_uncore_forcewake_get(gt->uncore, FORCEWAKE_ALL);
-	ret = __reset_guc(gt);
+	ret = gen6_hw_domain_reset(gt, guc_domain);
 	intel_uncore_forcewake_put(gt->uncore, FORCEWAKE_ALL);
 
 	return ret;
diff --git a/drivers/gpu/drm/i915/gt/uc/intel_gsc_fw.h b/drivers/gpu/drm/i915/gt/uc/intel_gsc_fw.h
index f4c1106bb2a93..4b5dbb44afb4a 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_gsc_fw.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_gsc_fw.h
@@ -9,9 +9,7 @@
 #include <linux/types.h>
 
 struct intel_gsc_uc;
-struct intel_uncore;
 
 int intel_gsc_uc_fw_upload(struct intel_gsc_uc *gsc);
 bool intel_gsc_uc_fw_init_done(struct intel_gsc_uc *gsc);
-
 #endif
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index b094be28b46a8..7c98fff6cbf46 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -925,11 +925,8 @@
 #define DG1_GSC_HECI2_BASE	0x00259000
 #define DG2_GSC_HECI1_BASE	0x00373000
 #define DG2_GSC_HECI2_BASE	0x00374000
-#define MTL_GSC_HECI1_BASE	0x00116000
-#define MTL_GSC_HECI2_BASE	0x00117000
 
-#define HECI_CONTROL_AND_STATUS(base)	_MMIO(base + 0x4)
-#define HECI_GENERAL_STATUS(base)	_MMIO(base + 0xc4c)
+
 
 #define HSW_GTT_CACHE_EN	_MMIO(0x4024)
 #define   GTT_CACHE_EN_ALL	0xF0007FFF
-- 
2.25.1

