From 81301536fcf0d040f899eb7a7e3e8441d0737951 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Mon, 5 Oct 2020 04:41:59 -0700
Subject: [PATCH 11/41] sched/task_struct: Add classification ID

There exist hardware capable of statistically identifying special classes
tasks (e.g., tasks executing certain specific groups of instructions).
Such information can be used to implove task placement. Since such
classification has per-task granularity, add a new member to task_struct.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/kernel/process.c | 2 ++
 include/linux/sched.h     | 4 ++++
 2 files changed, 6 insertions(+)

diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
index 04143a653a8a..20f5a1f41615 100644
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@ -212,6 +212,8 @@ int copy_thread(unsigned long clone_flags, unsigned long sp, unsigned long arg,
 		return 0;
 	}
 
+	p->classid = TASK_CLASS_UNCLASSIFIED;
+
 	/* Set a new TLS for the child thread? */
 	if (clone_flags & CLONE_SETTLS)
 		ret = set_new_tls(p, tls);
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 78c351e35fec..a3daa67c8959 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -116,6 +116,8 @@ struct task_group;
 					 __TASK_TRACED | EXIT_DEAD | EXIT_ZOMBIE | \
 					 TASK_PARKED)
 
+#define TASK_CLASS_UNCLASSIFIED		-1
+
 #define task_is_running(task)		(READ_ONCE((task)->__state) == TASK_RUNNING)
 
 #define task_is_traced(task)		((READ_ONCE(task->__state) & __TASK_TRACED) != 0)
@@ -940,6 +942,8 @@ struct task_struct {
 
 	pid_t				pid;
 	pid_t				tgid;
+	/* Type of task */
+	int				classid;
 
 #ifdef CONFIG_STACKPROTECTOR
 	/* Canary value for the -fstack-protector GCC feature: */
-- 
2.32.0

