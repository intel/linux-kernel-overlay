From 873347675353afb3de708f514b35d9893d860031 Mon Sep 17 00:00:00 2001
From: Jian Jun Chen <jian.jun.chen@intel.com>
Date: Thu, 6 Jun 2019 02:18:23 +0000
Subject: [PATCH 1/3] virtio: add VIRTIO_PMD support

add polling mode support to virtio framework by using
timer to poll the availability of virtqueues. If
CONFIG_VIRTIO_PMD is enabled, the following virtio
devices will use polling mode instead of interrupt mode:
virtio-blk/virtio-net/virtio-console/virtio-input/virtio-rng

Tracked-On: projectacrn/acrn-hypervisor#3237
Signed-off-by: Gao Junhao <junhao.gao@intel.com>
Signed-off-by: Jian Jun Chen <jian.jun.chen@intel.com>
Reviewed-by: Zhao Yakui <yakui.zhao@intel.com>
---
 drivers/block/virtio_blk.c          |   3 +
 drivers/char/hw_random/virtio-rng.c |   3 +
 drivers/char/virtio_console.c       |   3 +
 drivers/net/virtio_net.c            |   3 +
 drivers/virtio/Kconfig              |   9 +++
 drivers/virtio/virtio.c             | 105 ++++++++++++++++++++++++++++
 drivers/virtio/virtio_input.c       |   3 +
 drivers/virtio/virtio_ring.c        |  56 ++++++++++++---
 include/linux/virtio.h              |  21 ++++++
 include/linux/virtio_config.h       |  17 -----
 10 files changed, 195 insertions(+), 28 deletions(-)

Index: b/drivers/block/virtio_blk.c
===================================================================
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -1000,6 +1000,9 @@ static struct virtio_driver virtio_blk =
 	.driver.name			= KBUILD_MODNAME,
 	.driver.owner			= THIS_MODULE,
 	.id_table			= id_table,
+#ifdef CONFIG_VIRTIO_PMD
+	.polling_mode			= true,
+#endif
 	.probe				= virtblk_probe,
 	.remove				= virtblk_remove,
 	.config_changed			= virtblk_config_changed,
Index: b/drivers/char/hw_random/virtio-rng.c
===================================================================
--- a/drivers/char/hw_random/virtio-rng.c
+++ b/drivers/char/hw_random/virtio-rng.c
@@ -204,6 +204,9 @@ static struct virtio_driver virtio_rng_d
 	.driver.name =	KBUILD_MODNAME,
 	.driver.owner =	THIS_MODULE,
 	.id_table =	id_table,
+#ifdef CONFIG_VIRTIO_PMD
+	.polling_mode = true,
+#endif
 	.probe =	virtrng_probe,
 	.remove =	virtrng_remove,
 	.scan =		virtrng_scan,
Index: b/drivers/char/virtio_console.c
===================================================================
--- a/drivers/char/virtio_console.c
+++ b/drivers/char/virtio_console.c
@@ -2213,6 +2213,9 @@ static struct virtio_driver virtio_conso
 	.driver.name =	KBUILD_MODNAME,
 	.driver.owner =	THIS_MODULE,
 	.id_table =	id_table,
+#ifdef CONFIG_VIRTIO_PMD
+	.polling_mode =	true,
+#endif
 	.probe =	virtcons_probe,
 	.remove =	virtcons_remove,
 	.config_changed = config_intr,
Index: b/drivers/net/virtio_net.c
===================================================================
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -3336,6 +3336,9 @@ static struct virtio_driver virtio_net_d
 	.driver.owner =	THIS_MODULE,
 	.id_table =	id_table,
 	.validate =	virtnet_validate,
+#ifdef CONFIG_VIRTIO_PMD
+	.polling_mode =	true,
+#endif
 	.probe =	virtnet_probe,
 	.remove =	virtnet_remove,
 	.config_changed = virtnet_config_changed,
Index: b/drivers/virtio/Kconfig
===================================================================
--- a/drivers/virtio/Kconfig
+++ b/drivers/virtio/Kconfig
@@ -139,4 +139,13 @@ config VIRTIO_DMA_SHARED_BUFFER
 	 This option adds a flavor of dma buffers that are backed by
 	 virtio resources.
 
+config VIRTIO_PMD
+	bool "Enable polling mode for virtio devices"
+	default n
+	depends on VIRTIO
+	help
+	 This option enables polling mode for virtio devices including
+	 virtio-net, virtio-blk, virtio-console and virtio-input devices.
+
+	 If unsure, say 'N'.
 endif # VIRTIO_MENU
Index: b/drivers/virtio/virtio.c
===================================================================
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-only
 #include <linux/virtio.h>
 #include <linux/spinlock.h>
+#include <linux/virtio_ring.h>
 #include <linux/virtio_config.h>
 #include <linux/module.h>
 #include <linux/idr.h>
@@ -69,6 +70,13 @@ static struct attribute *virtio_dev_attr
 };
 ATTRIBUTE_GROUPS(virtio_dev);
 
+#ifdef CONFIG_VIRTIO_PMD
+static unsigned long virtio_polling_interval = 10000000UL;
+module_param(virtio_polling_interval, ulong, 0644);
+MODULE_PARM_DESC(virtio_polling_interval,
+	"virtio polling interval in ns. (default: 10000000)");
+#endif
+
 static inline int virtio_id_match(const struct virtio_device *dev,
 				  const struct virtio_device_id *id)
 {
@@ -203,6 +211,74 @@ static int virtio_features_ok(struct vir
 	return 0;
 }
 
+#ifdef CONFIG_VIRTIO_PMD
+static enum hrtimer_restart virtio_handle_polling_timer(struct hrtimer *t)
+{
+	struct virtio_device *dev = container_of(t, struct virtio_device,
+						 hr_timer);
+
+	virtio_poll_virtqueues(dev);
+	/* virtio_config_changed(dev); */
+	hrtimer_start(&dev->hr_timer, ns_to_ktime(virtio_polling_interval),
+		      HRTIMER_MODE_REL);
+	return HRTIMER_NORESTART;
+}
+
+static inline void virtio_init_polling_timer(struct virtio_device *dev)
+{
+	if (virtio_polling_mode_enabled(dev)) {
+		hrtimer_init(&dev->hr_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+		(dev->hr_timer).function = virtio_handle_polling_timer;
+	}
+}
+
+static void virtio_start_polling_timer(struct virtio_device *dev)
+{
+	if (virtio_polling_mode_enabled(dev)) {
+		hrtimer_start(&dev->hr_timer,
+			ns_to_ktime(virtio_polling_interval), HRTIMER_MODE_REL);
+		dev_notice(&dev->dev, "start polling timer: %lu\n",
+			virtio_polling_interval);
+	}
+}
+
+static void virtio_stop_polling_timer(struct virtio_device *dev)
+{
+	if (virtio_polling_mode_enabled(dev)) {
+		hrtimer_cancel(&dev->hr_timer);
+		dev_notice(&dev->dev, "stop polling timer\n");
+	}
+}
+#endif
+
+/**
+ * virtio_device_ready - enable vq use in probe function
+ * @vdev: the device
+ *
+ * Driver must call this to use vqs in the probe function.
+ *
+ * Note: vqs are enabled automatically after probe returns.
+ */
+void virtio_device_ready(struct virtio_device *dev)
+{
+	unsigned int status = dev->config->get_status(dev);
+
+	WARN_ON(status & VIRTIO_CONFIG_S_DRIVER_OK);
+	dev->config->set_status(dev, status | VIRTIO_CONFIG_S_DRIVER_OK);
+
+#ifdef CONFIG_VIRTIO_PMD
+	/*
+	 * In polling mode, virtqueue interrupts are disabled from the
+	 * beginning. we must make sure the polling timer is started
+	 * just after the virtqueue is ready. When vring_create_virtqueue
+	 * is called the virtqueues are not ready. Start polling timer
+	 * when status is changed to DRIVER_OK is a good chance then.
+	 */
+	virtio_start_polling_timer(dev);
+#endif
+}
+EXPORT_SYMBOL_GPL(virtio_device_ready);
+
 static int virtio_dev_probe(struct device *_d)
 {
 	int err, i;
@@ -218,6 +294,13 @@ static int virtio_dev_probe(struct devic
 	/* Figure out what features the device supports. */
 	device_features = dev->config->get_features(dev);
 
+#ifdef CONFIG_VIRTIO_PMD
+	if (virtio_polling_mode_enabled(dev)) {
+		device_features &= ~VIRTIO_F_NOTIFY_ON_EMPTY;
+		device_features &= ~VIRTIO_RING_F_EVENT_IDX;
+	}
+#endif
+
 	/* Figure out what features the driver supports. */
 	driver_features = 0;
 	for (i = 0; i < drv->feature_table_size; i++) {
@@ -271,6 +354,10 @@ static int virtio_dev_probe(struct devic
 	if (err)
 		goto err;
 
+#ifdef CONFIG_VIRTIO_PMD
+	virtio_init_polling_timer(dev);
+#endif
+
 	err = drv->probe(dev);
 	if (err)
 		goto err;
@@ -286,6 +373,9 @@ static int virtio_dev_probe(struct devic
 
 	return 0;
 err:
+#ifdef CONFIG_VIRTIO_PMD
+	virtio_stop_polling_timer(dev);
+#endif
 	virtio_add_status(dev, VIRTIO_CONFIG_S_FAILED);
 	return err;
 
@@ -298,6 +388,9 @@ static int virtio_dev_remove(struct devi
 
 	virtio_config_disable(dev);
 
+#ifdef CONFIG_VIRTIO_PMD
+	virtio_stop_polling_timer(dev);
+#endif
 	drv->remove(dev);
 
 	/* Driver should have reset device. */
@@ -370,6 +463,10 @@ int register_virtio_device(struct virtio
 	INIT_LIST_HEAD(&dev->vqs);
 	spin_lock_init(&dev->vqs_list_lock);
 
+#ifdef CONFIG_VIRTIO_PMD
+	spin_lock_init(&dev->vq_lock);
+#endif
+
 	/*
 	 * device_add() causes the bus infrastructure to look for a matching
 	 * driver.
@@ -406,6 +503,10 @@ int virtio_device_freeze(struct virtio_d
 
 	virtio_config_disable(dev);
 
+#ifdef CONFIG_VIRTIO_PMD
+	virtio_stop_polling_timer(dev);
+#endif
+
 	dev->failed = dev->config->get_status(dev) & VIRTIO_CONFIG_S_FAILED;
 
 	if (drv && drv->freeze)
@@ -455,6 +556,10 @@ int virtio_device_restore(struct virtio_
 	/* Finally, tell the device we're all set */
 	virtio_add_status(dev, VIRTIO_CONFIG_S_DRIVER_OK);
 
+#ifdef CONFIG_VIRTIO_PMD
+	virtio_start_polling_timer(dev);
+#endif
+
 	virtio_config_enable(dev);
 
 	return 0;
Index: b/drivers/virtio/virtio_input.c
===================================================================
--- a/drivers/virtio/virtio_input.c
+++ b/drivers/virtio/virtio_input.c
@@ -374,6 +374,9 @@ static struct virtio_driver virtio_input
 	.feature_table       = features,
 	.feature_table_size  = ARRAY_SIZE(features),
 	.id_table            = id_table,
+#ifdef CONFIG_VIRTIO_PMD
+	.polling_mode        = true,
+#endif
 	.probe               = virtinput_probe,
 	.remove              = virtinput_remove,
 #ifdef CONFIG_PM_SLEEP
Index: b/drivers/virtio/virtio_ring.c
===================================================================
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -758,13 +758,20 @@ static unsigned virtqueue_enable_cb_prep
 	/* Depending on the VIRTIO_RING_F_EVENT_IDX feature, we need to
 	 * either clear the flags bit or point the event index at the next
 	 * entry. Always do both to keep code simple. */
-	if (vq->split.avail_flags_shadow & VRING_AVAIL_F_NO_INTERRUPT) {
-		vq->split.avail_flags_shadow &= ~VRING_AVAIL_F_NO_INTERRUPT;
-		if (!vq->event)
-			vq->split.vring.avail->flags =
-				cpu_to_virtio16(_vq->vdev,
+#ifdef CONFIG_VIRTIO_PMD
+	if (!virtio_polling_mode_enabled(_vq->vdev)) {
+#endif
+		if (vq->split.avail_flags_shadow & VRING_AVAIL_F_NO_INTERRUPT) {
+			vq->split.avail_flags_shadow &=
+				~VRING_AVAIL_F_NO_INTERRUPT;
+			if (!vq->event)
+				vq->split.vring.avail->flags =
+					cpu_to_virtio16(_vq->vdev,
 						vq->split.avail_flags_shadow);
+		}
+#ifdef CONFIG_VIRTIO_PMD
 	}
+#endif
 	vring_used_event(&vq->split.vring) = cpu_to_virtio16(_vq->vdev,
 			last_used_idx = vq->last_used_idx);
 	END_USE(vq);
@@ -791,13 +798,20 @@ static bool virtqueue_enable_cb_delayed_
 	/* Depending on the VIRTIO_RING_F_USED_EVENT_IDX feature, we need to
 	 * either clear the flags bit or point the event index at the next
 	 * entry. Always update the event index to keep code simple. */
-	if (vq->split.avail_flags_shadow & VRING_AVAIL_F_NO_INTERRUPT) {
-		vq->split.avail_flags_shadow &= ~VRING_AVAIL_F_NO_INTERRUPT;
-		if (!vq->event)
-			vq->split.vring.avail->flags =
-				cpu_to_virtio16(_vq->vdev,
+#ifdef CONFIG_VIRTIO_PMD
+	if (!virtio_polling_mode_enabled(_vq->vdev)) {
+#endif
+		if (vq->split.avail_flags_shadow & VRING_AVAIL_F_NO_INTERRUPT) {
+			vq->split.avail_flags_shadow &=
+				~VRING_AVAIL_F_NO_INTERRUPT;
+			if (!vq->event)
+				vq->split.vring.avail->flags =
+					cpu_to_virtio16(_vq->vdev,
 						vq->split.avail_flags_shadow);
+		}
+#ifdef CONFIG_VIRTIO_PMD
 	}
+#endif
 	/* TODO: tune this threshold */
 	bufs = (u16)(vq->split.avail_idx_shadow - vq->last_used_idx) * 3 / 4;
 
@@ -2076,6 +2090,7 @@ struct virtqueue *__vring_new_virtqueue(
 {
 	unsigned int i;
 	struct vring_virtqueue *vq;
+	bool disable_cb = (callback == NULL);
 
 	if (virtio_has_feature(vdev, VIRTIO_F_RING_PACKED))
 		return NULL;
@@ -2106,6 +2121,11 @@ struct virtqueue *__vring_new_virtqueue(
 		!context;
 	vq->event = virtio_has_feature(vdev, VIRTIO_RING_F_EVENT_IDX);
 
+#ifdef CONFIG_VIRTIO_PMD
+	if (!disable_cb && virtio_polling_mode_enabled(vdev))
+		disable_cb = true;
+#endif
+
 	if (virtio_has_feature(vdev, VIRTIO_F_ORDER_PLATFORM))
 		vq->weak_barriers = false;
 
@@ -2117,7 +2137,7 @@ struct virtqueue *__vring_new_virtqueue(
 	vq->split.avail_idx_shadow = 0;
 
 	/* No callback?  Tell other side not to bother us. */
-	if (!callback) {
+	if (disable_cb) {
 		vq->split.avail_flags_shadow |= VRING_AVAIL_F_NO_INTERRUPT;
 		if (!vq->event)
 			vq->split.vring.avail->flags = cpu_to_virtio16(vdev,
@@ -2349,4 +2369,18 @@ const struct vring *virtqueue_get_vring(
 }
 EXPORT_SYMBOL_GPL(virtqueue_get_vring);
 
+#ifdef CONFIG_VIRTIO_PMD
+void virtio_poll_virtqueues(struct virtio_device *dev)
+{
+	struct virtqueue *_vq;
+	unsigned long flags;
+
+	spin_lock_irqsave(&dev->vq_lock, flags);
+	list_for_each_entry(_vq, &dev->vqs, list)
+		vring_interrupt(0, _vq);  /* parameter irq is not used */
+	spin_unlock_irqrestore(&dev->vq_lock, flags);
+}
+EXPORT_SYMBOL_GPL(virtio_poll_virtqueues);
+#endif
+
 MODULE_LICENSE("GPL");
Index: b/include/linux/virtio.h
===================================================================
--- a/include/linux/virtio.h
+++ b/include/linux/virtio.h
@@ -89,6 +89,10 @@ dma_addr_t virtqueue_get_desc_addr(struc
 dma_addr_t virtqueue_get_avail_addr(struct virtqueue *vq);
 dma_addr_t virtqueue_get_used_addr(struct virtqueue *vq);
 
+#ifdef CONFIG_VIRTIO_PMD
+void virtio_poll_virtqueues(struct virtio_device *dev);
+#endif
+
 /**
  * virtio_device - representation of a device using virtio
  * @index: unique position on the virtio bus
@@ -118,6 +122,10 @@ struct virtio_device {
 	struct list_head vqs;
 	u64 features;
 	void *priv;
+#ifdef CONFIG_VIRTIO_PMD
+	spinlock_t vq_lock;
+	struct hrtimer hr_timer;
+#endif
 };
 
 static inline struct virtio_device *dev_to_virtio(struct device *_dev)
@@ -135,6 +143,7 @@ void virtio_break_device(struct virtio_d
 void virtio_config_changed(struct virtio_device *dev);
 void virtio_config_disable(struct virtio_device *dev);
 void virtio_config_enable(struct virtio_device *dev);
+void virtio_device_ready(struct virtio_device *dev);
 #ifdef CONFIG_PM_SLEEP
 int virtio_device_freeze(struct virtio_device *dev);
 int virtio_device_restore(struct virtio_device *dev);
@@ -169,6 +178,9 @@ struct virtio_driver {
 	unsigned int feature_table_size;
 	const unsigned int *feature_table_legacy;
 	unsigned int feature_table_size_legacy;
+#ifdef CONFIG_VIRTIO_PMD
+	bool polling_mode;
+#endif
 	int (*validate)(struct virtio_device *dev);
 	int (*probe)(struct virtio_device *dev);
 	void (*scan)(struct virtio_device *dev);
@@ -185,6 +197,15 @@ static inline struct virtio_driver *drv_
 	return container_of(drv, struct virtio_driver, driver);
 }
 
+#ifdef CONFIG_VIRTIO_PMD
+static inline bool virtio_polling_mode_enabled(struct virtio_device *dev)
+{
+	struct virtio_driver *drv = drv_to_virtio(dev->dev.driver);
+
+	return drv->polling_mode;
+}
+#endif
+
 int register_virtio_driver(struct virtio_driver *drv);
 void unregister_virtio_driver(struct virtio_driver *drv);
 
Index: b/include/linux/virtio_config.h
===================================================================
--- a/include/linux/virtio_config.h
+++ b/include/linux/virtio_config.h
@@ -217,23 +217,6 @@ int virtio_find_vqs_ctx(struct virtio_de
 				      desc);
 }
 
-/**
- * virtio_device_ready - enable vq use in probe function
- * @vdev: the device
- *
- * Driver must call this to use vqs in the probe function.
- *
- * Note: vqs are enabled automatically after probe returns.
- */
-static inline
-void virtio_device_ready(struct virtio_device *dev)
-{
-	unsigned status = dev->config->get_status(dev);
-
-	BUG_ON(status & VIRTIO_CONFIG_S_DRIVER_OK);
-	dev->config->set_status(dev, status | VIRTIO_CONFIG_S_DRIVER_OK);
-}
-
 static inline
 const char *virtio_bus_name(struct virtio_device *vdev)
 {
