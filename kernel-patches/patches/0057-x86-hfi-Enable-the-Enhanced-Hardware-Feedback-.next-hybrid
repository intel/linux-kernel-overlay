From 2ffdd7ecba221322c29c30933534b4bffa1e3f60 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Mon, 12 Oct 2020 16:58:58 -0700
Subject: [PATCH 57/72] x86/hfi: Enable the Enhanced Hardware Feedback
 Interface

Enable the Enhanced Hardware Feedback Interface (EHFI)to classify threads.
EHFI provides functionality to classify a software thread running ona CPU.

Discover how many classification classes exist. Also, when enabling the
HFI, set the EHFI bit.

Lastly, on CPU hotplug, enable the IA32_HW_FEEDBACK_THREAD_CONFIG.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/include/asm/hfi.h       |  6 ++++++
 arch/x86/include/asm/msr-index.h |  2 ++
 arch/x86/platform/intel/hfi.c    | 21 +++++++++++++++++++--
 3 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/arch/x86/include/asm/hfi.h b/arch/x86/include/asm/hfi.h
index 3fc5643d9722..153b9ec634af 100644
--- a/arch/x86/include/asm/hfi.h
+++ b/arch/x86/include/asm/hfi.h
@@ -10,6 +10,8 @@
 #define CPUID_HFI_TABLE_SIZE_SHIFT	8
 #define CPUID_HFI_CPU_INDEX_MASK	0xffff0000
 #define CPUID_HFI_CPU_INDEX_SHIFT	16
+#define CPUID_EHFI_CLASSES_MASK		0xf00
+#define CPUID_EHFI_CLASSES_SHIFT	8
 
 /* Hardware Feedback Interface Pointer */
 #define HFI_PTR_VALID_BIT		BIT(0)
@@ -17,6 +19,10 @@
 
 /* Hardware Feedback Interface Configuration */
 #define HFI_CONFIG_ENABLE_BIT		BIT(0)
+#define EHFI_CONFIG_ENABLE_BIT		BIT(1)
+
+/* Thread classification Configuration */
+#define EHFI_THREAD_CONFIG_ENABLE	BIT(0)
 
 /* Hardware Feedback Interface Capabilities */
 #define HFI_CAPABILITIES_MASK		0xff
diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 2f808ee55bdb..9d2ae3d626e3 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -940,6 +940,8 @@
 /* Hardware Feedback Interface */
 #define MSR_IA32_HW_FEEDBACK_PTR        0x17d0
 #define MSR_IA32_HW_FEEDBACK_CONFIG     0x17d1
+#define MSR_IA32_HW_FEEDBACK_THREAD_CONFIG 0x17d4
+#define MSR_IA32_HW_FEEDBACK_CHAR	0x17d2
 
 /* History RESET */
 #define MSR_IA32_HW_HRESET_ENABLE	0x17da
diff --git a/arch/x86/platform/intel/hfi.c b/arch/x86/platform/intel/hfi.c
index aa0608f6c48b..0cc65749fc16 100644
--- a/arch/x86/platform/intel/hfi.c
+++ b/arch/x86/platform/intel/hfi.c
@@ -525,6 +525,10 @@ void enable_hfi(void)
 
 	/* Enable the hardware feedback interface. */
 	rdmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
+
+	if (boot_cpu_has(X86_FEATURE_INTEL_EHFI))
+		msr_val |= EHFI_CONFIG_ENABLE_BIT;
+
 	msr_val |= HFI_CONFIG_ENABLE_BIT;
 	wrmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
 
@@ -555,6 +559,13 @@ void hfi_setup_cpu(struct cpuinfo_x86 *c)
 	hfi_idx = (edx & CPUID_HFI_CPU_INDEX_MASK) >> CPUID_HFI_CPU_INDEX_SHIFT;
 
 	per_cpu(hfi_cpu_index, c->cpu_index) = hfi_idx;
+
+	/* Enable the EHFI in this CPU */
+	if (cpu_has(c, X86_FEATURE_INTEL_EHFI)) {
+		u64 msr_val = EHFI_THREAD_CONFIG_ENABLE;
+
+		wrmsrl(MSR_IA32_HW_FEEDBACK_THREAD_CONFIG, msr_val);
+	}
 }
 
 /*
@@ -630,8 +641,14 @@ static void __init intel_hfi_init(void)
 		return;
 	}
 
-	/* For now, use only one class of the HFI table */
-	hfi_params.nr_classes = 1;
+	if (boot_cpu_has(X86_FEATURE_INTEL_EHFI)) {
+		reg = cpuid_ecx(CPUID_HFI_LEAF);
+
+		hfi_params.nr_classes = (reg & CPUID_EHFI_CLASSES_MASK) >>
+			      CPUID_EHFI_CLASSES_SHIFT;
+	} else {
+		hfi_params.nr_classes = 1;
+	}
 
 	raw_data = kcalloc(num_possible_cpus(), sizeof(*raw_data), GFP_KERNEL);
 	if (!raw_data) {
-- 
2.27.0

