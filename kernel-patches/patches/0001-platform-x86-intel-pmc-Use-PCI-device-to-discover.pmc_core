From 869256016e83f0041560cd85fc9bcf1c6b6ca109 Mon Sep 17 00:00:00 2001
From: "David E. Box" <david.e.box@linux.intel.com>
Date: Thu, 1 Feb 2024 15:53:01 -0800
Subject: [PATCH] platform/x86/intel/pmc: Use PCI device to discover the PMC
 SSRAM device

Due to dielet architecture, the PCI Bus enumeration of integrated devices
may no longer be fixed for a given CPU. Change the PMC SSRAM discover to
search for the device by PCI DEVID instead of assuming its location on the
PCI bus, which will not be the same all combinations of dielets with the
same CPU.

Signed-off-by: David E. Box <david.e.box@linux.intel.com>
---
 drivers/platform/x86/intel/pmc/arl.c        | 3 +--
 drivers/platform/x86/intel/pmc/core.h       | 2 +-
 drivers/platform/x86/intel/pmc/core_ssram.c | 4 ++--
 drivers/platform/x86/intel/pmc/lnl.c        | 3 +--
 drivers/platform/x86/intel/pmc/mtl.c        | 3 +--
 5 files changed, 6 insertions(+), 9 deletions(-)

diff --git a/drivers/platform/x86/intel/pmc/arl.c b/drivers/platform/x86/intel/pmc/arl.c
index 683ae828276b..bb8eb8173d79 100644
--- a/drivers/platform/x86/intel/pmc/arl.c
+++ b/drivers/platform/x86/intel/pmc/arl.c
@@ -694,7 +694,6 @@ int arl_core_init(struct pmc_dev *pmcdev)
 {
 	struct pmc *pmc = pmcdev->pmcs[PMC_IDX_SOC];
 	int ret;
-	int func = 0;
 	bool ssram_init = true;
 
 	arl_d3_fixup();
@@ -706,7 +705,7 @@ int arl_core_init(struct pmc_dev *pmcdev)
 	 * If ssram init fails use legacy method to at least get the
 	 * primary PMC
 	 */
-	ret = pmc_core_ssram_init(pmcdev, func);
+	ret = pmc_core_ssram_init(pmcdev, PMC_DEVID_SOCS);
 	if (ret) {
 		ssram_init = false;
 		pmc->map = &arl_socs_reg_map;
diff --git a/drivers/platform/x86/intel/pmc/core.h b/drivers/platform/x86/intel/pmc/core.h
index 54137faaae2b..b59aa6f09b1a 100644
--- a/drivers/platform/x86/intel/pmc/core.h
+++ b/drivers/platform/x86/intel/pmc/core.h
@@ -576,7 +576,7 @@ extern void pmc_core_get_low_power_modes(struct pmc_dev *pmcdev);
 extern void pmc_core_punit_pmt_init(struct pmc_dev *pmcdev, u32 guid);
 extern void pmc_core_set_device_d3(unsigned int device);
 
-extern int pmc_core_ssram_init(struct pmc_dev *pmcdev, int func);
+extern int pmc_core_ssram_init(struct pmc_dev *pmcdev, unsigned int devid);
 
 int spt_core_init(struct pmc_dev *pmcdev);
 int cnp_core_init(struct pmc_dev *pmcdev);
diff --git a/drivers/platform/x86/intel/pmc/core_ssram.c b/drivers/platform/x86/intel/pmc/core_ssram.c
index 1bde86c54eb9..9f3353b45d26 100644
--- a/drivers/platform/x86/intel/pmc/core_ssram.c
+++ b/drivers/platform/x86/intel/pmc/core_ssram.c
@@ -290,12 +290,12 @@ pmc_core_ssram_get_pmc(struct pmc_dev *pmcdev, int pmc_idx, u32 offset)
 	return pmc_core_pmc_add(pmcdev, pwrm_base, map, pmc_idx);
 }
 
-int pmc_core_ssram_init(struct pmc_dev *pmcdev, int func)
+int pmc_core_ssram_init(struct pmc_dev *pmcdev, unsigned int devid)
 {
 	struct pci_dev *pcidev;
 	int ret;
 
-	pcidev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(20, func));
+	pcidev = pci_get_device(PCI_VENDOR_ID_INTEL, devid, NULL);
 	if (!pcidev)
 		return -ENODEV;
 
diff --git a/drivers/platform/x86/intel/pmc/lnl.c b/drivers/platform/x86/intel/pmc/lnl.c
index abad17cdd3d7..b1010d95671c 100644
--- a/drivers/platform/x86/intel/pmc/lnl.c
+++ b/drivers/platform/x86/intel/pmc/lnl.c
@@ -517,7 +517,6 @@ static int lnl_resume(struct pmc_dev *pmcdev)
 int lnl_core_init(struct pmc_dev *pmcdev)
 {
 	int ret;
-	int func = 2;
 	bool ssram_init = true;
 	struct pmc *pmc = pmcdev->pmcs[PMC_IDX_SOC];
 
@@ -526,7 +525,7 @@ int lnl_core_init(struct pmc_dev *pmcdev)
 	pmcdev->suspend = cnl_suspend;
 	pmcdev->resume = lnl_resume;
 	pmcdev->regmap_list = lnl_pmc_info_list;
-	ret = pmc_core_ssram_init(pmcdev, func);
+	ret = pmc_core_ssram_init(pmcdev, PMC_DEVID_SOCM);
 
 	/* If regbase not assigned, set map and discover using legacy method */
 	if (ret) {
diff --git a/drivers/platform/x86/intel/pmc/mtl.c b/drivers/platform/x86/intel/pmc/mtl.c
index c7d15d864039..7715f47f56e4 100644
--- a/drivers/platform/x86/intel/pmc/mtl.c
+++ b/drivers/platform/x86/intel/pmc/mtl.c
@@ -995,7 +995,6 @@ int mtl_core_init(struct pmc_dev *pmcdev)
 {
 	struct pmc *pmc = pmcdev->pmcs[PMC_IDX_SOC];
 	int ret;
-	int func = 2;
 	bool ssram_init = true;
 
 	mtl_d3_fixup();
@@ -1008,7 +1007,7 @@ int mtl_core_init(struct pmc_dev *pmcdev)
 	 * If ssram init fails use legacy method to at least get the
 	 * primary PMC
 	 */
-	ret = pmc_core_ssram_init(pmcdev, func);
+	ret = pmc_core_ssram_init(pmcdev, PMC_DEVID_SOCM);
 	if (ret) {
 		ssram_init = false;
 		dev_warn(&pmcdev->pdev->dev,
-- 
2.25.1

