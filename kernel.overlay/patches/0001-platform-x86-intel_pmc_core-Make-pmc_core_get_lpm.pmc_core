From 7be17fbe7da1f93428e8788bc6c87fde152c6046 Mon Sep 17 00:00:00 2001
From: Gayatri Kammela <gayatri.kammela@intel.com>
Date: Tue, 15 Jun 2021 13:33:04 -0700
Subject: [PATCH 1/7] platform/x86: intel_pmc_core: Make
 pmc_core_get_lpm_reqs() generic

pmc_core_get_lpm_reqs() is responsible for getting the requirements
that are not memory mapped, using the _DSM method by storing them in
a buffer. Since, _DSM method is believed to be supported only in Tiger Lake,
pmc_core_get_lpm_reqs() is called only when the platform is Tiger Lake.
However, Alder Lake also supports _DSM method to get the requirements.

Hence, make pmc_core_get_lpm_reqs() generic to support all the platforms
that may support_DSM method

Cc: Srinivas Pandruvada <srinivas.pandruvada@intel.com>
Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Cc: David Box <david.e.box@intel.com>
Suggested-by: David Box <david.e.box@intel.com>
Signed-off-by: Gayatri Kammela <gayatri.kammela@intel.com>
---
 drivers/platform/x86/intel_pmc_core.c | 15 ++++++++++-----
 drivers/platform/x86/intel_pmc_core.h |  2 ++
 2 files changed, 12 insertions(+), 5 deletions(-)

diff --git a/drivers/platform/x86/intel_pmc_core.c b/drivers/platform/x86/intel_pmc_core.c
index b0e486a6bdfb..e26ed8d1e435 100644
--- a/drivers/platform/x86/intel_pmc_core.c
+++ b/drivers/platform/x86/intel_pmc_core.c
@@ -598,11 +598,12 @@ static const struct pmc_reg_map tgl_reg_map = {
 	.etr3_offset = ETR3_OFFSET,
 };
 
-static void pmc_core_get_tgl_lpm_reqs(struct platform_device *pdev)
+static void pmc_core_get_lpm_reqs(struct platform_device *pdev)
 {
 	struct pmc_dev *pmcdev = platform_get_drvdata(pdev);
 	const int num_maps = pmcdev->map->lpm_num_maps;
-	u32 lpm_size = LPM_MAX_NUM_MODES * num_maps * 4;
+	const int num_modes = pmcdev->map->lpm_num_modes;
+	u32 lpm_size = num_modes * num_maps * 4;
 	union acpi_object *out_obj;
 	struct acpi_device *adev;
 	guid_t s0ix_dsm_guid;
@@ -619,7 +620,7 @@ static void pmc_core_get_tgl_lpm_reqs(struct platform_device *pdev)
 	if (out_obj && out_obj->type == ACPI_TYPE_BUFFER) {
 		u32 size = out_obj->buffer.length;
 
-		if (size != lpm_size) {
+		if (size < lpm_size) {
 			acpi_handle_debug(adev->handle,
 				"_DSM returned unexpected buffer size, have %u, expect %u\n",
 				size, lpm_size);
@@ -1266,6 +1267,10 @@ static int pmc_core_substate_req_regs_show(struct seq_file *s, void *unused)
 	u32 *lpm_req_regs = pmcdev->lpm_req_regs;
 	int mp;
 
+	/* Check if lpm_req_regs is NULL */
+	if (!lpm_req_regs)
+		return -1;
+
 	/* Display the header */
 	pmc_core_substate_req_header_show(s);
 
@@ -1678,8 +1683,8 @@ static int pmc_core_probe(struct platform_device *pdev)
 	pmc_core_get_low_power_modes(pmcdev);
 	pmc_core_do_dmi_quirks(pmcdev);
 
-	if (pmcdev->map == &tgl_reg_map)
-		pmc_core_get_tgl_lpm_reqs(pdev);
+	if (pmcdev->map->lpm_sts)
+		pmc_core_get_lpm_reqs(pdev);
 
 	/*
 	 * On TGL, due to a hardware limitation, the GBE LTR blocks PC10 when
diff --git a/drivers/platform/x86/intel_pmc_core.h b/drivers/platform/x86/intel_pmc_core.h
index e8dae9c6c45f..a50254846a84 100644
--- a/drivers/platform/x86/intel_pmc_core.h
+++ b/drivers/platform/x86/intel_pmc_core.h
@@ -209,6 +209,7 @@ enum ppfear_regs {
 #define TGL_LPM_LIVE_STATUS_OFFSET		0x1C5C
 #define TGL_LPM_PRI_OFFSET			0x1C7C
 #define TGL_LPM_NUM_MAPS			6
+#define TGL_LPM_NUM_MODES			8
 
 /* Extended Test Mode Register 3 (CNL and later) */
 #define ETR3_OFFSET				0x1048
@@ -277,6 +278,7 @@ struct pmc_reg_map {
 	const u32 pm_vric1_offset;
 	/* Low Power Mode registers */
 	const int lpm_num_maps;
+	const int lpm_num_modes;
 	const int lpm_res_counter_step_x2;
 	const u32 lpm_sts_latch_en_offset;
 	const u32 lpm_en_offset;
-- 
2.27.0

