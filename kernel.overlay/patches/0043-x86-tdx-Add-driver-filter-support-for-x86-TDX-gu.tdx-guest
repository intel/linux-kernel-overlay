From 5bded080565c6f97538f74857ddf1fbe97360757 Mon Sep 17 00:00:00 2001
From: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
Date: Tue, 21 Jul 2020 21:49:27 -0700
Subject: [PATCH 43/82] x86/tdx: Add driver filter support for x86 TDX guest
 platform
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

For confidential VM guests all drivers that take any input from the
outside world have to be hardened. Each MMIO read or similar could be
an attack point, leading to a buffer overflow or other memory safety
problem, and allow a malicious host to access guest memory. A malicious
hypervisor could present any PCI or other mmio/port configuration and
trick vulnerable drivers to load, either through udev, or if they are
built in through the automatic driver probing for all builtin drivers.

This is a lot of work and just not feasible for all the drivers in the
tree. It also would be pointless for the vast majority of drivers,
which are never used in virtualization. So enable driver filter
framework for TDX guest and allow only audited drivers via registering
allow list of drivers with filter framework.

Currently in TDX guest, only following drivers are hardened and
enabled:

 * virtio-blk
 * virtio-console
 * virtio-net
 * virtio-pci
 * virtio_rproc_serial

The intention is that other drivers could be added here, but only after
they have been audited and hardened.

Note that some drivers do hardware interactions before registering the
driver. These still would need to be hardened separately.

Also enable PR_GUEST_DRIVER_FILTER protected guest feature for the
TDX guest.

Reviewed-by: Andi Kleen <ak@linux.intel.com>
Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
---
 arch/x86/include/asm/tdx.h   |  1 +
 arch/x86/kernel/Makefile     |  2 +-
 arch/x86/kernel/tdx-filter.c | 61 ++++++++++++++++++++++++++++++++++++
 arch/x86/kernel/tdx.c        |  3 ++
 4 files changed, 66 insertions(+), 1 deletion(-)
 create mode 100644 arch/x86/kernel/tdx-filter.c

diff --git a/arch/x86/include/asm/tdx.h b/arch/x86/include/asm/tdx.h
index 1c0d4bf693a3..2df3337272e2 100644
--- a/arch/x86/include/asm/tdx.h
+++ b/arch/x86/include/asm/tdx.h
@@ -69,6 +69,7 @@ enum tdx_map_type {
 
 bool tdg_debug_enabled(void);
 void __init tdx_early_init(void);
+void __init tdg_filter_init(void);
 
 bool tdx_prot_guest_has(unsigned long flag);
 
diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index 2d365fc6f32c..04aa1740f438 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -127,7 +127,7 @@ obj-$(CONFIG_PARAVIRT_CLOCK)	+= pvclock.o
 obj-$(CONFIG_X86_PMEM_LEGACY_DEVICE) += pmem.o
 
 obj-$(CONFIG_JAILHOUSE_GUEST)	+= jailhouse.o
-obj-$(CONFIG_INTEL_TDX_GUEST)	+= tdcall.o tdx.o
+obj-$(CONFIG_INTEL_TDX_GUEST)	+= tdcall.o tdx.o tdx-filter.o
 
 obj-$(CONFIG_EISA)		+= eisa.o
 obj-$(CONFIG_PCSPKR_PLATFORM)	+= pcspeaker.o
diff --git a/arch/x86/kernel/tdx-filter.c b/arch/x86/kernel/tdx-filter.c
new file mode 100644
index 000000000000..8eee26fa52ca
--- /dev/null
+++ b/arch/x86/kernel/tdx-filter.c
@@ -0,0 +1,61 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Intel Corporation
+ */
+#define pr_fmt(fmt) "TDX: " fmt
+
+#include <linux/acpi.h>
+#include <linux/pci.h>
+#include <linux/device/filter.h>
+#include <linux/protected_guest.h>
+
+#include <asm/tdx.h>
+
+#define ADD_FILTER_NODE(bname, alist, st)		\
+{							\
+	.bus_name = #bname,				\
+	.allow_list = alist,				\
+	.len = ARRAY_SIZE(alist),			\
+	.default_status = st				\
+}
+
+#define ADD_SIMPLE_FILTER_NODE(bname, st)		\
+{							\
+	.bus_name = #bname,				\
+	.default_status = st				\
+}
+
+/* Allow list for Virtio bus */
+static char *virtio_allow_list[] = {
+	"virtio_net",
+	"virtio_console",
+	"virtio_blk",
+	"virtio_rproc_serial",
+};
+
+/* Allow list for PCI bus */
+static char *pci_allow_list[] = {
+	"virtio-pci",
+};
+
+static struct drv_filter_node filter_list[] = {
+	/* Enable all devices in "cpu" bus */
+	ADD_SIMPLE_FILTER_NODE(cpu, true),
+	/* Allow drivers in pci_allow_list in "pci" bus */
+	ADD_FILTER_NODE(pci, pci_allow_list, false),
+	/* Allow drivers in virtio_allow_list in "virtio" bus */
+	ADD_FILTER_NODE(virtio, virtio_allow_list, false),
+};
+
+void __init tdg_filter_init(void)
+{
+	int i;
+
+	if (!prot_guest_has(PR_GUEST_TDX))
+		return;
+
+	for (i = 0; i < ARRAY_SIZE(filter_list); i++)
+		register_drv_filter(&filter_list[i]);
+
+	pr_info("Enabled TDX guest device filter\n");
+}
diff --git a/arch/x86/kernel/tdx.c b/arch/x86/kernel/tdx.c
index 62cb6ceee800..3969f0a7447c 100644
--- a/arch/x86/kernel/tdx.c
+++ b/arch/x86/kernel/tdx.c
@@ -111,6 +111,7 @@ bool tdx_prot_guest_has(unsigned long flag)
 	case PR_GUEST_UNROLL_STRING_IO:
 	case PR_GUEST_SHARED_MAPPING_INIT:
 	case PR_GUEST_TDX:
+	case PR_GUEST_DRIVER_FILTER:
 		return cpu_feature_enabled(X86_FEATURE_TDX_GUEST);
 	}
 
@@ -574,6 +575,8 @@ void __init tdx_early_init(void)
 
 	tdg_get_info();
 
+	tdg_filter_init();
+
 	pv_ops.irq.safe_halt = tdg_safe_halt;
 	pv_ops.irq.halt = tdg_halt;
 
-- 
2.27.0

