From 32774f191c5f7aaf4fb6b534ae537aed32d323fa Mon Sep 17 00:00:00 2001
From: "Chang S. Bae" <chang.seok.bae@intel.com>
Date: Mon, 20 Sep 2021 14:32:23 -0700
Subject: [PATCH 46/47] !UPSTREAM: x86/fpu/xstate: Introduce boot-parameters to
 control AMX

amx=disable:   for admin to be able to permanently disable AMX on a booted
               kernel.
amx=on:        the deafult -- a debug option to allow all processes to
               access AMX state without invoking the system call.
amx=off:       an experimental option -- AMX is enabled for a process
               that successfully invokes the system call.

Signed-off-by: Chang S. Bae <chang.seok.bae@intel.com>
---
 .../admin-guide/kernel-parameters.txt         | 11 ++++
 arch/x86/include/asm/fpu/xstate.h             | 10 +++-
 arch/x86/kernel/fpu/init.c                    | 52 +++++++++++++++++++
 arch/x86/kernel/fpu/xstate.c                  |  2 +-
 4 files changed, 73 insertions(+), 2 deletions(-)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 471e82be87ff..dd505864fb4f 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -333,6 +333,17 @@
 			Format: <a>,<b>
 			See also Documentation/input/joydev/joystick.rst
 
+	amx=            [X86-64]
+			disable     - for admin to be able to permanently
+				      diable AMX on a booted kernel.
+			on          - a debug option to allow all processes
+				      to access AMX state without invoking
+				      the system call.
+			off         - the default -- AMX is enabled, but it
+				      is of by default for all processes,
+				      until they successfully invoke the
+				      system call.
+
 	analog.map=	[HW,JOY] Analog joystick and gamepad support
 			Specifies type or capabilities of an analog joystick
 			connected to one of 16 gameports
diff --git a/arch/x86/include/asm/fpu/xstate.h b/arch/x86/include/asm/fpu/xstate.h
index 107cc74e14b4..47b61b2b18da 100644
--- a/arch/x86/include/asm/fpu/xstate.h
+++ b/arch/x86/include/asm/fpu/xstate.h
@@ -179,6 +179,8 @@ static inline u64 get_group_dynamic_state_perm(struct task_struct *tsk)
 	return tsk->group_leader->thread.fpu.dynamic_state_perm;
 }
 
+bool amx_enable_configured(void);
+
 /**
  * dynamic_state_permitted - Check a task's permission for indicated
  *			     features.
@@ -187,12 +189,18 @@ static inline u64 get_group_dynamic_state_perm(struct task_struct *tsk)
  * Return:	true if all of the queried features are permitted;
  *		otherwise, false.
  */
+
+bool check_state_perm_config(struct task_struct *tsk, bool perm);
+
 static inline bool dynamic_state_permitted(struct task_struct *tsk, u64 state_mask)
 {
 	u64 dynamic_state_mask = state_mask & xfeatures_mask_user_dynamic;
+	bool perm;
 
-	return ((dynamic_state_mask & get_group_dynamic_state_perm(tsk)) ==
+	perm = ((dynamic_state_mask & get_group_dynamic_state_perm(tsk)) ==
 		dynamic_state_mask);
+
+	return check_state_perm_config(tsk, perm);
 }
 
 void reset_dynamic_state_perm(struct task_struct *tsk);
diff --git a/arch/x86/kernel/fpu/init.c b/arch/x86/kernel/fpu/init.c
index 75bacda2ab87..837a1e66fe03 100644
--- a/arch/x86/kernel/fpu/init.c
+++ b/arch/x86/kernel/fpu/init.c
@@ -5,6 +5,7 @@
 #include <asm/fpu/internal.h>
 #include <asm/tlbflush.h>
 #include <asm/setup.h>
+#include <asm/cmdline.h>
 
 #include <linux/sched.h>
 #include <linux/sched/task.h>
@@ -213,6 +214,42 @@ static void __init fpu__init_system_xstate_size_legacy(void)
 	fpu_buf_cfg.user_minsig_size = xstate_size;
 }
 
+/*
+ * Find supported xfeatures based on cpu features and command-line input.
+ * This must be called after fpu__init_parse_early_param() is called and
+ * xfeatures_mask_all is enumerated.
+ */
+
+bool amx_enable = true;
+bool amx_abi = false;
+
+bool check_state_perm_config(struct task_struct *tsk, bool perm)
+{
+	if (!amx_abi) {
+		if (!perm)
+			WARN_ONCE(1, "x86/fpu:[%d] ARCH_SET_STATE_ENABLE was missing.\n",
+				  task_pid_nr(tsk));
+		perm = true;
+	}
+	return perm;
+}
+
+bool amx_enable_configured(void)
+{
+	return amx_enable;
+}
+
+u64 __init fpu__get_supported_xfeatures_mask(void)
+{
+	u64 mask = XFEATURE_MASK_USER_SUPPORTED | XFEATURE_MASK_SUPERVISOR_SUPPORTED;
+
+	if (!IS_ENABLED(CONFIG_X86_64) || !amx_enable) {
+		mask  &= ~(XFEATURE_MASK_XTILE);
+	}
+
+	return mask;
+}
+
 /* Legacy code to initialize eager fpu mode. */
 static void __init fpu__init_system_ctx_switch(void)
 {
@@ -222,12 +259,27 @@ static void __init fpu__init_system_ctx_switch(void)
 	on_boot_cpu = 0;
 }
 
+static void __init fpu__init_parse_early_param(void)
+{
+	char arg[20];
+
+	if (cmdline_find_option(boot_command_line, "amx", arg, sizeof(arg))) {
+		if (!strcmp(arg, "off"))
+			amx_abi = true;
+		else if (!strcmp(arg, "on"))
+			amx_abi = false;
+		else if (!strcmp(arg, "disable"))
+			amx_enable = false;
+	}
+}
+
 /*
  * Called on the boot CPU once per system bootup, to set up the initial
  * FPU state that is later cloned into all processes:
  */
 void __init fpu__init_system(struct cpuinfo_x86 *c)
 {
+	fpu__init_parse_early_param();
 	fpu__init_system_early_generic(c);
 
 	/*
diff --git a/arch/x86/kernel/fpu/xstate.c b/arch/x86/kernel/fpu/xstate.c
index 9079470267ec..10c420d92d59 100644
--- a/arch/x86/kernel/fpu/xstate.c
+++ b/arch/x86/kernel/fpu/xstate.c
@@ -1017,7 +1017,7 @@ void __init fpu__init_system_xstate(void)
 	xfeatures_mask_all &= XFEATURE_MASK_USER_SUPPORTED |
 			      XFEATURE_MASK_SUPERVISOR_SUPPORTED;
 
-	if (!IS_ENABLED(CONFIG_X86_64))
+	if (!IS_ENABLED(CONFIG_X86_64) || !amx_enable_configured())
 		xfeatures_mask_all &= ~XFEATURE_MASK_XTILE;
 
 	/* Store it for paranoia check at the end */
-- 
2.32.0

