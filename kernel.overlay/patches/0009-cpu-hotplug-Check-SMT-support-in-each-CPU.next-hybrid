From 392493334b31efce66903b0fd54e0fa7815a0fe4 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Mon, 10 Aug 2020 13:05:40 -0700
Subject: [PATCH 09/80] cpu/hotplug: Check SMT support in each CPU

The early, single check for SMT support in check_bugs() assumes that all
CPUs support SMT (or not). This assumption does not stand in hybrid CPUs.
If the boot CPU does not support SMT, then the flag cpu_smt_control will
be set to CPU_SMT_DISABLED and the SMT siblings of the processors which do
support SMT will not be brought online.

Instead, check for SMT support each time a CPU brought online. Only enable
SMT if allowed by the kernel parameter "nosmt"

Cc: Andi Kleen <ak@linux.intel.com>
Cc: Andy Shevchenko <andriy.shevchenko@intel.com>
Cc: Aubrey Li <aubrey.li@linux.intel.com>
Cc: Chen Yu <yu.c.chen@intel.com>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: "Rafael J. Wysocki" <rafael.j.wysocki@intel.com>
Cc: "Ravi V. Shankar" <ravi.v.shankar@intel.com>
Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Cc: Tony Luck <tony.luck@intel.com>
Reported-by: Sachin Kumar <Sachin.Kumar@intel.com>
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
Changes since v4:
 * Corrected typo in commit message (STM -> SMT). (Tony)

Changes since v3:
 * Introduced this patch

Changes since v2:
 * N/A

Changes since v1:
 * N/A
---
 arch/x86/kernel/cpu/bugs.c |  6 ------
 include/linux/cpu.h        |  2 --
 kernel/cpu.c               | 11 ++++++++++-
 3 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/arch/x86/kernel/cpu/bugs.c b/arch/x86/kernel/cpu/bugs.c
index d41b70fe4918..96de9c12a328 100644
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@ -80,12 +80,6 @@ void __init check_bugs(void)
 {
 	identify_boot_cpu();
 
-	/*
-	 * identify_boot_cpu() initialized SMT support information, let the
-	 * core code know.
-	 */
-	cpu_smt_check_topology();
-
 	if (!IS_ENABLED(CONFIG_SMP)) {
 		pr_info("CPU: ");
 		print_cpu_info(&boot_cpu_data);
diff --git a/include/linux/cpu.h b/include/linux/cpu.h
index 94a578a96202..522e94b30939 100644
--- a/include/linux/cpu.h
+++ b/include/linux/cpu.h
@@ -217,14 +217,12 @@ enum cpuhp_smt_control {
 #if defined(CONFIG_SMP) && defined(CONFIG_HOTPLUG_SMT)
 extern enum cpuhp_smt_control cpu_smt_control;
 extern void cpu_smt_disable(bool force);
-extern void cpu_smt_check_topology(void);
 extern bool cpu_smt_possible(void);
 extern int cpuhp_smt_enable(void);
 extern int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval);
 #else
 # define cpu_smt_control		(CPU_SMT_NOT_IMPLEMENTED)
 static inline void cpu_smt_disable(bool force) { }
-static inline void cpu_smt_check_topology(void) { }
 static inline bool cpu_smt_possible(void) { return false; }
 static inline int cpuhp_smt_enable(void) { return 0; }
 static inline int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval) { return 0; }
diff --git a/kernel/cpu.c b/kernel/cpu.c
index 1a613101c9a6..fb10eb4c9933 100644
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@ -425,8 +425,17 @@ void __init cpu_smt_disable(bool force)
  */
 void __init cpu_smt_check_topology(void)
 {
-	if (!topology_smt_supported())
+	if (!topology_smt_supported()) {
 		cpu_smt_control = CPU_SMT_NOT_SUPPORTED;
+		return;
+	}
+
+	/* SMT is supported on this CPU. Make sure nosmt is still enforced. */
+	if (cpu_smt_control_user == CPU_SMT_DISABLED ||
+	    cpu_smt_control_user == CPU_SMT_FORCE_DISABLED)
+		return;
+
+	cpu_smt_control = CPU_SMT_ENABLED;
 }
 
 static int __init smt_cmdline_disable(char *str)
-- 
2.27.0

