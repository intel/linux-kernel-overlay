From fa99585d17bfeb4a0a086ec60f0adca1cd471fad Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Wed, 5 May 2021 16:55:35 +0300
Subject: [PATCH 2/4] counter: intel-qep: Rework signal inversion code
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This turned out in review that synapse action control here is wrong. It
is not about falling and rising edge control since quadrature decoder
counts on both edges. What HW does here is actually signal inversion.

This is probably due unclear description in QEPCON register which says
falling/rising edge selection of the input signal. However elsewhere in
the specification text says "This feature is controlled by the
QEPCON.EDGEx bit, which will invert the pulse coming from the filter when
itâ€™s set to 0.". Diagram in the same chapter depicts XOR gates so it's
obvious it is about signal inversion.

Therefore remove synapse actions and implement signal inversion as
signal extension sysfs attributes with name "invert".

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/counter/intel-qep.c | 69 +++++++++++++++++--------------------
 1 file changed, 31 insertions(+), 38 deletions(-)

diff --git a/drivers/counter/intel-qep.c b/drivers/counter/intel-qep.c
index e62973fffd23..ce1826694b78 100644
--- a/drivers/counter/intel-qep.c
+++ b/drivers/counter/intel-qep.c
@@ -112,19 +112,6 @@ static void intel_qep_init(struct intel_qep *qep)
 	intel_qep_writel(qep, INTEL_QEPINT_MASK, INTEL_QEPINT_MASK_ALL);
 }
 
-enum intel_qep_synapse_action {
-	INTEL_QEP_SYNAPSE_ACTION_RISING_EDGE,
-	INTEL_QEP_SYNAPSE_ACTION_FALLING_EDGE,
-};
-
-static enum counter_synapse_action intel_qep_synapse_actions[] = {
-	[INTEL_QEP_SYNAPSE_ACTION_RISING_EDGE] =
-	COUNTER_SYNAPSE_ACTION_RISING_EDGE,
-
-	[INTEL_QEP_SYNAPSE_ACTION_FALLING_EDGE] =
-	COUNTER_SYNAPSE_ACTION_FALLING_EDGE,
-};
-
 enum intel_qep_count_function {
 	INTEL_QEP_ENCODER_MODE_NORMAL,
 	INTEL_QEP_ENCODER_MODE_SWAPPED,
@@ -197,10 +184,9 @@ static int intel_qep_function_set(struct counter_device *counter,
 	return ret;
 }
 
-static int intel_qep_action_get(struct counter_device *counter,
-				struct counter_count *count,
-				struct counter_synapse *synapse,
-				size_t *action)
+static ssize_t intel_qep_signal_invert_read(struct counter_device *counter,
+					    struct counter_signal *signal,
+					    void *priv, char *buf)
 {
 	struct intel_qep *qep = counter->priv;
 	u32 reg;
@@ -209,22 +195,23 @@ static int intel_qep_action_get(struct counter_device *counter,
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 	pm_runtime_put(qep->dev);
 
-	*action = (reg & synapse->signal->id) ?
-		INTEL_QEP_SYNAPSE_ACTION_RISING_EDGE :
-		INTEL_QEP_SYNAPSE_ACTION_FALLING_EDGE;
-
-	return 0;
+	return sysfs_emit(buf, "%u\n", !(reg & signal->id));
 }
 
-static int intel_qep_action_set(struct counter_device *counter,
-				struct counter_count *count,
-				struct counter_synapse *synapse,
-				size_t action)
+static ssize_t intel_qep_signal_invert_write(struct counter_device *counter,
+					     struct counter_signal *signal,
+					     void *priv, const char *buf,
+					     size_t len)
 {
 	struct intel_qep *qep = counter->priv;
-	int ret = 0;
+	bool invert;
+	int ret;
 	u32 reg;
 
+	ret = kstrtobool(buf, &invert);
+	if (ret < 0)
+		return ret;
+
 	mutex_lock(&qep->lock);
 	if (qep->enabled) {
 		ret = -EBUSY;
@@ -233,12 +220,13 @@ static int intel_qep_action_set(struct counter_device *counter,
 
 	pm_runtime_get_sync(qep->dev);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
-	if (action == INTEL_QEP_SYNAPSE_ACTION_RISING_EDGE)
-		reg |= synapse->signal->id;
+	if (invert == true)
+		reg &= ~signal->id;
 	else
-		reg &= ~synapse->signal->id;
+		reg |= signal->id;
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
 	pm_runtime_put(qep->dev);
+	ret = len;
 
 out:
 	mutex_unlock(&qep->lock);
@@ -250,40 +238,45 @@ static const struct counter_ops intel_qep_counter_ops = {
 
 	.function_get = intel_qep_function_get,
 	.function_set = intel_qep_function_set,
+};
 
-	.action_get = intel_qep_action_get,
-	.action_set = intel_qep_action_set,
+static const struct counter_signal_ext intel_qep_signal_ext[] = {
+	{
+		.name = "invert",
+		.read = intel_qep_signal_invert_read,
+		.write = intel_qep_signal_invert_write,
+	},
 };
 
 static struct counter_signal intel_qep_signals[] = {
 	{
 		.id = INTEL_QEPCON_EDGE_A,
 		.name = "Phase A",
+		.ext = intel_qep_signal_ext,
+		.num_ext = ARRAY_SIZE(intel_qep_signal_ext),
 	},
 	{
 		.id = INTEL_QEPCON_EDGE_B,
 		.name = "Phase B",
+		.ext = intel_qep_signal_ext,
+		.num_ext = ARRAY_SIZE(intel_qep_signal_ext),
 	},
 	{
 		.id = INTEL_QEPCON_EDGE_INDX,
 		.name = "Index",
+		.ext = intel_qep_signal_ext,
+		.num_ext = ARRAY_SIZE(intel_qep_signal_ext),
 	},
 };
 
 static struct counter_synapse intel_qep_count_synapses[] = {
 	{
-		.actions_list = intel_qep_synapse_actions,
-		.num_actions = ARRAY_SIZE(intel_qep_synapse_actions),
 		.signal = &intel_qep_signals[0],
 	},
 	{
-		.actions_list = intel_qep_synapse_actions,
-		.num_actions = ARRAY_SIZE(intel_qep_synapse_actions),
 		.signal = &intel_qep_signals[1],
 	},
 	{
-		.actions_list = intel_qep_synapse_actions,
-		.num_actions = ARRAY_SIZE(intel_qep_synapse_actions),
 		.signal = &intel_qep_signals[2],
 	},
 };
-- 
2.25.1

