From 19f628b3a9efeb4a2098d75c15af677ef4423f40 Mon Sep 17 00:00:00 2001
From: kadarlax <raghuveerx.kadarla@intel.com>
Date: Fri, 16 Apr 2021 15:06:16 +0530
Subject: [PATCH 131/170] xlink-pcie: async notification hwid fix

Changes to xlink pcie driver async notification framework:
- Fixed issue with hw device id
- Updated xdev device query in driver probe, required by flash logic.

Signed-off-by: kadarlax <raghuveerx.kadarla@intel.com>
---
 drivers/misc/xlink-pcie/remote_host/main.c | 16 ++++++-----
 drivers/misc/xlink-pcie/remote_host/pci.c  | 31 ++++++++++++++++------
 2 files changed, 33 insertions(+), 14 deletions(-)

diff --git a/drivers/misc/xlink-pcie/remote_host/main.c b/drivers/misc/xlink-pcie/remote_host/main.c
index 2fed02a4dacb..c6829902a7bb 100644
--- a/drivers/misc/xlink-pcie/remote_host/main.c
+++ b/drivers/misc/xlink-pcie/remote_host/main.c
@@ -17,6 +17,8 @@
 #define HW_ID_LO_MASK	GENMASK(7, 0)
 #define HW_ID_HI_MASK	GENMASK(15, 8)
 
+static bool driver_unload;
+
 static const struct pci_device_id xpcie_pci_table[] = {
 	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_KEEMBAY), 0 },
 #if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
@@ -120,9 +122,8 @@ static int intel_xpcie_probe(struct pci_dev *pdev,
 		return 0;
 #endif
 
-	hw_id = FIELD_PREP(HW_ID_HI_MASK, pdev->bus->number) |
-		FIELD_PREP(HW_ID_LO_MASK, PCI_SLOT(pdev->devfn));
-
+	hw_id = ((u16)pdev->bus->number << 8) |
+		 (PCI_DEVFN(PCI_SLOT(pdev->devfn), PCI_FUNC(pdev->devfn)));
 #if (!IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
 	sw_devid = FIELD_PREP(XLINK_DEV_INF_TYPE_MASK, XLINK_DEV_INF_PCIE) |
 		FIELD_PREP(XLINK_DEV_PHYS_ID_MASK, hw_id) |
@@ -132,7 +133,7 @@ static int intel_xpcie_probe(struct pci_dev *pdev,
 #else
 	sw_devid = hw_id;
 #endif
-	xdev = intel_xpcie_get_device_by_id(sw_devid);
+	xdev = intel_xpcie_get_device_by_phys_id(sw_devid);
 	if (!xdev) {
 		xdev = intel_xpcie_create_device(sw_devid, pdev);
 		if (!xdev)
@@ -162,10 +163,12 @@ static void intel_xpcie_remove(struct pci_dev *pdev)
 	if (xdev) {
 		intel_xpcie_pci_cleanup(xdev);
 		intel_xpcie_pci_notify_event(xdev, NOTIFY_DEVICE_DISCONNECTED);
+		if (driver_unload) {
 #if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
-		intel_xpcie_list_del_device(xdev);
+			intel_xpcie_list_del_device(xdev);
 #endif
-		intel_xpcie_remove_device(xdev);
+			intel_xpcie_remove_device(xdev);
+		}
 	}
 }
 
@@ -186,6 +189,7 @@ static int __init intel_xpcie_init_module(void)
 
 static void __exit intel_xpcie_exit_module(void)
 {
+	driver_unload = true;
 	pci_unregister_driver(&xpcie_driver);
 }
 
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.c b/drivers/misc/xlink-pcie/remote_host/pci.c
index bd5298be34f7..2a9eee08c09e 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.c
+++ b/drivers/misc/xlink-pcie/remote_host/pci.c
@@ -41,7 +41,7 @@ struct xpcie_dev *intel_xpcie_get_device_by_id(u32 id)
 
 	list_for_each_entry(xdev, &dev_list, list) {
 #if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
-		if (xdev->sw_devid == id) {
+		if (xdev->sw_devid == id || xdev->devid == id) {
 #else
 		if (xdev->devid == id) {
 #endif
@@ -263,6 +263,7 @@ static void xpcie_device_poll(struct work_struct *work)
 	enum xpcie_stage stage = intel_xpcie_check_magic(xdev);
 #if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
 	u8 max_functions;
+	u32 devid;
 #endif
 	if (stage == STAGE_RECOV) {
 		if (xdev->xpcie.status != XPCIE_STATUS_RECOVERY)
@@ -270,12 +271,13 @@ static void xpcie_device_poll(struct work_struct *work)
 	} else if (stage == STAGE_OS) {
 		xdev->xpcie.status = XPCIE_STATUS_READY;
 #if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
-		intel_xpcie_set_physical_device_id(&xdev->xpcie, xdev->devid);
+		devid = (PCI_BUS_NUM(xdev->devid) << 8) |
+			 PCI_SLOT(xdev->pci->devfn);
+		intel_xpcie_set_physical_device_id(&xdev->xpcie, devid);
 		max_functions = intel_xpcie_get_max_functions(&xdev->xpcie);
 		xdev->sw_devid =
 			intel_xpcie_create_sw_device_id
-			(PCI_FUNC(xdev->pci->devfn),
-			 xdev->devid, max_functions);
+			(PCI_FUNC(xdev->pci->devfn), devid, max_functions);
 		dev_info(&xdev->pci->dev,
 			 "sw_devid=%x, function idx=%d, max_functions=%d\n",
 			 xdev->sw_devid,
@@ -618,8 +620,13 @@ void intel_xpcie_pci_notify_event(struct xpcie_dev *xdev,
 	if (event_type >= NUM_EVENT_TYPE)
 		return;
 
-	if (xdev->event_fn)
+	if (xdev->event_fn) {
+		dev_info(&xdev->pci->dev,
+			 "sw_devid=0x%x, event_type=%d\n",
+			 xdev->sw_devid, event_type);
+
 		xdev->event_fn(xdev->devid, event_type);
+	}
 }
 
 #if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
@@ -648,12 +655,20 @@ struct xpcie_dev *intel_xpcie_get_device_by_phys_id(u32 phys_id)
 	struct xpcie_dev *xdev;
 
 	mutex_lock(&dev_list_mutex);
+
+	if (list_empty(&dev_list)) {
+		mutex_unlock(&dev_list_mutex);
+		return NULL;
+	}
+
 	list_for_each_entry(xdev, &dev_list, list) {
-		if (xdev->devid == phys_id)
-			break;
+		if (xdev->devid == phys_id) {
+			mutex_unlock(&dev_list_mutex);
+			return xdev;
+		}
 	}
 	mutex_unlock(&dev_list_mutex);
 
-	return xdev;
+	return NULL;
 }
 #endif
-- 
2.27.0

