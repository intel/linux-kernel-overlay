From db215f20ee85070facc4b831b8a14005196a30c1 Mon Sep 17 00:00:00 2001
From: Kan Liang <kan.liang@linux.intel.com>
Date: Fri, 12 Mar 2021 13:34:23 -0800
Subject: [PATCH 15/47] perf/x86/intel/uncore: Add Meteor Lake support

Based on the MTL_v0.2_PMON_UncoreRegsRollup.xlsx

Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
---
 arch/x86/events/intel/uncore.c     |   7 +
 arch/x86/events/intel/uncore.h     |   2 +
 arch/x86/events/intel/uncore_snb.c | 355 ++++++++++++++++++++++++++++-
 3 files changed, 363 insertions(+), 1 deletion(-)

diff --git a/arch/x86/events/intel/uncore.c b/arch/x86/events/intel/uncore.c
index 3eea5310c861..52af181c2c3a 100644
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@ -1770,6 +1770,11 @@ static const struct intel_uncore_init_fun adl_uncore_init __initconst = {
 	.mmio_init = tgl_uncore_mmio_init,
 };
 
+static const struct intel_uncore_init_fun mtl_uncore_init __initconst = {
+	.cpu_init = mtl_uncore_cpu_init,
+	.mmio_init = mtl_uncore_mmio_init,
+};
+
 static const struct intel_uncore_init_fun icx_uncore_init __initconst = {
 	.cpu_init = icx_uncore_cpu_init,
 	.pci_init = icx_uncore_pci_init,
@@ -1833,6 +1838,8 @@ static const struct x86_cpu_id intel_uncore_match[] __initconst = {
 	X86_MATCH_INTEL_FAM6_MODEL(ROCKETLAKE,		&rkl_uncore_init),
 	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE,		&adl_uncore_init),
 	X86_MATCH_INTEL_FAM6_MODEL(ALDERLAKE_L,		&adl_uncore_init),
+	X86_MATCH_INTEL_FAM6_MODEL(METEORLAKE,		&mtl_uncore_init),
+	X86_MATCH_INTEL_FAM6_MODEL(METEORLAKE_L,	&mtl_uncore_init),
 	X86_MATCH_INTEL_FAM6_MODEL(SAPPHIRERAPIDS_X,	&spr_uncore_init),
 	X86_MATCH_INTEL_FAM6_MODEL(ATOM_TREMONT_D,	&snr_uncore_init),
 	{},
diff --git a/arch/x86/events/intel/uncore.h b/arch/x86/events/intel/uncore.h
index 8606045117fc..539f75f8bf44 100644
--- a/arch/x86/events/intel/uncore.h
+++ b/arch/x86/events/intel/uncore.h
@@ -585,6 +585,8 @@ void nhm_uncore_cpu_init(void);
 void skl_uncore_cpu_init(void);
 void icl_uncore_cpu_init(void);
 void adl_uncore_cpu_init(void);
+void mtl_uncore_cpu_init(void);
+void mtl_uncore_mmio_init(void);
 void tgl_uncore_cpu_init(void);
 void tgl_uncore_mmio_init(void);
 void tgl_l_uncore_mmio_init(void);
diff --git a/arch/x86/events/intel/uncore_snb.c b/arch/x86/events/intel/uncore_snb.c
index 0f63706cdadf..fdb95e476dab 100644
--- a/arch/x86/events/intel/uncore_snb.c
+++ b/arch/x86/events/intel/uncore_snb.c
@@ -60,6 +60,7 @@
 #define PCI_DEVICE_ID_INTEL_TGL_U3_IMC		0x9a12
 #define PCI_DEVICE_ID_INTEL_TGL_U4_IMC		0x9a14
 #define PCI_DEVICE_ID_INTEL_TGL_H_IMC		0x9a36
+#define PCI_DEVICE_ID_INTEL_MTL_IMC		0x7d00
 #define PCI_DEVICE_ID_INTEL_RKL_1_IMC		0x4c43
 #define PCI_DEVICE_ID_INTEL_RKL_2_IMC		0x4c53
 #define PCI_DEVICE_ID_INTEL_ADL_1_IMC		0x4660
@@ -153,6 +154,53 @@
 #define ADL_UNC_ARB_PERFEVTSEL0			0x2FD0
 #define ADL_UNC_ARB_MSR_OFFSET			0x8
 
+/* MTL Cbo register */
+#define MTL_UNC_CBO_0_PER_CTR0			0x2448
+#define MTL_UNC_CBO_0_PERFEVTSEL0		0x2442
+
+/* MTL idp register */
+#define MTL_UNC_IDP_CTR				0x2018
+#define MTL_UNC_IDP_CTRL			0x2012
+
+/* MTL greta register */
+#define MTL_UNC_GRETA_CTR			0x2418
+#define MTL_UNC_GRETA_CTRL			0x2412
+
+/* MTL cNCU register */
+#define MTL_UNC_CNCU_CTR			0x2408
+#define MTL_UNC_CNCU_CTRL			0x2402
+
+/* MTL sNCU register */
+#define MTL_UNC_SNCU_CTR			0x2008
+#define MTL_UNC_SNCU_CTRL			0x2002
+
+/* MTL hac Cbox register */
+#define MTL_UNC_HAC_CBO_CTR			0x2048
+#define MTL_UNC_HAC_CBO_CTRL			0x2042
+
+/* MTL adm box ctl */
+#define MTL_UNC_ADM_BOX_CTL_FRZ			(1 << 0)
+#define MTL_UNC_ADM_BOX_CTL_RST_CTRL		(1 << 8)
+#define MTL_UNC_ADM_BOX_CTL_RST_CTRS		(1 << 9)
+#define MTL_UNC_ADM_BOX_CTL_INT			(MTL_UNC_ADM_BOX_CTL_RST_CTRL | \
+						 MTL_UNC_ADM_BOX_CTL_RST_CTRS)
+
+/* MTL adm pma register */
+#define MTL_UNC_ADM_PMA_CTR			0x2808
+#define MTL_UNC_ADM_PMA_CTRL			0x2802
+#define MTL_UNC_ADM_PMA_BOX_CTL			0x2800
+
+/* MTL adm afm register */
+#define MTL_UNC_ADM_AFM_CTR			0x2828
+#define MTL_UNC_ADM_AFM_CTRL			0x2822
+#define MTL_UNC_ADM_AFM_BOX_CTL			0x2820
+#define MTL_UNC_ADM_AFM_MSR_OFFSET		0x40
+
+/* MTL adm ads register */
+#define MTL_UNC_ADM_ADS_CTR			0x2838
+#define MTL_UNC_ADM_ADS_CTRL			0x2832
+#define MTL_UNC_ADM_ADS_BOX_CTL			0x2830
+
 DEFINE_UNCORE_FORMAT_ATTR(event, event, "config:0-7");
 DEFINE_UNCORE_FORMAT_ATTR(umask, umask, "config:8-15");
 DEFINE_UNCORE_FORMAT_ATTR(edge, edge, "config:18");
@@ -545,6 +593,176 @@ void adl_uncore_cpu_init(void)
 	uncore_msr_uncores = adl_msr_uncores;
 }
 
+static struct intel_uncore_ops mtl_uncore_msr_ops = {
+	.disable_event	= snb_uncore_msr_disable_event,
+	.enable_event	= snb_uncore_msr_enable_event,
+	.read_counter	= uncore_msr_read_counter,
+};
+
+static struct intel_uncore_type mtl_uncore_cbox = {
+	.name		= "cbox",
+	.num_counters   = 2,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNC_CBO_0_PER_CTR0,
+	.event_ctl	= MTL_UNC_CBO_0_PERFEVTSEL0,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.msr_offset	= SNB_UNC_CBO_MSR_OFFSET,
+	.ops		= &mtl_uncore_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type mtl_uncore_idp = {
+	.name		= "idp",
+	.num_counters   = 2,
+	.num_boxes	= 2,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNC_IDP_CTR,
+	.event_ctl	= MTL_UNC_IDP_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.msr_offset	= SNB_UNC_CBO_MSR_OFFSET,
+	.ops		= &mtl_uncore_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type mtl_uncore_greta = {
+	.name		= "greta",
+	.num_counters   = 2,
+	.num_boxes	= 2,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNC_GRETA_CTR,
+	.event_ctl	= MTL_UNC_GRETA_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.msr_offset	= SNB_UNC_CBO_MSR_OFFSET,
+	.ops		= &mtl_uncore_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type mtl_uncore_cncu = {
+	.name		= "cncu",
+	.num_counters   = 1,
+	.num_boxes	= 1,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNC_CNCU_CTR,
+	.event_ctl	= MTL_UNC_CNCU_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.ops		= &mtl_uncore_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type mtl_uncore_sncu = {
+	.name		= "sncu",
+	.num_counters   = 1,
+	.num_boxes	= 1,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNC_SNCU_CTR,
+	.event_ctl	= MTL_UNC_SNCU_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.ops		= &mtl_uncore_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type mtl_uncore_hac_cbo = {
+	.name		= "hac_cbox",
+	.num_counters   = 2,
+	.num_boxes	= 2,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNC_HAC_CBO_CTR,
+	.event_ctl	= MTL_UNC_HAC_CBO_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.msr_offset	= SNB_UNC_CBO_MSR_OFFSET,
+	.ops		= &mtl_uncore_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static void mtl_uncore_msr_init_box(struct intel_uncore_box *box)
+{
+	wrmsrl(uncore_msr_box_ctl(box), MTL_UNC_ADM_BOX_CTL_INT);
+}
+
+static void mtl_uncore_msr_disable_box(struct intel_uncore_box *box)
+{
+	wrmsrl(uncore_msr_box_ctl(box), MTL_UNC_ADM_BOX_CTL_FRZ);
+}
+
+static void mtl_uncore_msr_enable_box(struct intel_uncore_box *box)
+{
+	wrmsrl(uncore_msr_box_ctl(box), 0);
+}
+
+static struct intel_uncore_ops mtl_uncore_adm_msr_ops = {
+	.init_box	= mtl_uncore_msr_init_box,
+	.disable_box	= mtl_uncore_msr_disable_box,
+	.enable_box	= mtl_uncore_msr_enable_box,
+	.disable_event	= snb_uncore_msr_disable_event,
+	.enable_event	= snb_uncore_msr_enable_event,
+	.read_counter	= uncore_msr_read_counter,
+};
+
+static struct intel_uncore_type mtl_uncore_adm_pma = {
+	.name		= "pma",
+	.num_counters   = 1,
+	.num_boxes	= 1,
+	.perf_ctr_bits	= 48,
+	.box_ctl	= MTL_UNC_ADM_PMA_BOX_CTL,
+	.perf_ctr	= MTL_UNC_ADM_PMA_CTR,
+	.event_ctl	= MTL_UNC_ADM_PMA_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.ops		= &mtl_uncore_adm_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static unsigned mtl_ads_msr_offsets[] = {
+	0x0,  0x10, 0x40,  0x50,  0x80,  0x90,
+	0xc0, 0xf0, 0x100, 0x110, 0x140, 0x150,
+};
+
+static struct intel_uncore_type mtl_uncore_adm_afm = {
+	.name		= "afm",
+	.num_counters   = 4,
+	.num_boxes	= 6,
+	.perf_ctr_bits	= 48,
+	.box_ctl	= MTL_UNC_ADM_AFM_BOX_CTL,
+	.perf_ctr	= MTL_UNC_ADM_AFM_CTR,
+	.event_ctl	= MTL_UNC_ADM_AFM_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.msr_offset	= MTL_UNC_ADM_AFM_MSR_OFFSET,
+	.ops		= &mtl_uncore_adm_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type mtl_uncore_adm_ads = {
+	.name		= "ads",
+	.num_counters   = 4,
+	.num_boxes	= 12,
+	.perf_ctr_bits	= 48,
+	.box_ctl	= MTL_UNC_ADM_ADS_BOX_CTL,
+	.perf_ctr	= MTL_UNC_ADM_ADS_CTR,
+	.event_ctl	= MTL_UNC_ADM_ADS_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.msr_offsets	= mtl_ads_msr_offsets,
+	.ops		= &mtl_uncore_adm_msr_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+static struct intel_uncore_type *mtl_msr_uncores[] = {
+	&mtl_uncore_cbox,
+	&mtl_uncore_idp,
+	&mtl_uncore_greta,
+	&mtl_uncore_cncu,
+	&mtl_uncore_sncu,
+	&mtl_uncore_hac_cbo,
+	&mtl_uncore_adm_pma,
+	&mtl_uncore_adm_afm,
+	&mtl_uncore_adm_ads,
+	NULL,
+};
+
+void mtl_uncore_cpu_init(void)
+{
+	mtl_uncore_cbox.num_boxes = icl_get_cbox_num();
+	uncore_msr_uncores = mtl_msr_uncores;
+}
+
 enum {
 	SNB_PCI_UNCORE_IMC,
 };
@@ -1334,6 +1552,10 @@ static const struct pci_device_id tgl_uncore_pci_ids[] = {
 		PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_ADL_2_IMC),
 		.driver_data = UNCORE_PCI_DEV_DATA(SNB_PCI_UNCORE_IMC, 0),
 	},
+	{ /* IMC */
+		PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_MTL_IMC),
+		.driver_data = UNCORE_PCI_DEV_DATA(SNB_PCI_UNCORE_IMC, 0),
+	},
 	{ /* end: all zeroes */ }
 };
 
@@ -1390,7 +1612,8 @@ static struct pci_dev *tgl_uncore_get_mc_dev(void)
 #define TGL_UNCORE_MMIO_IMC_MEM_OFFSET		0x10000
 #define TGL_UNCORE_PCI_IMC_MAP_SIZE		0xe000
 
-static void tgl_uncore_imc_freerunning_init_box(struct intel_uncore_box *box)
+static void __uncore_imc_freerunning_init_box(struct intel_uncore_box *box,
+					      unsigned int base_offset)
 {
 	struct pci_dev *pdev = tgl_uncore_get_mc_dev();
 	struct intel_uncore_pmu *pmu = box->pmu;
@@ -1417,11 +1640,17 @@ static void tgl_uncore_imc_freerunning_init_box(struct intel_uncore_box *box)
 	addr |= ((resource_size_t)mch_bar << 32);
 #endif
 
+	addr += base_offset;
 	box->io_addr = ioremap(addr, type->mmio_map_size);
 	if (!box->io_addr)
 		pr_warn("perf uncore: Failed to ioremap for %s.\n", type->name);
 }
 
+static void tgl_uncore_imc_freerunning_init_box(struct intel_uncore_box *box)
+{
+	__uncore_imc_freerunning_init_box(box, 0);
+}
+
 static struct intel_uncore_ops tgl_uncore_imc_freerunning_ops = {
 	.init_box	= tgl_uncore_imc_freerunning_init_box,
 	.exit_box	= uncore_mmio_exit_box,
@@ -1469,3 +1698,127 @@ void tgl_uncore_mmio_init(void)
 }
 
 /* end of Tiger Lake MMIO uncore support */
+
+/* */
+#define MTL_UNCORE_IMC_BASE			0xd900
+#define MTL_UNCORE_IMC_MAP_SIZE			0x200
+#define MTL_UNCORE_IMC_CTR			0xe8
+#define MTL_UNCORE_IMC_CTRL			0xd0
+#define MTL_UNCORE_IMC_BOX_CTL			0xc0
+#define MTL_UNCORE_IMC_FREERUNNING_BASE		0xd800
+#define MTL_UNCORE_IMC_FREERUNNING_MAP_SIZE	0x100
+
+static void mtl_uncore_imc_init_box(struct intel_uncore_box *box)
+{
+	__uncore_imc_freerunning_init_box(box, MTL_UNCORE_IMC_BASE);
+}
+
+static void mtl_uncore_mmio_disable_box(struct intel_uncore_box *box)
+{
+	if (!box->io_addr)
+		return;
+
+	writel(MTL_UNC_ADM_BOX_CTL_FRZ, box->io_addr);
+}
+
+static void mtl_uncore_mmio_enable_box(struct intel_uncore_box *box)
+{
+	if (!box->io_addr)
+		return;
+
+	writel(0, box->io_addr);
+}
+
+static void mtl_uncore_mmio_enable_event(struct intel_uncore_box *box,
+					 struct perf_event *event)
+{
+	struct hw_perf_event *hwc = &event->hw;
+
+	if (!box->io_addr)
+		return;
+
+	writel(hwc->config, box->io_addr + hwc->config_base);
+}
+
+static void mtl_uncore_mmio_disable_event(struct intel_uncore_box *box,
+					  struct perf_event *event)
+{
+	struct hw_perf_event *hwc = &event->hw;
+
+	if (!box->io_addr)
+		return;
+
+	writel(0, box->io_addr + hwc->config_base);
+}
+
+static struct intel_uncore_ops mtl_uncore_mmio_ops = {
+	.init_box	= mtl_uncore_imc_init_box,
+	.exit_box	= uncore_mmio_exit_box,
+	.disable_box	= mtl_uncore_mmio_disable_box,
+	.enable_box	= mtl_uncore_mmio_enable_box,
+	.disable_event	= mtl_uncore_mmio_disable_event,
+	.enable_event	= mtl_uncore_mmio_enable_event,
+	.read_counter	= uncore_mmio_read_counter,
+};
+
+static struct intel_uncore_type mtl_uncore_imc = {
+	.name		= "imc",
+	.num_counters   = 4,
+	.num_boxes	= 1,
+	.perf_ctr_bits	= 48,
+	.perf_ctr	= MTL_UNCORE_IMC_CTR,
+	.event_ctl	= MTL_UNCORE_IMC_CTRL,
+	.event_mask	= ADL_UNC_RAW_EVENT_MASK,
+	.box_ctl	= MTL_UNCORE_IMC_BOX_CTL,
+	.mmio_map_size	= MTL_UNCORE_IMC_MAP_SIZE,
+	.ops		= &mtl_uncore_mmio_ops,
+	.format_group	= &adl_uncore_format_group,
+};
+
+enum perf_mtl_uncore_imc_freerunning_types {
+	MTL_MMIO_UNCORE_IMC_DATA_TOTAL,
+	MTL_MMIO_UNCORE_IMC_DATA_READ,
+	MTL_MMIO_UNCORE_IMC_DATA_WRITE,
+	MTL_MMIO_UNCORE_IMC_FREERUNNING_TYPE_MAX
+};
+
+static struct freerunning_counters mtl_uncore_imc_freerunning[] = {
+	[MTL_MMIO_UNCORE_IMC_DATA_TOTAL]	= { 0x40, 0x0, 0x0, 1, 64 },
+	[MTL_MMIO_UNCORE_IMC_DATA_READ]		= { 0x58, 0x0, 0x0, 1, 64 },
+	[MTL_MMIO_UNCORE_IMC_DATA_WRITE]	= { 0xA0, 0x0, 0x0, 1, 64 },
+};
+
+static void mtl_uncore_imc_freerunning_init_box(struct intel_uncore_box *box)
+{
+	__uncore_imc_freerunning_init_box(box, MTL_UNCORE_IMC_FREERUNNING_BASE);
+}
+
+static struct intel_uncore_ops mtl_uncore_imc_freerunning_ops = {
+	.init_box	= mtl_uncore_imc_freerunning_init_box,
+	.exit_box	= uncore_mmio_exit_box,
+	.read_counter	= uncore_mmio_read_counter,
+	.hw_config	= uncore_freerunning_hw_config,
+};
+
+static struct intel_uncore_type mtl_uncore_imc_free_running = {
+	.name			= "imc_free_running",
+	.num_counters		= 3,
+	.num_boxes		= 2,
+	.num_freerunning_types	= MTL_MMIO_UNCORE_IMC_FREERUNNING_TYPE_MAX,
+	.mmio_map_size		= MTL_UNCORE_IMC_FREERUNNING_MAP_SIZE,
+	.freerunning		= mtl_uncore_imc_freerunning,
+	.ops			= &mtl_uncore_imc_freerunning_ops,
+	.event_descs		= tgl_uncore_imc_events,
+	.format_group		= &tgl_uncore_imc_format_group,
+};
+
+static struct intel_uncore_type *mtl_mmio_uncores[] = {
+	&mtl_uncore_imc,
+	&mtl_uncore_imc_free_running,
+	NULL
+};
+
+void mtl_uncore_mmio_init(void)
+{
+	uncore_mmio_uncores = mtl_mmio_uncores;
+}
-- 
2.27.0

