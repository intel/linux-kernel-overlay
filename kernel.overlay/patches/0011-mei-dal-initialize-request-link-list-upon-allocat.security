From 5ea7056bb6f013b52cf26a910f505b05fd993c55 Mon Sep 17 00:00:00 2001
From: Tomas Winkler <tomas.winkler@intel.com>
Date: Tue, 3 Sep 2019 13:48:40 +0300
Subject: [PATCH 11/22] mei: dal: initialize request link list upon allocation

bh_request_alloc is also the initialization point,
in order to prevent any corruption during release,
it is safer to initialize the link list entry in allocation and
always delete the entry from the list during release,
than relay on zeroed memory allocation.

Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/bh_internal.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/drivers/misc/mei/dal/bh_internal.c b/drivers/misc/mei/dal/bh_internal.c
index 206bd53d836b..00ce5087c41f 100644
--- a/drivers/misc/mei/dal/bh_internal.c
+++ b/drivers/misc/mei/dal/bh_internal.c
@@ -128,6 +128,7 @@ static void bh_request_free(struct bh_request_cmd *request)
 	if (IS_ERR_OR_NULL(request))
 		return;
 
+	list_del(&request->link);
 	kfree(request->cmd);
 	kfree(request->response);
 	kfree(request);
@@ -162,6 +163,8 @@ static struct bh_request_cmd *bh_request_alloc(const void *hdr,
 		return ERR_PTR(-ENOMEM);
 	}
 
+	INIT_LIST_HEAD(&request->link);
+
 	memcpy(request->cmd, hdr, hdr_len);
 	request->cmd_len = hdr_len;
 
@@ -819,10 +822,8 @@ static void bh_request_list_free(struct list_head *request_list)
 {
 	struct bh_request_cmd *pos, *next;
 
-	list_for_each_entry_safe(pos, next, request_list, link) {
-		list_del(&pos->link);
+	list_for_each_entry_safe(pos, next, request_list, link)
 		bh_request_free(pos);
-	}
 
 	INIT_LIST_HEAD(request_list);
 }
-- 
2.32.0

