From dbe410ec35e2b77f9381590f858c773629923de4 Mon Sep 17 00:00:00 2001
From: kadarlax <raghuveerx.kadarla@intel.com>
Date: Thu, 15 Apr 2021 21:28:10 +0530
Subject: [PATCH 129/170] xlink-pcie: API to allocate DMA memory

Add API's to allocate dma_alloc_coherent memory needed by,
flash logic module.

Signed-off-by: kadarlax <raghuveerx.kadarla@intel.com>
---
 drivers/misc/xlink-pcie/remote_host/boot.c | 51 ++++++++++++++++++++++
 drivers/misc/xlink-pcie/remote_host/pci.c  | 13 ++++++
 drivers/misc/xlink-pcie/remote_host/pci.h  |  5 +++
 include/linux/mxlk_boot_inf.h              |  5 +++
 4 files changed, 74 insertions(+)

diff --git a/drivers/misc/xlink-pcie/remote_host/boot.c b/drivers/misc/xlink-pcie/remote_host/boot.c
index 4258122cb4d7..361aad2dfe15 100644
--- a/drivers/misc/xlink-pcie/remote_host/boot.c
+++ b/drivers/misc/xlink-pcie/remote_host/boot.c
@@ -170,4 +170,55 @@ int mxlk_pcie_disconnect_boot_device(u32 phys_dev_id)
 	return 0;
 }
 EXPORT_SYMBOL(mxlk_pcie_disconnect_boot_device);
+
+void *xlink_pcie_alloc_dma_memory(u32 phys_dev_id, size_t size,
+				  dma_addr_t *phys_addr)
+{
+	struct xpcie_dev *xdev =
+			intel_xpcie_get_device_by_phys_id(phys_dev_id);
+	struct device *dev = NULL;
+	void *dma_buf = NULL;
+
+	if (!xdev || !phys_addr) {
+		dev_err(&xdev->pci->dev, "Invalid input parameters\n");
+		return dma_buf;
+	}
+	dev = &xdev->pci->dev;
+
+	if (!xdev->fl_vbuf) {
+		dma_buf = dma_alloc_coherent(dev, size, phys_addr, GFP_KERNEL);
+		if (!dma_buf)
+			return dma_buf;
+
+		xdev->fl_vbuf = dma_buf;
+		xdev->fl_buf_size = size;
+		xdev->fl_phys_addr = *phys_addr;
+	}
+
+	return dma_buf;
+}
+EXPORT_SYMBOL(xlink_pcie_alloc_dma_memory);
+
+int xlink_pcie_free_dma_memory(u32 phys_dev_id, size_t size,
+			       void *dma_buf, dma_addr_t phys_addr)
+{
+	struct xpcie_dev *xdev =
+			intel_xpcie_get_device_by_phys_id(phys_dev_id);
+	struct device *dev = &xdev->pci->dev;
+
+	if (!xdev || !phys_addr) {
+		dev_err(&xdev->pci->dev, "Invalid input parameters\n");
+		return -EINVAL;
+	}
+
+	if (xdev->fl_vbuf && xdev->fl_vbuf == dma_buf) {
+		dma_free_coherent(dev, size, dma_buf, phys_addr);
+		xdev->fl_vbuf = NULL;
+		xdev->fl_buf_size = 0;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(xlink_pcie_free_dma_memory);
+
 #endif
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.c b/drivers/misc/xlink-pcie/remote_host/pci.c
index f6983d913060..5bfe99f00b28 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.c
+++ b/drivers/misc/xlink-pcie/remote_host/pci.c
@@ -375,6 +375,11 @@ int intel_xpcie_pci_init(struct xpcie_dev *xdev, struct pci_dev *pdev)
 	if (!rc)
 		goto init_exit;
 
+#if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
+	xdev->fl_vbuf = NULL;
+	xdev->fl_buf_size = 0;
+#endif
+
 error_dma_mask:
 	intel_xpcie_pci_unmap_bar(xdev);
 
@@ -407,6 +412,14 @@ int intel_xpcie_pci_cleanup(struct xpcie_dev *xdev)
 	xdev->core_irq_callback = NULL;
 	intel_xpcie_pci_irq_cleanup(xdev);
 
+#if (IS_ENABLED(CONFIG_ARCH_THUNDERBAY))
+	if (xdev->fl_vbuf) {
+		dma_free_coherent(&xdev->pci->dev, xdev->fl_buf_size,
+				  xdev->fl_vbuf, xdev->fl_phys_addr);
+		xdev->fl_vbuf = NULL;
+		xdev->fl_buf_size = 0;
+	}
+#endif
 	intel_xpcie_core_cleanup(&xdev->xpcie);
 
 	intel_xpcie_pci_unmap_bar(xdev);
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.h b/drivers/misc/xlink-pcie/remote_host/pci.h
index d0b50bcd8edb..1eb370695c27 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.h
+++ b/drivers/misc/xlink-pcie/remote_host/pci.h
@@ -54,6 +54,11 @@ struct xpcie_dev {
 	struct work_struct irq_event;
 	bool boot_dev_link;
 	mxlk_pcie_boot_event boot_notif_fn;
+
+	/* FlashLogic DMA allocation */
+	dma_addr_t fl_phys_addr;
+	void *fl_vbuf;
+	size_t fl_buf_size;
 #endif
 };
 
diff --git a/include/linux/mxlk_boot_inf.h b/include/linux/mxlk_boot_inf.h
index b38f2c1060aa..db2e386b0d0c 100644
--- a/include/linux/mxlk_boot_inf.h
+++ b/include/linux/mxlk_boot_inf.h
@@ -18,3 +18,8 @@ int mxlk_pcie_boot_mmio_write(uint32_t phys_dev_id, uint32_t offset,
 int mxlk_pcie_boot_mmio_read(uint32_t phys_dev_id, uint32_t offset,
 			     void *status, size_t size);
 int mxlk_pcie_disconnect_boot_device(uint32_t phys_dev_id);
+
+void *xlink_pcie_alloc_dma_memory(u32 phys_dev_id,
+				  size_t size, dma_addr_t *phys_addr);
+int xlink_pcie_free_dma_memory(u32 phys_dev_id, size_t size,
+			       void *dma_buf, dma_addr_t phys_addr);
-- 
2.27.0

