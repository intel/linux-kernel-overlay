From dce011e71931ea19119251dcaecb3643e06de19c Mon Sep 17 00:00:00 2001
From: sandeep singh <sandeep1.singh@intel.com>
Date: Mon, 3 May 2021 13:12:25 +0530
Subject: [PATCH 060/170] Updating Temperature Formula for DTS

updating temperature formula for DTS trimmed fuse EVT2 samples.

Signed-off-by: Sandeep Singh, <sandeep1.singh@intel.com>
---
 drivers/misc/intel_tsens/thunderbay_thermal.c | 88 +++++++++++++++----
 1 file changed, 71 insertions(+), 17 deletions(-)

diff --git a/drivers/misc/intel_tsens/thunderbay_thermal.c b/drivers/misc/intel_tsens/thunderbay_thermal.c
index a23cc6e14c3e..497fc49d5410 100644
--- a/drivers/misc/intel_tsens/thunderbay_thermal.c
+++ b/drivers/misc/intel_tsens/thunderbay_thermal.c
@@ -93,13 +93,24 @@ struct thb_thermal {
 static int thb_dt_parse;
 
 static int thb_sensor_read_temp(void __iomem *regs_val,
+				int fuse_val,
+				int board_type,
 				int offset,
 				int *temp)
 {
 	int reg_val, thb_raw_index;
-
+	int T0 = 273, T1 = 378, C0, C1,  A, B, Const = 124;
 	reg_val = ioread32(regs_val + offset);
 	reg_val = (reg_val & 0xff);
+	if ( board_type == 11 && fuse_val !=0) {
+	/* new formula  for EVT2 board*/
+	C0 = (fuse_val & 0xff);
+	C1 = (fuse_val >> 8);
+	A = ((Const)*(T0-T1)*1000000)/((C1-C0)*T0*T1);
+	B = ((Const*10000)-(A*T0*C0))/273;
+	*temp = ((((Const*10000)/((A*reg_val)+B)) - 273)*1000);
+	/* new-formula end */
+	} else {
 	thb_raw_index = reg_val - THUNDERBAY_SENSOR_BASE_TEMP;
 	if (thb_raw_index < 0)
 		reg_val = raw_thb[0];
@@ -109,7 +120,7 @@ static int thb_sensor_read_temp(void __iomem *regs_val,
 		reg_val = raw_thb[thb_raw_index];
 
 	*temp = reg_val;
-
+	}
 	return 0;
 }
 
@@ -120,72 +131,114 @@ static int thunderbay_get_temp(struct platform_device *pdev, int type, int *temp
 	spin_lock(&priv->lock);
 	switch (type) {
 	case CPUSS_SOUTH_NOC:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS0_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS0_OFFSET, temp);
 		priv->current_temp[CPUSS_SOUTH_NOC] = *temp;
 		break;
 
 	case CPUSS_NORTH_NOC:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS1_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS1_OFFSET, temp);
 		priv->current_temp[CPUSS_NORTH_NOC] = *temp;
 		break;
 
 	case PAR_VPU_0:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS0_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS0_OFFSET, temp);
 		priv->current_temp[PAR_VPU_0] = *temp;
 		break;
 
 	case PAR_VPU_1:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS0_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS0_OFFSET, temp);
 		priv->current_temp[PAR_VPU_1] = *temp;
 		break;
 
 	case PAR_VPU_2:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS0_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS0_OFFSET, temp);
 		priv->current_temp[PAR_VPU_2] = *temp;
 		break;
 
 	case PAR_VPU_3:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS0_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS0_OFFSET, temp);
 		priv->current_temp[PAR_VPU_3] = *temp;
 		break;
 
 	case PAR_MEDIA_0:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS1_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS1_OFFSET, temp);
 		priv->current_temp[PAR_MEDIA_0] = *temp;
 		break;
 
 	case PAR_MEDIA_1:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS1_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS1_OFFSET, temp);
 		priv->current_temp[PAR_MEDIA_1] = *temp;
 		break;
 
 	case PAR_MEDIA_2:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS1_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS1_OFFSET, temp);
 		priv->current_temp[PAR_MEDIA_2] = *temp;
 		break;
 
 	case PAR_MEDIA_3:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS1_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS1_OFFSET, temp);
 		priv->current_temp[PAR_MEDIA_3] = *temp;
 		break;
 
 	case NOC_VPU_DDR_0:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS2_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS2_OFFSET, temp);
 		priv->current_temp[NOC_VPU_DDR_0] = *temp;
 		break;
 
 	case NOC_VPU_DDR_1:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS2_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS2_OFFSET, temp);
 		priv->current_temp[NOC_VPU_DDR_1] = *temp;
 		break;
 
 	case NOC_VPU_DDR_2:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS2_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS2_OFFSET, temp);
 		priv->current_temp[NOC_VPU_DDR_2] = *temp;
 		break;
 
 	case NOC_VPU_DDR_3:
-		thb_sensor_read_temp(priv->base_addr, SAR_TEMP_DTS2_OFFSET, temp);
+		thb_sensor_read_temp(priv->base_addr,
+				priv->calib_off,
+				priv->board_type,
+				SAR_TEMP_DTS2_OFFSET, temp);
 		priv->current_temp[NOC_VPU_DDR_3] = *temp;
 		break;
 
@@ -799,10 +852,11 @@ static int thunderbay_thermal_probe(struct platform_device *pdev)
 	priv->plat_data = plat_data;
 	priv->s_node = plat_data->s_node;
 	priv->pdev = plat_data->pdev;
-	plat_data->get_temp = thunderbay_get_temp;
 	//thermal register config
 	if (intel_tbh_thermal_config(priv, plat_data->sensor_type))
 		dev_info(&pdev->dev, "THENDERBAY_THERMAL_CONFIGURATION_FAILED");
+	//thermal framework get_temp
+	plat_data->get_temp = thunderbay_get_temp;
 	//setting thermal_trip
 	thunderbay_thermal_trip(priv->base_addr, plat_data->sensor_type);
 	//seting iccmax and pmax default values
-- 
2.27.0

