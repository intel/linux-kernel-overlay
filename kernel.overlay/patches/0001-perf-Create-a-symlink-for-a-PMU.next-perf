From 764230d6e697f7fc797a753a42e433a6f341e003 Mon Sep 17 00:00:00 2001
From: Kan Liang <kan.liang@linux.intel.com>
Date: Tue, 27 Apr 2021 08:11:06 -0700
Subject: [PATCH 01/47] perf: Create a symlink for a PMU

Currently, a PMU has an unique name in sysfs. The name will not be
changed with kernel update. However, it is not the case for an uncore
PMU with a discovery table. For example, the same PMU could be named as
"uncore_type_1_0" in the kernel without the platform specific support,
but named as "uncore_iio_0" in a newer kernel with the support.
The script which works well on old kernel will not work anymore on the
new kernel.

To avoid the issue, a symlink should be created from the new name to the
old name.

Export bus_get_devices_kset to facilitate getting the devices_kset from
the BUS of a PMU device.

Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
---
 drivers/base/bus.c         | 6 ++++++
 include/linux/device/bus.h | 1 +
 include/linux/perf_event.h | 1 +
 kernel/events/core.c       | 9 +++++++++
 4 files changed, 17 insertions(+)

diff --git a/drivers/base/bus.c b/drivers/base/bus.c
index 36d0c654ea61..3d621a8aecea 100644
--- a/drivers/base/bus.c
+++ b/drivers/base/bus.c
@@ -899,6 +899,12 @@ struct kset *bus_get_kset(struct bus_type *bus)
 }
 EXPORT_SYMBOL_GPL(bus_get_kset);
 
+struct kset *bus_get_devices_kset(struct bus_type *bus)
+{
+	return bus->p->devices_kset;
+}
+EXPORT_SYMBOL_GPL(bus_get_devices_kset);
+
 struct klist *bus_get_device_klist(struct bus_type *bus)
 {
 	return &bus->p->klist_devices;
diff --git a/include/linux/device/bus.h b/include/linux/device/bus.h
index 1ea5e1d1545b..0ab92732c8a8 100644
--- a/include/linux/device/bus.h
+++ b/include/linux/device/bus.h
@@ -283,6 +283,7 @@ extern int bus_unregister_notifier(struct bus_type *bus,
 #define BUS_NOTIFY_DRIVER_NOT_BOUND	0x00000008 /* driver fails to be bound */
 
 extern struct kset *bus_get_kset(struct bus_type *bus);
+extern struct kset *bus_get_devices_kset(struct bus_type *bus);
 extern struct klist *bus_get_device_klist(struct bus_type *bus);
 
 #endif
diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index f5a6a2f069ed..c8a3388ab8e8 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -284,6 +284,7 @@ struct pmu {
 	const struct attribute_group	**attr_groups;
 	const struct attribute_group	**attr_update;
 	const char			*name;
+	const char			*link_name;
 	int				type;
 
 	/*
diff --git a/kernel/events/core.c b/kernel/events/core.c
index fe88d6eea3c2..c49843bccd6f 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -10977,6 +10977,15 @@ static int pmu_dev_alloc(struct pmu *pmu)
 	if (ret)
 		goto del_dev;
 
+	if (pmu->link_name) {
+		struct kset *devices_kset;
+
+		devices_kset = bus_get_devices_kset(pmu->dev->bus);
+		if (devices_kset)
+			ret = sysfs_create_link(&devices_kset->kobj,
+						&pmu->dev->kobj,
+						pmu->link_name);
+	}
 out:
 	return ret;
 
-- 
2.27.0

