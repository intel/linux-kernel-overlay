From f42d3d136f9d332140d1fa2eada38adcaea65b83 Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@intel.com>
Date: Mon, 28 Sep 2020 07:19:15 +0530
Subject: [PATCH 103/170] Cleanup to minimize ifdefs of LOCAL/REMOTE flags

Signed-off-by: Srikanth Thokala <srikanth.thokala@intel.com>
---
 drivers/misc/xlink-pcie/common/core.h       | 44 ++--------
 drivers/misc/xlink-pcie/common/if.c         | 78 +----------------
 drivers/misc/xlink-pcie/common/util.c       | 27 ++----
 drivers/misc/xlink-pcie/common/util.h       |  2 +-
 drivers/misc/xlink-pcie/local_host/Makefile |  3 +-
 drivers/misc/xlink-pcie/local_host/core.c   | 94 +++++++++++++++++++--
 drivers/misc/xlink-pcie/local_host/epf.c    |  9 +-
 drivers/misc/xlink-pcie/remote_host/main.c  |  1 +
 drivers/misc/xlink-pcie/remote_host/pci.c   | 45 +++++-----
 drivers/misc/xlink-pcie/remote_host/pci.h   |  9 --
 10 files changed, 145 insertions(+), 167 deletions(-)

diff --git a/drivers/misc/xlink-pcie/common/core.h b/drivers/misc/xlink-pcie/common/core.h
index c4c184191907..28f9e076842a 100644
--- a/drivers/misc/xlink-pcie/common/core.h
+++ b/drivers/misc/xlink-pcie/common/core.h
@@ -17,43 +17,17 @@
 
 int intel_xpcie_core_init(struct xpcie *xpcie);
 void intel_xpcie_core_cleanup(struct xpcie *xpcie);
-
-/*
- * @brief Read buffer from xpcie. Function will block when no data.
- *
- * @param[in] xpcie          - pointer to xpcie instance
- * @param[in] buffer        - pointer to buffer
- * @param[in] length        - max bytes to copy into buffer
- * @param[in] timeout_ms    - timeout in ms for blocking when no data
- *
- * @return:
- *      >=0 - number of bytes read
- *      <0  - linux error code
- *              -ETIME - timeout
- *              -EINTR - interrupted
- */
 int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer, size_t *length,
 			  u32 timeout_ms);
-
-/*
- * @brief Writes buffer to xpcie. Function will block when no buffer.
- *
- * @param[in] xpcie          - pointer to xpcie instance
- * @param[in] buffer        - pointer to buffer
- * @param[in] length        - length of buffer to copy from
- * @param[in] timeout_ms    - timeout in ms for blocking when no buffer
- *
- * @return:
- *      >=0 - number of bytes write
- *      <0  - linux error code
- *              -ETIME - timeout
- *              -EINTR - interrupted
- */
 int intel_xpcie_core_write(struct xpcie *xpcie, void *buffer, size_t *length,
 			   u32 timeout_ms);
-
-#ifdef XLINK_PCIE_LOCAL
-struct xpcie *intel_xpcie_core_get_by_id(u32 sw_device_id);
-#endif
-
+u32 intel_xpcie_get_device_num(u32 *id_list);
+struct xpcie_dev *intel_xpcie_get_device_by_id(u32 id);
+int intel_xpcie_get_device_name_by_id(u32 id, char *device_name,
+				      size_t name_size);
+int intel_xpcie_get_device_status_by_id(u32 id, u32 *status);
+int intel_xpcie_pci_connect_device(u32 id);
+int intel_xpcie_pci_read(u32 id, void *data, size_t *size, u32 timeout);
+int intel_xpcie_pci_write(u32 id, void *data, size_t *size, u32 timeout);
+int intel_xpcie_pci_reset_device(u32 id);
 #endif /* XPCIE_CORE_HEADER_ */
diff --git a/drivers/misc/xlink-pcie/common/if.c b/drivers/misc/xlink-pcie/common/if.c
index b597636551b8..45c6abed24a4 100644
--- a/drivers/misc/xlink-pcie/common/if.c
+++ b/drivers/misc/xlink-pcie/common/if.c
@@ -11,28 +11,13 @@
 #include <linux/module.h>
 #include <linux/xlink_drv_inf.h>
 
-#ifdef XLINK_PCIE_REMOTE
-#include "../remote_host/pci.h"
-#else
 #include "core.h"
-#include "../local_host/epf.h"
-#include "../local_host/struct.h"
-#endif
 
 /* Define xpcie driver interface API */
 int xlink_pcie_get_device_list(u32 *sw_device_id_list,
 			       u32 *num_devices)
 {
-#ifdef XLINK_PCIE_LOCAL
-	if (xlink_sw_id != 0) {
-		*num_devices = 1;
-		*sw_device_id_list = xlink_sw_id;
-	} else {
-		*num_devices = 0;
-	}
-#else
 	*num_devices = intel_xpcie_get_device_num(sw_device_id_list);
-#endif
 
 	return 0;
 }
@@ -41,43 +26,20 @@ EXPORT_SYMBOL(xlink_pcie_get_device_list);
 int xlink_pcie_get_device_name(u32 sw_device_id, char *device_name,
 			       size_t name_size)
 {
-#ifdef XLINK_PCIE_LOCAL
-	struct xpcie *xpcie = intel_xpcie_core_get_by_id(sw_device_id);
-
-	if (!xpcie)
-		return -ENODEV;
-
-	memset(device_name, 0, name_size);
-	if (name_size > strlen(XPCIE_DRIVER_NAME))
-		name_size = strlen(XPCIE_DRIVER_NAME);
-	strncpy(device_name, XPCIE_DRIVER_NAME, name_size);
-
-	return 0;
-#else
 	return intel_xpcie_get_device_name_by_id(sw_device_id,
 						 device_name, name_size);
-#endif
 }
 EXPORT_SYMBOL(xlink_pcie_get_device_name);
 
 int xlink_pcie_get_device_status(u32 sw_device_id, u32 *device_status)
 {
-	u32 status;
-
-#ifdef XLINK_PCIE_LOCAL
-	struct xpcie *xpcie = intel_xpcie_core_get_by_id(sw_device_id);
-
-	if (!xpcie)
-		return -ENODEV;
-
-	status = xpcie->status;
-#else
 	int rc;
+	u32 status;
 
 	rc = intel_xpcie_get_device_status_by_id(sw_device_id, &status);
 	if (rc)
 		return rc;
-#endif
+
 	switch (status) {
 	case XPCIE_STATUS_READY:
 	case XPCIE_STATUS_RUN:
@@ -109,60 +71,26 @@ EXPORT_SYMBOL(xlink_pcie_boot_device);
 
 int xlink_pcie_connect(u32 sw_device_id)
 {
-#ifdef XLINK_PCIE_LOCAL
-	struct xpcie *xpcie = intel_xpcie_core_get_by_id(sw_device_id);
-
-	if (!xpcie)
-		return -ENODEV;
-
-	if (xpcie->status != XPCIE_STATUS_RUN)
-		return -EIO;
-
-	return 0;
-#else
 	return intel_xpcie_pci_connect_device(sw_device_id);
-#endif
 }
 EXPORT_SYMBOL(xlink_pcie_connect);
 
 int xlink_pcie_read(u32 sw_device_id, void *data, size_t *const size,
 		    u32 timeout)
 {
-#ifdef XLINK_PCIE_LOCAL
-	struct xpcie *xpcie = intel_xpcie_core_get_by_id(sw_device_id);
-
-	if (!xpcie)
-		return -ENODEV;
-
-	return intel_xpcie_core_read(xpcie, data, size, timeout);
-#else
 	return intel_xpcie_pci_read(sw_device_id, data, size, timeout);
-#endif
 }
 EXPORT_SYMBOL(xlink_pcie_read);
 
 int xlink_pcie_write(u32 sw_device_id, void *data, size_t *const size,
 		     u32 timeout)
 {
-#ifdef XLINK_PCIE_LOCAL
-	struct xpcie *xpcie = intel_xpcie_core_get_by_id(sw_device_id);
-
-	if (!xpcie)
-		return -ENODEV;
-
-	return intel_xpcie_core_write(xpcie, data, size, timeout);
-#else
 	return intel_xpcie_pci_write(sw_device_id, data, size, timeout);
-#endif
 }
 EXPORT_SYMBOL(xlink_pcie_write);
 
 int xlink_pcie_reset_device(u32 sw_device_id)
 {
-	int ret = 0;
-#ifdef XLINK_PCIE_REMOTE
-	ret = intel_xpcie_pci_reset_device(sw_device_id);
-#endif
-	return ret;
+	return intel_xpcie_pci_reset_device(sw_device_id);
 }
 EXPORT_SYMBOL(xlink_pcie_reset_device);
diff --git a/drivers/misc/xlink-pcie/common/util.c b/drivers/misc/xlink-pcie/common/util.c
index 87ea700c82a6..5f513371b60f 100644
--- a/drivers/misc/xlink-pcie/common/util.c
+++ b/drivers/misc/xlink-pcie/common/util.c
@@ -347,17 +347,13 @@ void intel_xpcie_add_bd_to_interface(struct xpcie *xpcie,
 static ssize_t debug_show(struct device *dev, struct device_attribute *attr,
 			  char *buf)
 {
-#ifdef XLINK_PCIE_LOCAL
-	struct pci_epf *epf = container_of(dev, struct pci_epf, dev);
-	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
-	struct xpcie *xpcie = &xpcie_epf->xpcie;
-#else
-	struct pci_dev *pdev = container_of(dev, struct pci_dev, dev);
-	struct xpcie_dev *xdev = pci_get_drvdata(pdev);
-	struct xpcie *xpcie = &xdev->xpcie;
-#endif
+	struct xpcie *xpcie;
 	size_t bytes, tx_list_num, rx_list_num, tx_pool_num, rx_pool_num;
 
+	xpcie = intel_xpcie_dev_to_xpcie(dev);
+	if (!xpcie)
+		return -EINVAL;
+
 	if (!xpcie->debug_enable)
 		return 0;
 
@@ -392,16 +388,11 @@ static ssize_t debug_store(struct device *dev, struct device_attribute *attr,
 {
 	long value;
 	int rc;
+	struct xpcie *xpcie;
 
-#ifdef XLINK_PCIE_LOCAL
-	struct pci_epf *epf = container_of(dev, struct pci_epf, dev);
-	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
-	struct xpcie *xpcie = &xpcie_epf->xpcie;
-#else
-	struct pci_dev *pdev = container_of(dev, struct pci_dev, dev);
-	struct xpcie_dev *xdev = pci_get_drvdata(pdev);
-	struct xpcie *xpcie = &xdev->xpcie;
-#endif
+	xpcie = intel_xpcie_dev_to_xpcie(dev);
+	if (!xpcie)
+		return -EINVAL;
 
 	rc = kstrtol(buf, 10, &value);
 	if (rc)
diff --git a/drivers/misc/xlink-pcie/common/util.h b/drivers/misc/xlink-pcie/common/util.h
index 663ca0ec4b91..db715279b2ce 100644
--- a/drivers/misc/xlink-pcie/common/util.h
+++ b/drivers/misc/xlink-pcie/common/util.h
@@ -70,5 +70,5 @@ void intel_xpcie_add_bd_to_interface(struct xpcie *xpcie,
 void intel_xpcie_init_debug(struct xpcie *xpcie, struct device *dev);
 void intel_xpcie_uninit_debug(struct xpcie *xpcie, struct device *dev);
 void intel_xpcie_debug_incr(struct xpcie *xpcie, size_t *attr, size_t v);
-
+struct xpcie *intel_xpcie_dev_to_xpcie(struct device *dev);
 #endif /* XPCIE_UTIL_HEADER_ */
diff --git a/drivers/misc/xlink-pcie/local_host/Makefile b/drivers/misc/xlink-pcie/local_host/Makefile
index b56c7b7fc1af..813db8b14b10 100644
--- a/drivers/misc/xlink-pcie/local_host/Makefile
+++ b/drivers/misc/xlink-pcie/local_host/Makefile
@@ -1,5 +1,4 @@
-ccflags-y += -Wall -Wno-unused-function -Werror -DXLINK_PCIE_LOCAL=1
-ccflags-y += -I$(srctree)/drivers/pci/controller/dwc
+ccflags-y += -Wall -Wno-unused-function -Werror
 
 obj-$(CONFIG_XLINK_PCIE_LH_DRIVER) += mxlk_ep.o
 mxlk_ep-objs := epf.o
diff --git a/drivers/misc/xlink-pcie/local_host/core.c b/drivers/misc/xlink-pcie/local_host/core.c
index fe5214c7c43e..33f7a7d1dfab 100644
--- a/drivers/misc/xlink-pcie/local_host/core.c
+++ b/drivers/misc/xlink-pcie/local_host/core.c
@@ -41,6 +41,11 @@ module_param(rx_pool_coherent, bool, 0664);
 MODULE_PARM_DESC(rx_pool_coherent,
 		 "receiving pool using coherent memory (default false)");
 
+static struct xpcie *intel_xpcie_core_get_by_id(u32 sw_device_id)
+{
+	return (sw_device_id == xlink_sw_id) ? global_xpcie : NULL;
+}
+
 static int intel_xpcie_map_dma(struct xpcie *xpcie, struct xpcie_buf_desc *bd,
 			       int direction)
 {
@@ -656,8 +661,8 @@ void intel_xpcie_core_cleanup(struct xpcie *xpcie)
 	intel_xpcie_uninit_debug(xpcie, &xpcie_epf->epf->dev);
 }
 
-int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer, size_t *length,
-			  u32 timeout_ms)
+int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer,
+			  size_t *length, u32 timeout_ms)
 {
 	int ret = 0;
 	struct xpcie_interface *inf = &xpcie->interfaces[0];
@@ -746,8 +751,8 @@ int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer, size_t *length,
 	return 0;
 }
 
-int intel_xpcie_core_write(struct xpcie *xpcie, void *buffer, size_t *length,
-			   u32 timeout_ms)
+int intel_xpcie_core_write(struct xpcie *xpcie, void *buffer,
+			   size_t *length, u32 timeout_ms)
 {
 	int ret;
 	size_t len = *length;
@@ -838,7 +843,84 @@ int intel_xpcie_core_write(struct xpcie *xpcie, void *buffer, size_t *length,
 	return 0;
 }
 
-struct xpcie *intel_xpcie_core_get_by_id(u32 sw_device_id)
+int intel_xpcie_get_device_status_by_id(u32 id, u32 *status)
 {
-	return (sw_device_id == xlink_sw_id) ? global_xpcie : NULL;
+	struct xpcie *xpcie = intel_xpcie_core_get_by_id(id);
+
+	if (!xpcie)
+		return -ENODEV;
+
+	*status = xpcie->status;
+
+	return 0;
+}
+
+u32 intel_xpcie_get_device_num(u32 *id_list)
+{
+	u32 num_devices = 0;
+
+	if (xlink_sw_id) {
+		num_devices = 1;
+		*id_list = xlink_sw_id;
+	}
+
+	return num_devices;
+}
+
+int intel_xpcie_get_device_name_by_id(u32 id,
+				      char *device_name, size_t name_size)
+{
+	struct xpcie *xpcie;
+
+	xpcie = intel_xpcie_core_get_by_id(id);
+	if (!xpcie)
+		return -ENODEV;
+
+	memset(device_name, 0, name_size);
+	if (name_size > strlen(XPCIE_DRIVER_NAME))
+		name_size = strlen(XPCIE_DRIVER_NAME);
+	strncpy(device_name, XPCIE_DRIVER_NAME, name_size);
+
+	return 0;
+}
+
+int intel_xpcie_pci_connect_device(u32 id)
+{
+	struct xpcie *xpcie;
+
+	xpcie = intel_xpcie_core_get_by_id(id);
+	if (!xpcie)
+		return -ENODEV;
+
+	if (xpcie->status != XPCIE_STATUS_RUN)
+		return -EIO;
+
+	return 0;
+}
+
+int intel_xpcie_pci_read(u32 id, void *data, size_t *size, u32 timeout)
+{
+	struct xpcie *xpcie;
+
+	xpcie = intel_xpcie_core_get_by_id(id);
+	if (!xpcie)
+		return -ENODEV;
+
+	return intel_xpcie_core_read(xpcie, data, size, timeout);
+}
+
+int intel_xpcie_pci_write(u32 id, void *data, size_t *size, u32 timeout)
+{
+	struct xpcie *xpcie;
+
+	xpcie = intel_xpcie_core_get_by_id(id);
+	if (!xpcie)
+		return -ENODEV;
+
+	return intel_xpcie_core_write(xpcie, data, size, timeout);
+}
+
+int intel_xpcie_pci_reset_device(u32 id)
+{
+	return 0;
 }
diff --git a/drivers/misc/xlink-pcie/local_host/epf.c b/drivers/misc/xlink-pcie/local_host/epf.c
index 219b50ef9a26..f0570f9cf46b 100644
--- a/drivers/misc/xlink-pcie/local_host/epf.c
+++ b/drivers/misc/xlink-pcie/local_host/epf.c
@@ -170,6 +170,14 @@ int intel_xpcie_copy_to_host_ll(struct xpcie *xpcie, int chan, int descs_num)
 	return intel_xpcie_ep_dma_write_ll(epf, chan, descs_num);
 }
 
+struct xpcie *intel_xpcie_dev_to_xpcie(struct device *dev)
+{
+	struct pci_epf *epf = container_of(dev, struct pci_epf, dev);
+	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
+
+	return &xpcie_epf->xpcie;
+}
+
 static int intel_xpcie_check_bar(struct pci_epf *epf,
 				 struct pci_epf_bar *epf_bar,
 				 enum pci_barno barno,
@@ -437,7 +445,6 @@ static int intel_xpcie_epf_bind(struct pci_epf *epf)
 		goto bind_error;
 	}
 
-	dev_info(&epf->dev, "xlink_sw_id 0x%x\n", xlink_sw_id);
 	/* Enable interrupt */
 	writel(LBC_CII_EVENT_FLAG,
 	       xpcie_epf->apb_base + PCIE_REGS_PCIE_INTR_ENABLE);
diff --git a/drivers/misc/xlink-pcie/remote_host/main.c b/drivers/misc/xlink-pcie/remote_host/main.c
index 67e2e90313a6..3a5f7054062a 100644
--- a/drivers/misc/xlink-pcie/remote_host/main.c
+++ b/drivers/misc/xlink-pcie/remote_host/main.c
@@ -8,6 +8,7 @@
  ****************************************************************************/
 
 #include "pci.h"
+#include "../common/core.h"
 
 static const struct pci_device_id xpcie_pci_table[] = {
 	{ PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_KEEMBAY), 0 },
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.c b/drivers/misc/xlink-pcie/remote_host/pci.c
index e63e57b629a7..0d3cadc3e90f 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.c
+++ b/drivers/misc/xlink-pcie/remote_host/pci.c
@@ -92,6 +92,14 @@ void intel_xpcie_list_del_device(struct xpcie_dev *xdev)
 	mutex_unlock(&dev_list_mutex);
 }
 
+struct xpcie *intel_xpcie_dev_to_xpcie(struct device *dev)
+{
+	struct pci_dev *pdev = container_of(dev, struct pci_dev, dev);
+	struct xpcie_dev *xdev = pci_get_drvdata(pdev);
+
+	return &xdev->xpcie;
+}
+
 static void intel_xpcie_pci_set_aspm(struct xpcie_dev *xdev, int aspm)
 {
 	u8 cap_exp;
@@ -219,7 +227,23 @@ static void xpcie_device_poll(struct work_struct *work)
 }
 
 static int intel_xpcie_pci_prepare_dev_reset(struct xpcie_dev *xdev,
-					     bool notify);
+					     bool notify)
+{
+	if (mutex_lock_interruptible(&xdev->lock))
+		return -EINTR;
+
+	if (xdev->core_irq_callback) {
+		xdev->core_irq_callback = NULL;
+		intel_xpcie_core_cleanup(&xdev->xpcie);
+	}
+	xdev->xpcie.status = XPCIE_STATUS_OFF;
+	if (notify)
+		intel_xpcie_pci_raise_irq(xdev, DEV_EVENT, REQUEST_RESET);
+
+	mutex_unlock(&xdev->lock);
+
+	return 0;
+}
 
 static void xpcie_device_shutdown(struct work_struct *work)
 {
@@ -474,25 +498,6 @@ int intel_xpcie_pci_write(u32 id, void *data, size_t *size, u32 timeout)
 	return intel_xpcie_core_write(&xdev->xpcie, data, size, timeout);
 }
 
-static int intel_xpcie_pci_prepare_dev_reset(struct xpcie_dev *xdev,
-					     bool notify)
-{
-	if (mutex_lock_interruptible(&xdev->lock))
-		return -EINTR;
-
-	if (xdev->core_irq_callback) {
-		xdev->core_irq_callback = NULL;
-		intel_xpcie_core_cleanup(&xdev->xpcie);
-	}
-	xdev->xpcie.status = XPCIE_STATUS_OFF;
-	if (notify)
-		intel_xpcie_pci_raise_irq(xdev, DEV_EVENT, REQUEST_RESET);
-
-	mutex_unlock(&xdev->lock);
-
-	return 0;
-}
-
 int intel_xpcie_pci_reset_device(u32 id)
 {
 	struct xpcie_dev *xdev = intel_xpcie_get_device_by_id(id);
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.h b/drivers/misc/xlink-pcie/remote_host/pci.h
index 1529f923acc7..54cc63f13304 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.h
+++ b/drivers/misc/xlink-pcie/remote_host/pci.h
@@ -59,13 +59,4 @@ struct xpcie_dev *intel_xpcie_create_device(u32 sw_device_id,
 void intel_xpcie_remove_device(struct xpcie_dev *xdev);
 void intel_xpcie_list_add_device(struct xpcie_dev *xdev);
 void intel_xpcie_list_del_device(struct xpcie_dev *xdev);
-u32 intel_xpcie_get_device_num(u32 *id_list);
-struct xpcie_dev *intel_xpcie_get_device_by_id(u32 id);
-int intel_xpcie_get_device_name_by_id(u32 id, char *device_name,
-				      size_t name_size);
-int intel_xpcie_get_device_status_by_id(u32 id, u32 *status);
-int intel_xpcie_pci_connect_device(u32 id);
-int intel_xpcie_pci_read(u32 id, void *data, size_t *size, u32 timeout);
-int intel_xpcie_pci_write(u32 id, void *data, size_t *size, u32 timeout);
-int intel_xpcie_pci_reset_device(u32 id);
 #endif /* XPCIE_PCI_HEADER_ */
-- 
2.27.0

