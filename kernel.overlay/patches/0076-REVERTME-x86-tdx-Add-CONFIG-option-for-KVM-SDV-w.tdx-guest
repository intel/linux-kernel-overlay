From a7f0baf1459a3c4d17373b381b1a97e4a3906aa6 Mon Sep 17 00:00:00 2001
From: Andi Kleen <ak@linux.intel.com>
Date: Fri, 23 Apr 2021 20:34:54 -0700
Subject: [PATCH 76/78] [REVERTME] x86/tdx: Add CONFIG option for KVM SDV
 workarounds

Shared memory seems to be broken in the KVM SDV, but since we
don't need it there just don't set the attribute.

Also the SDV injects #VE for MSR reads, which breaks the early
boot that tries to read MISC_ENABLES. Skip that check because
it's not needed.

Also enable debug mode with SDV
---
 arch/x86/Kconfig             | 4 ++++
 arch/x86/kernel/tdx.c        | 7 +++++++
 arch/x86/kernel/verify_cpu.S | 8 ++++++++
 3 files changed, 19 insertions(+)

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 16f366fb14c2..8b258521e652 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -899,6 +899,10 @@ config INTEL_TDX_GUEST_KVM
 	def_bool y
 	depends on KVM_GUEST && INTEL_TDX_GUEST
 
+config INTEL_TDX_KVM_SDV
+	bool "Fixes specific to KVM SDV (incompatible to others)"
+	depends on INTEL_TDX_GUEST
+
 config INTEL_TDX_ICL_FIXES
 	bool "Fixes specific for ICL chip"
 	depends on INTEL_TDX_GUEST
diff --git a/arch/x86/kernel/tdx.c b/arch/x86/kernel/tdx.c
index 5fa34c742eb1..16fc4f96ae28 100644
--- a/arch/x86/kernel/tdx.c
+++ b/arch/x86/kernel/tdx.c
@@ -160,11 +160,18 @@ EXPORT_SYMBOL_GPL(tdx_protected_guest_has);
 /* The highest bit of a guest physical address is the "sharing" bit */
 phys_addr_t tdg_shared_mask(void)
 {
+#ifdef CONFIG_INTEL_TDX_KVM_SDV
+	return 0;
+#else
 	return 1ULL << (td_info.gpa_width - 1);
+#endif
 }
 
 bool tdg_debug_enabled(void)
 {
+#ifdef CONFIG_INTEL_TDX_KVM_SDV
+	return true;
+#endif
 	return td_info.attributes & BIT(0);
 }
 
diff --git a/arch/x86/kernel/verify_cpu.S b/arch/x86/kernel/verify_cpu.S
index 641f0fe1e5b4..636ee67b23f6 100644
--- a/arch/x86/kernel/verify_cpu.S
+++ b/arch/x86/kernel/verify_cpu.S
@@ -62,7 +62,13 @@ SYM_FUNC_START_LOCAL(verify_cpu)
 	cmpl	$0x444d4163,%ecx
 	jnz	.Lverify_cpu_noamd
 	mov	$1,%di			# cpu is from AMD
+#ifdef CONFIG_INTEL_TDX_KVM_SDV
+	/* The KVM SDV currently injects a #VE on accessing
+	 * MISC_ENABLE, which we cannot handle here. Just
+	 * skip it, since XD_DISABLE is never set.
+	 */
 	jmp	.Lverify_cpu_check
+#endif
 
 .Lverify_cpu_noamd:
 	cmpl	$0x756e6547,%ebx        # GenuineIntel?
@@ -72,6 +78,8 @@ SYM_FUNC_START_LOCAL(verify_cpu)
 	cmpl	$0x6c65746e,%ecx
 	jnz	.Lverify_cpu_check
 
+	jmp	.Lverify_cpu_check
+
 	# only call IA32_MISC_ENABLE when:
 	# family > 6 || (family == 6 && model >= 0xd)
 	movl	$0x1, %eax		# check CPU family and model
-- 
2.27.0

