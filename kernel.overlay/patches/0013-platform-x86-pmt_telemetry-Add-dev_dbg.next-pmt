From 07fbe67b613cc47491fe363138f6c82802884454 Mon Sep 17 00:00:00 2001
From: "David E. Box" <david.e.box@linux.intel.com>
Date: Wed, 16 Dec 2020 11:46:42 -0800
Subject: [PATCH 13/16] platform/x86: pmt_telemetry: Add dev_dbg

Signed-off-by: David E. Box <david.e.box@linux.intel.com>
---
 drivers/platform/x86/intel_pmt_class.c     |  8 ++++++++
 drivers/platform/x86/intel_pmt_telemetry.c | 14 ++++++++++++--
 2 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/drivers/platform/x86/intel_pmt_class.c b/drivers/platform/x86/intel_pmt_class.c
index 8769d09ab437..0262099d4a9c 100644
--- a/drivers/platform/x86/intel_pmt_class.c
+++ b/drivers/platform/x86/intel_pmt_class.c
@@ -197,6 +197,7 @@ int intel_pmt_populate_entry(struct intel_pmt_entry *entry,
 				return -EINVAL;
 		}
 
+		dev_dbg(dev, "LOCAL base address 0x%lx\b", entry->base_addr);
 		break;
 	case ACCESS_BARID:
 		/*
@@ -206,6 +207,8 @@ int intel_pmt_populate_entry(struct intel_pmt_entry *entry,
 		 */
 		entry->base_addr = pci_resource_start(pci_dev, bir) +
 				   GET_ADDRESS(header->base_offset);
+
+		dev_dbg(dev, "BARID base address 0x%lx\b", entry->base_addr);
 		break;
 	default:
 		dev_err(dev, "Unsupported access type %d\n",
@@ -232,6 +235,8 @@ static int intel_pmt_dev_register(struct intel_pmt_entry *entry,
 	if (ret)
 		return ret;
 
+	dev_dbg(parent, "%s: Create %s%d\n", __func__, ns->name, entry->devid);
+
 	dev = device_create(&intel_pmt_class, parent, MKDEV(0, 0), entry,
 			    "%s%d", ns->name, entry->devid);
 
@@ -259,12 +264,15 @@ static int intel_pmt_dev_register(struct intel_pmt_entry *entry,
 	res.flags = IORESOURCE_MEM;
 	res.name = NULL;
 
+	dev_dbg(parent, "%s: Mapping resource %pr\n", __func__, &res);
+
 	entry->base = devm_ioremap_resource(dev, &res);
 	if (IS_ERR(entry->base)) {
 		ret = PTR_ERR(entry->base);
 		goto fail_ioremap;
 	}
 
+	dev_dbg(parent, "%s: Base mapped to %px\n", __func__, entry->base);
 	sysfs_bin_attr_init(&entry->pmt_bin_attr);
 	entry->pmt_bin_attr.attr.name = ns->name;
 	entry->pmt_bin_attr.attr.mode = 0440;
diff --git a/drivers/platform/x86/intel_pmt_telemetry.c b/drivers/platform/x86/intel_pmt_telemetry.c
index 93628708efde..06db74829aad 100644
--- a/drivers/platform/x86/intel_pmt_telemetry.c
+++ b/drivers/platform/x86/intel_pmt_telemetry.c
@@ -96,8 +96,10 @@ static void pmt_telem_ep_release(struct kref *kref)
 {
 	struct telem_endpoint *ep;
 
+	pr_debug("%s: begin release kref\n", __func__);
 	ep = container_of(kref, struct telem_endpoint, kref);
 	kfree(ep);
+	pr_debug("%s: end release kref for %px\n", __func__, ep);
 }
 
 /*
@@ -137,6 +139,7 @@ struct telem_endpoint *pmt_telem_register_endpoint(int devid)
 
 	kref_get(&entry->ep->kref);
 
+	pr_debug("%s: kref for [%px] is now %d\n", __func__, entry, kref_read(&entry->ep->kref));
 	mutex_unlock(&list_lock);
 
 	return entry->ep;
@@ -146,6 +149,7 @@ EXPORT_SYMBOL_GPL(pmt_telem_register_endpoint);
 void pmt_telem_unregister_endpoint(struct telem_endpoint *ep)
 {
 	kref_put(&ep->kref, pmt_telem_ep_release);
+	pr_debug("%s: kref for [%px] is now %d\n", __func__, ep, kref_read(&ep->kref));
 }
 EXPORT_SYMBOL(pmt_telem_unregister_endpoint);
 
@@ -190,8 +194,8 @@ pmt_telem_read(struct telem_endpoint *ep, u32 id, u64 *data, u32 count)
 	if ((offset + NUM_BYTES_QWORD(count)) > size)
 		return -EINVAL;
 
-	pr_debug("%s: Reading id %d, offset 0x%x, count %d\n",
-	       __func__, id, SAMPLE_ID_OFFSET(id), count);
+	pr_debug("%s: Reading id %d, offset 0x%x, count %d, base %px\n",
+	       __func__, id, SAMPLE_ID_OFFSET(id), count, ep->base);
 	memcpy_fromio(data, ep->base + offset, NUM_BYTES_QWORD(count));
 
 	return ep->present ? 0 : -EPIPE;
@@ -245,11 +249,14 @@ static int pmt_telem_remove(struct platform_device *pdev)
 	struct intel_pmt_entry *entry;
 	int i;
 
+	dev_dbg(&pdev->dev, "%s\n", __func__);
+
 	for (i = 0, entry = priv->entry; i < priv->num_entries; i++, entry++) {
 		blocking_notifier_call_chain(&telem_notifier,
 					     PMT_TELEM_NOTIFY_REMOVE,
 					     &entry->devid);
 		kref_put(&priv->entry[i].ep->kref, pmt_telem_ep_release);
+		dev_dbg(&pdev->dev, "kref count of ep #%d [%px] is %d\n", i, entry->ep, kref_read(&entry->ep->kref));
 		intel_pmt_dev_destroy(&priv->entry[i], &pmt_telem_ns);
 	}
 
@@ -271,6 +278,7 @@ static int pmt_telem_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, priv);
 
 	for (i = 0, entry = priv->entry; i < pdev->num_resources; i++, entry++) {
+		dev_dbg(&pdev->dev, "Getting resource %d\n", i);
 		ret = intel_pmt_dev_create(entry, &pmt_telem_ns, pdev, i);
 		if (ret < 0)
 			goto abort_probe;
@@ -285,6 +293,8 @@ static int pmt_telem_probe(struct platform_device *pdev)
 		ret = pmt_telem_add_endpoint(&pdev->dev, priv, entry);
 		if (ret)
 			goto abort_probe;
+
+		dev_dbg(&pdev->dev, "kref count of ep #%d [%px] is %d\n", i, entry->ep, kref_read(&entry->ep->kref));
 	}
 
 	for (i = 0, entry = priv->entry; i < priv->num_entries; i++, entry++)
-- 
2.27.0

