From 6fd63924fe1e6bb095e3d09d4a550a2b9e94221b Mon Sep 17 00:00:00 2001
From: sandeep singh <sandeep1.singh@intel.com>
Date: Sat, 28 Nov 2020 14:18:00 +0530
Subject: [PATCH 051/170] THB-Hybrid-Throttling-using-PID

Adding Hybrid throttling sw feature for THB

Signed-off-by: sandeep singh <sandeep1.singh@intel.com>
---
 drivers/misc/intel_tsens/Kconfig              |   2 +-
 .../misc/intel_tsens/intel_tsens_thermal.c    |   7 +-
 .../misc/intel_tsens/intel_tsens_thermal.h    |   2 +
 drivers/misc/intel_tsens/thunderbay_thermal.c | 412 +++++++++++++++++-
 drivers/misc/intel_tsens/thunderbay_tsens.h   |  41 ++
 5 files changed, 461 insertions(+), 3 deletions(-)

diff --git a/drivers/misc/intel_tsens/Kconfig b/drivers/misc/intel_tsens/Kconfig
index 261eccb435c0..debbfc072f50 100644
--- a/drivers/misc/intel_tsens/Kconfig
+++ b/drivers/misc/intel_tsens/Kconfig
@@ -55,7 +55,7 @@ config INTEL_TSENS_IA_HOST
 	  Keem Bay.  If unsure, say N.
 
 config THUNDERBAY_THERMAL
-	tristate "Temperature sensor driver for intel keembay"
+	tristate "Temperature sensor driver for intel thunderbay"
 	depends on INTEL_TSENS_LOCAL_HOST
 	help
 	  Enable this option if you want to have support for thunderbay
diff --git a/drivers/misc/intel_tsens/intel_tsens_thermal.c b/drivers/misc/intel_tsens/intel_tsens_thermal.c
index cfedb02eac14..346bc0cb68dc 100644
--- a/drivers/misc/intel_tsens/intel_tsens_thermal.c
+++ b/drivers/misc/intel_tsens/intel_tsens_thermal.c
@@ -52,6 +52,7 @@ struct intel_tsens_priv {
 	struct device *dev;
 	struct platform_device *pdev;
 	struct intel_tsens_plat_info plat_info;
+	struct device_node *pid_node;
 };
 
 struct intel_iccmax {
@@ -91,6 +92,7 @@ char reg_data[len];
 
 static int g_nsens;
 static struct intel_tsens **g_intel_tsens;
+
 static int intel_tsens_register_pdev(struct intel_tsens_plat_info *plat_info)
 {
 	struct intel_tsens_plat_data plat_data;
@@ -103,6 +105,7 @@ static int intel_tsens_register_pdev(struct intel_tsens_plat_info *plat_info)
 	plat_data.base_addr = plat_info->base_addr;
 	plat_data.name = plat_info->plat_name;
 	plat_data.get_temp = NULL;
+	plat_data.s_node = plat_info->s_node;
 	pdevinfo.data = &plat_data;
 	pdevinfo.size_data = sizeof(plat_data);
 	dd = platform_device_register_full(&pdevinfo);
@@ -133,6 +136,7 @@ static int intel_tsens_add_pdev(struct intel_tsens_priv *priv)
 	 */
 	if (priv->plat_info.plat_name) {
 		priv->plat_info.base_addr = priv->base_addr;
+		priv->plat_info.s_node = priv->pid_node;
 		ret = intel_tsens_register_pdev(&priv->plat_info);
 		if (ret) {
 			dev_err(&priv->pdev->dev,
@@ -147,6 +151,7 @@ static int intel_tsens_add_pdev(struct intel_tsens_priv *priv)
 		if (!tsens->plat_info.plat_name)
 			continue;
 		tsens->plat_info.base_addr = tsens->base_addr;
+		tsens->plat_info.s_node = priv->pid_node;
 		ret = intel_tsens_register_pdev(&tsens->plat_info);
 		if (ret) {
 			dev_err(&priv->pdev->dev,
@@ -387,7 +392,6 @@ static int intel_tsens_config_sensors(struct device_node *s_node,
 			trip_info->trip_type = THERMAL_TRIP_ACTIVE;
 		tsens->trip_info[i] = trip_info;
 	}
-
 	return 0;
 }
 
@@ -647,6 +651,7 @@ static int intel_tsens_config_dt(struct intel_tsens_priv *priv)
 	struct resource *res;
 	int i = 0, ret;
 
+	priv->pid_node = pdev->dev.of_node;
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	//priv->base_addr = devm_ioremap_resource(&pdev->dev, res);
 	priv->base_addr = ioremap(res->start, (res->end - res->start));
diff --git a/drivers/misc/intel_tsens/intel_tsens_thermal.h b/drivers/misc/intel_tsens/intel_tsens_thermal.h
index a531c95b20b3..575eef34f2a5 100644
--- a/drivers/misc/intel_tsens/intel_tsens_thermal.h
+++ b/drivers/misc/intel_tsens/intel_tsens_thermal.h
@@ -18,6 +18,7 @@ struct intel_tsens_plat_data {
 	void __iomem *base_addr;
 	int (*get_temp)(struct platform_device *pdev, int type, int *temp);
 	void *pdata;
+	struct device_node *s_node;
 };
 
 struct intel_tsens_plat_info {
@@ -25,6 +26,7 @@ struct intel_tsens_plat_info {
 	int id;
 	struct platform_device *pdev;
 	void __iomem *base_addr;
+	struct device_node *s_node;
 };
 
 struct intel_tsens_i2c_plat_data {
diff --git a/drivers/misc/intel_tsens/thunderbay_thermal.c b/drivers/misc/intel_tsens/thunderbay_thermal.c
index ba805b2eac5a..b480cadfcca9 100644
--- a/drivers/misc/intel_tsens/thunderbay_thermal.c
+++ b/drivers/misc/intel_tsens/thunderbay_thermal.c
@@ -20,14 +20,57 @@
 #include "intel_tsens_thermal.h"
 #include "thunderbay_tsens.h"
 
+struct intel_tsens_pid {
+u32 hw_throt_mode_ccu0;
+u32 hw_throt_mode_ccu1;
+u32 thres_throt_cnt_cfg;
+u32 therm_scaling_cnt;
+u32 div_throt_cfg_ccu0;
+u32 div_throt_cfg_ccu1;
+u32 div_throt_cfg_ccu2;
+u32 div_throt_cfg_ccu3;
+u32 cg_throt_cfg1_ccu0;
+u32 cg_throt_cfg1_ccu1;
+u32 cg_throt_cfg1_ccu2;
+u32 cg_throt_cfg1_ccu3;
+u32 dts_thd_sar_pid_en_abort;
+u32 dts_sar_mode_cfg;
+u32 dts_pid_throt_cfg;
+u32 dts_pid_ctrl_dts0;
+u32 dts_pid_ctrl_dts1;
+u32 dts_pid_ctrl_dts2;
+u32 dts_pid_kp_dts0;
+u32 dts_pid_kp_dts1;
+u32 dts_pid_kp_dts2;
+u32 dts_pid_kd_dts0;
+u32 dts_pid_kd_dts1;
+u32 dts_pid_kd_dts2;
+u32 dts_pid_ki_dts0;
+u32 dts_pid_ki_dts1;
+u32 dts_pid_ki_dts2;
+u32 dts_pid_rise_thres_dts0;
+u32 dts_pid_rise_thres_dts1;
+u32 dts_pid_rise_thres_dts2;
+u32 dts_pid_fall_thres_dts0;
+u32 dts_pid_fall_thres_dts1;
+u32 dts_pid_fall_thres_dts2;
+u32 dts_pid_max_integ_limit;
+u32 dts_pid_min_integ_limit;
+u32 dts_pid_max_accum_limit;
+u32 dts_pid_min_accum_limit;
+};
+
 struct thunderbay_thermal_priv {
 	const char *name;
 	void __iomem *base_addr;
 	spinlock_t lock;		/* Spinlock */
 	u32 current_temp[THUNDERBAY_SENSOR_MAX];
 	struct intel_tsens_plat_data *plat_data;
+	struct device_node *s_node;
+	struct intel_tsens_pid *pid_info;
 };
 
+static int thb_dt_parse;
 static int thb_sensor_read_temp(void __iomem *regs_val,
 				int offset,
 				int *temp)
@@ -132,6 +175,367 @@ static int thunderbay_get_temp(struct platform_device *pdev, int type, int *temp
 	return 0;
 }
 
+static int intel_tsens_pid_config_reg(struct thunderbay_thermal_priv *priv)
+{
+		if (priv->pid_info->hw_throt_mode_ccu0 != 0)
+			iowrite32(priv->pid_info->hw_throt_mode_ccu0,
+				  priv->base_addr + HW_THROT_MODE_CCU0);
+
+		if (priv->pid_info->hw_throt_mode_ccu1 != 0)
+			iowrite32(priv->pid_info->hw_throt_mode_ccu1,
+				  priv->base_addr + HW_THROT_MODE_CCU1);
+
+		if (priv->pid_info->thres_throt_cnt_cfg != 0)
+			iowrite32(priv->pid_info->thres_throt_cnt_cfg,
+				  priv->base_addr + THRES_THROT_CNT_CFG);
+
+		if (priv->pid_info->therm_scaling_cnt != 0)
+			iowrite32(priv->pid_info->therm_scaling_cnt,
+				  priv->base_addr + THERM_SCALING_CNT);
+
+		if (priv->pid_info->div_throt_cfg_ccu0 != 0)
+			iowrite32(priv->pid_info->div_throt_cfg_ccu0,
+				  priv->base_addr + DIV_THROT_CFG_CCU0);
+
+		if (priv->pid_info->div_throt_cfg_ccu1 != 0)
+			iowrite32(priv->pid_info->div_throt_cfg_ccu1,
+				  priv->base_addr + DIV_THROT_CFG_CCU1);
+
+		if (priv->pid_info->div_throt_cfg_ccu2 != 0)
+			iowrite32(priv->pid_info->div_throt_cfg_ccu2,
+				  priv->base_addr + DIV_THROT_CFG_CCU2);
+
+		if (priv->pid_info->div_throt_cfg_ccu3 != 0)
+			iowrite32(priv->pid_info->div_throt_cfg_ccu3,
+				  priv->base_addr + DIV_THROT_CFG_CCU3);
+
+		if (priv->pid_info->cg_throt_cfg1_ccu0 != 0)
+			iowrite32(priv->pid_info->cg_throt_cfg1_ccu0,
+				  priv->base_addr + CG_THROT_CFG1_CCU0);
+
+		if (priv->pid_info->cg_throt_cfg1_ccu1 != 0)
+			iowrite32(priv->pid_info->cg_throt_cfg1_ccu1,
+				  priv->base_addr + CG_THROT_CFG1_CCU1);
+
+		if (priv->pid_info->cg_throt_cfg1_ccu2 != 0)
+			iowrite32(priv->pid_info->cg_throt_cfg1_ccu2,
+				  priv->base_addr + CG_THROT_CFG1_CCU2);
+
+		if (priv->pid_info->cg_throt_cfg1_ccu3 != 0)
+			iowrite32(priv->pid_info->cg_throt_cfg1_ccu3,
+				  priv->base_addr + CG_THROT_CFG1_CCU3);
+
+		if (priv->pid_info->dts_thd_sar_pid_en_abort != 0)
+			iowrite32(priv->pid_info->dts_thd_sar_pid_en_abort,
+				  priv->base_addr + DTS_THD_SAR_PID_EN_ABORT);
+
+		if (priv->pid_info->dts_sar_mode_cfg != 0)
+			iowrite32(priv->pid_info->dts_sar_mode_cfg,
+				  priv->base_addr + DTS_SAR_MODE_CFG);
+
+		if (priv->pid_info->dts_pid_throt_cfg != 0)
+			iowrite32(priv->pid_info->dts_pid_throt_cfg,
+				  priv->base_addr + DTS_PID_THROT_CFG);
+
+		if (priv->pid_info->dts_pid_ctrl_dts0 != 0)
+			iowrite32(priv->pid_info->dts_pid_ctrl_dts0,
+				  priv->base_addr + DTS_PID_CTRL_DTS0);
+
+		if (priv->pid_info->dts_pid_ctrl_dts1 != 0)
+			iowrite32(priv->pid_info->dts_pid_ctrl_dts1,
+				  priv->base_addr + DTS_PID_CTRL_DTS1);
+
+		if (priv->pid_info->dts_pid_ctrl_dts2 != 0)
+			iowrite32(priv->pid_info->dts_pid_ctrl_dts2,
+				  priv->base_addr + DTS_PID_CTRL_DTS2);
+
+		if (priv->pid_info->dts_pid_kp_dts0 != 0)
+			iowrite32(priv->pid_info->dts_pid_kp_dts0,
+				  priv->base_addr + DTS_PID_KP_DTS0);
+
+		if (priv->pid_info->dts_pid_kp_dts1 != 0)
+			iowrite32(priv->pid_info->dts_pid_kp_dts1,
+				  priv->base_addr + DTS_PID_KP_DTS1);
+
+		if (priv->pid_info->dts_pid_kp_dts2 != 0)
+			iowrite32(priv->pid_info->dts_pid_kp_dts2,
+				  priv->base_addr + DTS_PID_KP_DTS2);
+
+		if (priv->pid_info->dts_pid_kd_dts0 != 0)
+			iowrite32(priv->pid_info->dts_pid_kd_dts0,
+				  priv->base_addr + DTS_PID_KD_DTS0);
+
+		if (priv->pid_info->dts_pid_kd_dts1 != 0)
+			iowrite32(priv->pid_info->dts_pid_kd_dts1,
+				  priv->base_addr + DTS_PID_KD_DTS1);
+
+		if (priv->pid_info->dts_pid_kd_dts2 != 0)
+			iowrite32(priv->pid_info->dts_pid_kd_dts2,
+				  priv->base_addr + DTS_PID_KD_DTS2);
+
+		if (priv->pid_info->dts_pid_ki_dts0 != 0)
+			iowrite32(priv->pid_info->dts_pid_ki_dts0,
+				  priv->base_addr + DTS_PID_KI_DTS0);
+
+		if (priv->pid_info->dts_pid_ki_dts1 != 0)
+			iowrite32(priv->pid_info->dts_pid_ki_dts1,
+				  priv->base_addr + DTS_PID_KI_DTS1);
+
+		if (priv->pid_info->dts_pid_ki_dts2 != 0)
+			iowrite32(priv->pid_info->dts_pid_ki_dts2,
+				  priv->base_addr + DTS_PID_KI_DTS2);
+
+		if (priv->pid_info->dts_pid_rise_thres_dts0 != 0)
+			iowrite32(priv->pid_info->dts_pid_rise_thres_dts0,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS0);
+
+		if (priv->pid_info->dts_pid_rise_thres_dts1 != 0)
+			iowrite32(priv->pid_info->dts_pid_rise_thres_dts1,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS1);
+
+		if (priv->pid_info->dts_pid_rise_thres_dts2 != 0)
+			iowrite32(priv->pid_info->dts_pid_rise_thres_dts2,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS2);
+
+		if (priv->pid_info->dts_pid_fall_thres_dts0 != 0)
+			iowrite32(priv->pid_info->dts_pid_fall_thres_dts0,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS0);
+
+		if (priv->pid_info->dts_pid_fall_thres_dts1 != 0)
+			iowrite32(priv->pid_info->dts_pid_fall_thres_dts1,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS1);
+
+		if (priv->pid_info->dts_pid_fall_thres_dts2 != 0)
+			iowrite32(priv->pid_info->dts_pid_fall_thres_dts2,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS2);
+
+		if (priv->pid_info->dts_pid_max_integ_limit != 0)
+			iowrite32(priv->pid_info->dts_pid_max_integ_limit,
+				  priv->base_addr + DTS_PID_MAX_INTEG_LIMIT);
+
+		if (priv->pid_info->dts_pid_min_integ_limit != 0)
+			iowrite32(priv->pid_info->dts_pid_min_integ_limit,
+				  priv->base_addr + DTS_PID_MIN_INTEG_LIMIT);
+
+		if (priv->pid_info->dts_pid_max_accum_limit != 0)
+			iowrite32(priv->pid_info->dts_pid_max_accum_limit,
+				  priv->base_addr + DTS_PID_MAX_ACCUM_LIMIT);
+
+		if (priv->pid_info->dts_pid_min_accum_limit != 0)
+			iowrite32(priv->pid_info->dts_pid_min_accum_limit,
+				  priv->base_addr + DTS_PID_MIN_ACCUM_LIMIT);
+return 0;
+}
+
+int intel_tsens_pid_config_dt(struct thunderbay_thermal_priv *priv)
+{
+	struct device_node *t_node = priv->s_node;
+	struct device_node *np, *s_node;
+
+	for_each_child_of_node(t_node, s_node) {
+		int ret;
+		struct intel_tsens_pid pid = {0};
+
+		priv->pid_info = &pid;
+		np = of_parse_phandle(s_node, "pid_cfg", 0);
+		if (!np)
+			return NULL;
+
+		ret = of_property_read_u32(np, "hw_throt_mode_ccu0",
+					   &priv->pid_info->hw_throt_mode_ccu0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "hw_throt_mode_ccu1",
+					   &priv->pid_info->hw_throt_mode_ccu1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "thres_throt_cnt_cfg",
+					   &priv->pid_info->thres_throt_cnt_cfg);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "therm_scaling_cnt",
+					   &priv->pid_info->therm_scaling_cnt);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "div_throt_cfg_ccu0",
+					   &priv->pid_info->div_throt_cfg_ccu0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "div_throt_cfg_ccu1",
+					   &priv->pid_info->div_throt_cfg_ccu1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "div_throt_cfg_ccu2",
+					   &priv->pid_info->div_throt_cfg_ccu2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "div_throt_cfg_ccu3",
+					   &priv->pid_info->div_throt_cfg_ccu3);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu0",
+					   &priv->pid_info->cg_throt_cfg1_ccu0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu1",
+					   &priv->pid_info->cg_throt_cfg1_ccu1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu2",
+					   &priv->pid_info->cg_throt_cfg1_ccu2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu3",
+					   &priv->pid_info->cg_throt_cfg1_ccu3);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_thd_sar_pid_en_abort",
+					   &priv->pid_info->dts_thd_sar_pid_en_abort);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_sar_mode_cfg",
+					   &priv->pid_info->dts_sar_mode_cfg);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_throt_cfg",
+					   &priv->pid_info->dts_pid_throt_cfg);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_ctrl_dts0",
+					   &priv->pid_info->dts_pid_ctrl_dts0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_ctrl_dts1",
+					   &priv->pid_info->dts_pid_ctrl_dts1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_ctrl_dts2",
+					   &priv->pid_info->dts_pid_ctrl_dts2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_kp_dts0",
+					   &priv->pid_info->dts_pid_kp_dts0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_kp_dts1",
+					   &priv->pid_info->dts_pid_kp_dts1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_kp_dts2",
+					   &priv->pid_info->dts_pid_kp_dts2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_kd_dts0",
+					   &priv->pid_info->dts_pid_kd_dts0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_kd_dts1",
+					   &priv->pid_info->dts_pid_kd_dts1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_kd_dts2",
+					   &priv->pid_info->dts_pid_kd_dts2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_ki_dts0",
+					   &priv->pid_info->dts_pid_ki_dts0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_ki_dts1",
+					   &priv->pid_info->dts_pid_ki_dts1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_ki_dts2",
+					   &priv->pid_info->dts_pid_ki_dts2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_rise_thres_dts0",
+					   &priv->pid_info->dts_pid_rise_thres_dts0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_rise_thres_dts1",
+					   &priv->pid_info->dts_pid_rise_thres_dts1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_rise_thres_dts2",
+					   &priv->pid_info->dts_pid_rise_thres_dts2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_fall_thres_dts0",
+					   &priv->pid_info->dts_pid_fall_thres_dts0);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_fall_thres_dts1",
+					   &priv->pid_info->dts_pid_fall_thres_dts1);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_fall_thres_dts2",
+					   &priv->pid_info->dts_pid_fall_thres_dts2);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_max_integ_limit",
+					   &priv->pid_info->dts_pid_max_integ_limit);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_min_integ_limit",
+					   &priv->pid_info->dts_pid_min_integ_limit);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_max_accum_limit",
+					   &priv->pid_info->dts_pid_max_accum_limit);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = of_property_read_u32(np, "dts_pid_min_accum_limit",
+					   &priv->pid_info->dts_pid_min_accum_limit);
+		if (ret && ret != -EINVAL)
+			goto invalid;
+
+		ret = intel_tsens_pid_config_reg(priv);
+		if (ret)
+			goto invalid;
+
+invalid:
+	return ret;
+	}
+return 0;
+}
+
 static int thunderbay_thermal_probe(struct platform_device *pdev)
 {
 	struct intel_tsens_plat_data *plat_data = NULL;
@@ -149,10 +553,16 @@ static int thunderbay_thermal_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "No memory");
 		return -ENOMEM;
 	}
-	iowrite32(0x1c0, plat_data->base_addr + DTS_THD_SAR_PID_EN_ABORT);
+	//iowrite32(0x1c0, plat_data->base_addr+DTS_THD_SAR_PID_EN_ABORT);
 	priv->name = plat_data->name;
 	priv->base_addr = plat_data->base_addr;
 	priv->plat_data = plat_data;
+	priv->s_node = plat_data->s_node;
+	if (priv->s_node != 0 && thb_dt_parse < 1) {
+		if (intel_tsens_pid_config_dt(priv))
+			dev_info(&pdev->dev, "PID dt_parsing failed");
+		thb_dt_parse++;
+	}
 	plat_data->get_temp = thunderbay_get_temp;
 	spin_lock_init(&priv->lock);
 	platform_set_drvdata(pdev, priv);
diff --git a/drivers/misc/intel_tsens/thunderbay_tsens.h b/drivers/misc/intel_tsens/thunderbay_tsens.h
index 14d5bfec7ac4..448220d67a82 100644
--- a/drivers/misc/intel_tsens/thunderbay_tsens.h
+++ b/drivers/misc/intel_tsens/thunderbay_tsens.h
@@ -29,6 +29,47 @@
 #define LOWER_TEMP -13736
 #define UPPER_TEMP 153123
 
+/* PID Registers */
+#define HW_THROT_MODE_CCU0 0x308c
+#define HW_THROT_MODE_CCU1 0x3090
+#define THRES_THROT_CNT_CFG 0x3020
+#define THERM_SCALING_CNT 0x3078
+#define DIV_THROT_CFG_CCU0 0x3000
+#define DIV_THROT_CFG_CCU1 0x3004
+#define DIV_THROT_CFG_CCU2 0x3008
+#define DIV_THROT_CFG_CCU3 0x300C
+#define CG_THROT_CFG1_CCU0 0x3010
+#define CG_THROT_CFG1_CCU1 0x3014
+#define CG_THROT_CFG1_CCU2 0x3018
+#define CG_THROT_CFG1_CCU3 0x301C
+#define THRES_THROT_CNT_CFG 0x3020
+#define DTS_THD_SAR_PID_EN_ABORT 0x3024
+#define DTS_SAR_MODE_CFG 0x3028
+#define DTS_PID_THROT_CFG 0x302C
+#define DTS_PID_CTRL_DTS0 0x3030
+#define DTS_PID_CTRL_DTS1 0x3034
+#define DTS_PID_CTRL_DTS2 0x3038
+#define DTS_PID_KP_DTS0 0x303C
+#define DTS_PID_KP_DTS1 0x3040
+#define DTS_PID_KP_DTS2 0x3044
+#define DTS_PID_KD_DTS0 0x3048
+#define DTS_PID_KD_DTS1 0x304C
+#define DTS_PID_KD_DTS2 0x3050
+#define DTS_PID_KI_DTS0 0x3054
+#define DTS_PID_KI_DTS1 0x3058
+#define DTS_PID_KI_DTS2 0x305C
+#define DTS_PID_RISE_THRES_DTS0 0x3060
+#define DTS_PID_RISE_THRES_DTS1 0x3064
+#define DTS_PID_RISE_THRES_DTS2 0x3068
+#define DTS_PID_FALL_THRES_DTS0 0x306C
+#define DTS_PID_FALL_THRES_DTS1 0x3070
+#define DTS_PID_FALL_THRES_DTS2 0x3074
+#define THERM_SCALING_CNT 0x3078
+#define DTS_PID_MAX_INTEG_LIMIT 0x30AC
+#define DTS_PID_MIN_INTEG_LIMIT 0x30B0
+#define DTS_PID_MAX_ACCUM_LIMIT 0x30B4
+#define DTS_PID_MIN_ACCUM_LIMIT 0x30B8
+
 /* temperature calculation lookup */
 
 #define THUNDERBAY_SENSOR_BASE_TEMP 27
-- 
2.27.0

