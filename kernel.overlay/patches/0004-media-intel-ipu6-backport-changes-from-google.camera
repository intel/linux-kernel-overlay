From c3dee088bc0cfde33749d1085e90d73c97a64fe0 Mon Sep 17 00:00:00 2001
From: Chen Meng J <meng.j.chen@intel.com>
Date: Tue, 24 Aug 2021 17:21:43 +0800
Subject: [PATCH 4/6] media: intel-ipu6: backport changes from google

Change Description:
backport changes from google:

use hweight32() to count set bits
remove error label on ipu_psys_create_buffer_set()
remove exessive logging in ipu_psys_kcmd_start()
remove psys watchdog
remove is_ppg_kcmd() macro
remove unused resource_pool_started
move global cq_bitmap_lock into pool struct
constrify regs configs
unexport ipu_psys_compat_ioctl32
unexport ipu_buttress_authenticate
unexport ipu_mmu_cleanup
unexport ipu_mmu_init
unexport ipu_put_fw_mgs_buf
reimplement ipu_buttress_tsc_read()
remove ipu_isys_isr_run()
remove tsc_lock
ipu_fw_psys_pg_dump() can be a no-op
make ipu6 fw cells static
make ipu6ep fw cells static

Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
Signed-off-by: Chen Meng J <meng.j.chen@intel.com>
---
 drivers/media/pci/intel/ipu-buttress.c        | 59 +++++--------------
 drivers/media/pci/intel/ipu-buttress.h        |  1 -
 drivers/media/pci/intel/ipu-isys.c            |  4 +-
 drivers/media/pci/intel/ipu-isys.h            |  2 +
 drivers/media/pci/intel/ipu-mmu.c             |  2 -
 drivers/media/pci/intel/ipu-psys-compat32.c   |  1 -
 drivers/media/pci/intel/ipu-psys.c            | 13 +---
 drivers/media/pci/intel/ipu-psys.h            |  5 +-
 drivers/media/pci/intel/ipu6/ipu-resources.c  | 32 ++++------
 .../media/pci/intel/ipu6/ipu6-fw-resources.c  | 23 ++++++--
 drivers/media/pci/intel/ipu6/ipu6-isys-phy.c  | 36 +++++------
 drivers/media/pci/intel/ipu6/ipu6-ppg.c       | 11 ++--
 drivers/media/pci/intel/ipu6/ipu6-psys.c      | 32 ++--------
 .../pci/intel/ipu6/ipu6ep-fw-resources.c      | 10 ++--
 14 files changed, 83 insertions(+), 148 deletions(-)

diff --git a/drivers/media/pci/intel/ipu-buttress.c b/drivers/media/pci/intel/ipu-buttress.c
index e22c79d8e365e..b9d8056ff08b9 100644
--- a/drivers/media/pci/intel/ipu-buttress.c
+++ b/drivers/media/pci/intel/ipu-buttress.c
@@ -910,7 +910,6 @@ int ipu_buttress_authenticate(struct ipu_device *isp)
 
 	return rval;
 }
-EXPORT_SYMBOL(ipu_buttress_authenticate);
 
 static int ipu_buttress_send_tsc_request(struct ipu_device *isp)
 {
@@ -1020,50 +1019,25 @@ EXPORT_SYMBOL_GPL(ipu_get_i2c_bus_id);
 
 int ipu_buttress_tsc_read(struct ipu_device *isp, u64 *val)
 {
-	struct ipu_buttress *b = &isp->buttress;
-	u32 tsc_hi, tsc_lo_1, tsc_lo_2, tsc_lo_3, tsc_chk = 0;
+	u32 tsc_hi_1, tsc_hi_2, tsc_lo;
 	unsigned long flags;
-	short retry = IPU_BUTTRESS_TSC_RETRY;
-
-	do {
-		spin_lock_irqsave(&b->tsc_lock, flags);
-		tsc_hi = readl(isp->base + BUTTRESS_REG_TSC_HI);
 
-		/*
-		 * We are occasionally getting broken values from
-		 * HH. Reading 3 times and doing sanity check as a WA
-		 */
-		tsc_lo_1 = readl(isp->base + BUTTRESS_REG_TSC_LO);
-		tsc_lo_2 = readl(isp->base + BUTTRESS_REG_TSC_LO);
-		tsc_lo_3 = readl(isp->base + BUTTRESS_REG_TSC_LO);
-		tsc_chk = readl(isp->base + BUTTRESS_REG_TSC_HI);
-		spin_unlock_irqrestore(&b->tsc_lock, flags);
-		if (tsc_chk == tsc_hi && tsc_lo_2 &&
-		    tsc_lo_2 - tsc_lo_1 <= IPU_BUTTRESS_TSC_LIMIT &&
-		    tsc_lo_3 - tsc_lo_2 <= IPU_BUTTRESS_TSC_LIMIT) {
-			*val = (u64)tsc_hi << 32 | tsc_lo_2;
-			return 0;
-		}
-
-		/*
-		 * Trace error only if limit checkings fails at least
-		 *  by two consecutive readings.
-		 */
-		if (retry < IPU_BUTTRESS_TSC_RETRY - 1 && tsc_lo_2)
-			dev_err(&isp->pdev->dev,
-				"%s = %u, %s = %u, %s = %u, %s = %u, %s = %u",
-				"failure: tsc_hi", tsc_hi,
-				"tsc_chk", tsc_chk,
-				"tsc_lo_1", tsc_lo_1,
-				"tsc_lo_2", tsc_lo_2, "tsc_lo_3", tsc_lo_3);
-	} while (retry--);
-
-	if (!tsc_chk && !tsc_lo_2)
-		return -EIO;
-
-	WARN_ON_ONCE(1);
+	local_irq_save(flags);
+	tsc_hi_1 = readl(isp->base + BUTTRESS_REG_TSC_HI);
+	tsc_lo = readl(isp->base + BUTTRESS_REG_TSC_LO);
+	tsc_hi_2 = readl(isp->base + BUTTRESS_REG_TSC_HI);
+	if (tsc_hi_1 == tsc_hi_2) {
+		*val = (u64)tsc_hi_1 << 32 | tsc_lo;
+	} else {
+		/* Check if TSC has rolled over */
+		if (tsc_lo & BIT(31))
+			*val = (u64)tsc_hi_1 << 32 | tsc_lo;
+		else
+			*val = (u64)tsc_hi_2 << 32 | tsc_lo;
+	}
+	local_irq_restore(flags);
 
-	return -EINVAL;
+	return 0;
 }
 EXPORT_SYMBOL_GPL(ipu_buttress_tsc_read);
 
@@ -1356,7 +1330,6 @@ int ipu_buttress_init(struct ipu_device *isp)
 	mutex_init(&b->auth_mutex);
 	mutex_init(&b->cons_mutex);
 	mutex_init(&b->ipc_mutex);
-	spin_lock_init(&b->tsc_lock);
 	init_completion(&b->ish.send_complete);
 	init_completion(&b->cse.send_complete);
 	init_completion(&b->ish.recv_complete);
diff --git a/drivers/media/pci/intel/ipu-buttress.h b/drivers/media/pci/intel/ipu-buttress.h
index 798cae7ed6387..f8ba7e50eca2e 100644
--- a/drivers/media/pci/intel/ipu-buttress.h
+++ b/drivers/media/pci/intel/ipu-buttress.h
@@ -58,7 +58,6 @@ struct ipu_buttress_ipc {
 
 struct ipu_buttress {
 	struct mutex power_mutex, auth_mutex, cons_mutex, ipc_mutex;
-	spinlock_t tsc_lock;	/* tsc lock */
 	struct ipu_buttress_ipc cse;
 	struct ipu_buttress_ipc ish;
 	struct list_head constraints;
diff --git a/drivers/media/pci/intel/ipu-isys.c b/drivers/media/pci/intel/ipu-isys.c
index 4685b368d2341..72ac8f86486a7 100644
--- a/drivers/media/pci/intel/ipu-isys.c
+++ b/drivers/media/pci/intel/ipu-isys.c
@@ -1140,7 +1140,6 @@ void ipu_put_fw_mgs_buf(struct ipu_isys *isys, u64 data)
 	list_move(&msg->head, &isys->framebuflist);
 	spin_unlock_irqrestore(&isys->listlock, flags);
 }
-EXPORT_SYMBOL_GPL(ipu_put_fw_mgs_buf);
 
 static int isys_probe(struct ipu_bus_device *adev)
 {
@@ -1536,6 +1535,7 @@ int isys_isr_one(struct ipu_bus_device *adev)
 	return 0;
 }
 
+#ifdef IPU_IRQ_POLL
 static void isys_isr_poll(struct ipu_bus_device *adev)
 {
 	struct ipu_isys *isys = ipu_bus_get_drvdata(adev);
@@ -1563,7 +1563,7 @@ int ipu_isys_isr_run(void *ptr)
 
 	return 0;
 }
-
+#endif
 static struct ipu_bus_driver isys_driver = {
 	.probe = isys_probe,
 	.remove = isys_remove,
diff --git a/drivers/media/pci/intel/ipu-isys.h b/drivers/media/pci/intel/ipu-isys.h
index e1f89b34fd355..fb907a297c346 100644
--- a/drivers/media/pci/intel/ipu-isys.h
+++ b/drivers/media/pci/intel/ipu-isys.h
@@ -240,7 +240,9 @@ extern const struct v4l2_ioctl_ops ipu_isys_ioctl_ops;
 
 void isys_setup_hw(struct ipu_isys *isys);
 int isys_isr_one(struct ipu_bus_device *adev);
+#ifdef IPU_IRQ_POLL
 int ipu_isys_isr_run(void *ptr);
+#endif
 irqreturn_t isys_isr(struct ipu_bus_device *adev);
 #ifdef IPU_ISYS_GPC
 int ipu_isys_gpc_init_debugfs(struct ipu_isys *isys);
diff --git a/drivers/media/pci/intel/ipu-mmu.c b/drivers/media/pci/intel/ipu-mmu.c
index ad84c7b634414..d568a0a837a5b 100644
--- a/drivers/media/pci/intel/ipu-mmu.c
+++ b/drivers/media/pci/intel/ipu-mmu.c
@@ -840,7 +840,6 @@ struct ipu_mmu *ipu_mmu_init(struct device *dev,
 
 	return mmu;
 }
-EXPORT_SYMBOL(ipu_mmu_init);
 
 void ipu_mmu_cleanup(struct ipu_mmu *mmu)
 {
@@ -852,7 +851,6 @@ void ipu_mmu_cleanup(struct ipu_mmu *mmu)
 	put_iova_domain(&dmap->iovad);
 	kfree(dmap);
 }
-EXPORT_SYMBOL(ipu_mmu_cleanup);
 
 MODULE_AUTHOR("Sakari Ailus <sakari.ailus@linux.intel.com>");
 MODULE_AUTHOR("Samu Onkalo <samu.onkalo@intel.com>");
diff --git a/drivers/media/pci/intel/ipu-psys-compat32.c b/drivers/media/pci/intel/ipu-psys-compat32.c
index ba13127d946e3..763ebc2c1a9f9 100644
--- a/drivers/media/pci/intel/ipu-psys-compat32.c
+++ b/drivers/media/pci/intel/ipu-psys-compat32.c
@@ -223,4 +223,3 @@ long ipu_psys_compat_ioctl32(struct file *file, unsigned int cmd,
 	}
 	return err;
 }
-EXPORT_SYMBOL_GPL(ipu_psys_compat_ioctl32);
diff --git a/drivers/media/pci/intel/ipu-psys.c b/drivers/media/pci/intel/ipu-psys.c
index 9bfc7446d1e63..aaa4d07f6824f 100644
--- a/drivers/media/pci/intel/ipu-psys.c
+++ b/drivers/media/pci/intel/ipu-psys.c
@@ -1390,7 +1390,6 @@ static int ipu_psys_probe(struct ipu_bus_device *adev)
 	INIT_LIST_HEAD(&psys->fhs);
 	INIT_LIST_HEAD(&psys->pgs);
 	INIT_LIST_HEAD(&psys->started_kcmds_list);
-	INIT_WORK(&psys->watchdog_work, ipu_psys_watchdog_work);
 
 	init_waitqueue_head(&psys->sched_cmd_wq);
 	atomic_set(&psys->wakeup_count, 0);
@@ -1410,18 +1409,11 @@ static int ipu_psys_probe(struct ipu_bus_device *adev)
 
 	ipu_bus_set_drvdata(adev, psys);
 
-	rval = ipu_psys_resource_pool_init(&psys->resource_pool_started);
-	if (rval < 0) {
-		dev_err(&psys->dev,
-			"unable to alloc process group resources\n");
-		goto out_mutex_destroy;
-	}
-
 	rval = ipu_psys_resource_pool_init(&psys->resource_pool_running);
 	if (rval < 0) {
 		dev_err(&psys->dev,
 			"unable to alloc process group resources\n");
-		goto out_resources_started_free;
+		goto out_mutex_destroy;
 	}
 
 	ipu6_psys_hw_res_variant_init();
@@ -1512,8 +1504,6 @@ static int ipu_psys_probe(struct ipu_bus_device *adev)
 	}
 
 	ipu_psys_resource_pool_cleanup(&psys->resource_pool_running);
-out_resources_started_free:
-	ipu_psys_resource_pool_cleanup(&psys->resource_pool_started);
 out_mutex_destroy:
 	mutex_destroy(&psys->mutex);
 	cdev_del(&psys->cdev);
@@ -1570,7 +1560,6 @@ static void ipu_psys_remove(struct ipu_bus_device *adev)
 
 	ipu_trace_uninit(&adev->dev);
 
-	ipu_psys_resource_pool_cleanup(&psys->resource_pool_started);
 	ipu_psys_resource_pool_cleanup(&psys->resource_pool_running);
 
 	device_unregister(&psys->dev);
diff --git a/drivers/media/pci/intel/ipu-psys.h b/drivers/media/pci/intel/ipu-psys.h
index 9cdf34d03f5a4..97424602eff1a 100644
--- a/drivers/media/pci/intel/ipu-psys.h
+++ b/drivers/media/pci/intel/ipu-psys.h
@@ -63,6 +63,8 @@ struct ipu_psys_resource_pool {
 	struct ipu_resource ext_memory[32];
 	struct ipu_resource dfms[16];
 	DECLARE_BITMAP(cmd_queues, 32);
+	/* Protects cmd_queues bitmap */
+	spinlock_t queues_lock;
 };
 
 /*
@@ -101,7 +103,6 @@ struct ipu_psys {
 	struct task_struct *isr_thread;
 #endif
 	struct task_struct *sched_cmd_thread;
-	struct work_struct watchdog_work;
 	wait_queue_head_t sched_cmd_wq;
 	atomic_t wakeup_count;  /* Psys schedule thread wakeup count */
 #ifdef CONFIG_DEBUG_FS
@@ -110,7 +111,6 @@ struct ipu_psys {
 
 	/* Resources needed to be managed for process groups */
 	struct ipu_psys_resource_pool resource_pool_running;
-	struct ipu_psys_resource_pool resource_pool_started;
 
 	const struct firmware *fw;
 	struct sg_table fw_sgt;
@@ -207,7 +207,6 @@ void ipu_psys_subdomains_power(struct ipu_psys *psys, bool on);
 void ipu_psys_handle_events(struct ipu_psys *psys);
 int ipu_psys_kcmd_new(struct ipu_psys_command *cmd, struct ipu_psys_fh *fh);
 void ipu_psys_run_next(struct ipu_psys *psys);
-void ipu_psys_watchdog_work(struct work_struct *work);
 struct ipu_psys_pg *__get_pg_buf(struct ipu_psys *psys, size_t pg_size);
 struct ipu_psys_kbuffer *
 ipu_psys_lookup_kbuffer(struct ipu_psys_fh *fh, int fd);
diff --git a/drivers/media/pci/intel/ipu6/ipu-resources.c b/drivers/media/pci/intel/ipu6/ipu-resources.c
index b246fc037890f..dfe4fde7e83f3 100644
--- a/drivers/media/pci/intel/ipu6/ipu-resources.c
+++ b/drivers/media/pci/intel/ipu6/ipu-resources.c
@@ -141,15 +141,14 @@ static void ipu_resource_cleanup(struct ipu_resource *res)
 }
 
 /********** IPU PSYS-specific resource handling **********/
-static DEFINE_SPINLOCK(cq_bitmap_lock);
-int ipu_psys_resource_pool_init(struct ipu_psys_resource_pool
-				*pool)
+int ipu_psys_resource_pool_init(struct ipu_psys_resource_pool *pool)
 {
 	int i, j, k, ret;
 	const struct ipu_fw_resource_definitions *res_defs;
 
 	res_defs = get_res();
 
+	spin_lock_init(&pool->queues_lock);
 	pool->cells = 0;
 
 	for (i = 0; i < res_defs->num_dev_channels; i++) {
@@ -172,14 +171,14 @@ int ipu_psys_resource_pool_init(struct ipu_psys_resource_pool
 			goto dfm_error;
 	}
 
-	spin_lock(&cq_bitmap_lock);
+	spin_lock(&pool->queues_lock);
 	if (ipu_ver == IPU_VER_6SE)
 		bitmap_zero(pool->cmd_queues,
 			    IPU6SE_FW_PSYS_N_PSYS_CMD_QUEUE_ID);
 	else
 		bitmap_zero(pool->cmd_queues,
 			    IPU6_FW_PSYS_N_PSYS_CMD_QUEUE_ID);
-	spin_unlock(&cq_bitmap_lock);
+	spin_unlock(&pool->queues_lock);
 
 	return 0;
 
@@ -272,17 +271,6 @@ static int __alloc_one_resrc(const struct device *dev,
 	return 0;
 }
 
-static inline unsigned int bit_count(unsigned int n)
-{
-	unsigned int counter = 0;
-
-	while (n) {
-		counter++;
-		n &= (n - 1);
-	}
-	return counter;
-}
-
 static int ipu_psys_allocate_one_dfm(const struct device *dev,
 				     struct ipu_fw_psys_process *process,
 				     struct ipu_resource *resource,
@@ -316,7 +304,7 @@ static int ipu_psys_allocate_one_dfm(const struct device *dev,
 		}
 		*resource->bitmap |= dfm_bitmap_req;
 	} else {
-		unsigned int n = bit_count(dfm_bitmap_req);
+		unsigned int n = hweight32(dfm_bitmap_req);
 
 		p = bitmap_find_next_zero_area(resource->bitmap,
 					       resource->elements, 0, n, 0);
@@ -398,17 +386,17 @@ int ipu_psys_allocate_cmd_queue_resource(struct ipu_psys_resource_pool *pool)
 		start = IPU6SE_FW_PSYS_CMD_QUEUE_PPG0_COMMAND_ID;
 	}
 
-	spin_lock(&cq_bitmap_lock);
+	spin_lock(&pool->queues_lock);
 	/* find available cmd queue from ppg0_cmd_id */
 	p = bitmap_find_next_zero_area(pool->cmd_queues, size, start, 1, 0);
 
 	if (p >= size) {
-		spin_unlock(&cq_bitmap_lock);
+		spin_unlock(&pool->queues_lock);
 		return -ENOSPC;
 	}
 
 	bitmap_set(pool->cmd_queues, p, 1);
-	spin_unlock(&cq_bitmap_lock);
+	spin_unlock(&pool->queues_lock);
 
 	return p;
 }
@@ -416,9 +404,9 @@ int ipu_psys_allocate_cmd_queue_resource(struct ipu_psys_resource_pool *pool)
 void ipu_psys_free_cmd_queue_resource(struct ipu_psys_resource_pool *pool,
 				      u8 queue_id)
 {
-	spin_lock(&cq_bitmap_lock);
+	spin_lock(&pool->queues_lock);
 	bitmap_clear(pool->cmd_queues, queue_id, 1);
-	spin_unlock(&cq_bitmap_lock);
+	spin_unlock(&pool->queues_lock);
 }
 
 int ipu_psys_try_allocate_resources(struct device *dev,
diff --git a/drivers/media/pci/intel/ipu6/ipu6-fw-resources.c b/drivers/media/pci/intel/ipu6/ipu6-fw-resources.c
index 9569a146e7391..338e90d8f29b5 100644
--- a/drivers/media/pci/intel/ipu6/ipu6-fw-resources.c
+++ b/drivers/media/pci/intel/ipu6/ipu6-fw-resources.c
@@ -13,7 +13,7 @@
 /*
  * Cell types by cell IDs
  */
-const u8 ipu6_fw_psys_cell_types[IPU6_FW_PSYS_N_CELL_ID] = {
+static const u8 ipu6_fw_psys_cell_types[IPU6_FW_PSYS_N_CELL_ID] = {
 	IPU6_FW_PSYS_SP_CTRL_TYPE_ID,
 	IPU6_FW_PSYS_VP_TYPE_ID,
 	IPU6_FW_PSYS_ACC_PSA_TYPE_ID,
@@ -48,7 +48,7 @@ const u8 ipu6_fw_psys_cell_types[IPU6_FW_PSYS_N_CELL_ID] = {
 	IPU6_FW_PSYS_TNR_TYPE_ID,
 };
 
-const u16 ipu6_fw_num_dev_channels[IPU6_FW_PSYS_N_DEV_CHN_ID] = {
+static const u16 ipu6_fw_num_dev_channels[IPU6_FW_PSYS_N_DEV_CHN_ID] = {
 	IPU6_FW_PSYS_DEV_CHN_DMA_EXT0_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_CHN_DMA_EXT1_READ_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_CHN_DMA_EXT1_WRITE_MAX_SIZE,
@@ -56,7 +56,7 @@ const u16 ipu6_fw_num_dev_channels[IPU6_FW_PSYS_N_DEV_CHN_ID] = {
 	IPU6_FW_PSYS_DEV_CHN_DMA_ISA_MAX_SIZE,
 };
 
-const u16 ipu6_fw_psys_mem_size[IPU6_FW_PSYS_N_MEM_ID] = {
+static const u16 ipu6_fw_psys_mem_size[IPU6_FW_PSYS_N_MEM_ID] = {
 	IPU6_FW_PSYS_VMEM0_MAX_SIZE,
 	IPU6_FW_PSYS_TRANSFER_VMEM0_MAX_SIZE,
 	IPU6_FW_PSYS_TRANSFER_VMEM1_MAX_SIZE,
@@ -69,7 +69,7 @@ const u16 ipu6_fw_psys_mem_size[IPU6_FW_PSYS_N_MEM_ID] = {
 	IPU6_FW_PSYS_PMEM0_MAX_SIZE
 };
 
-const u16 ipu6_fw_psys_dfms[IPU6_FW_PSYS_N_DEV_DFM_ID] = {
+static const u16 ipu6_fw_psys_dfms[IPU6_FW_PSYS_N_DEV_DFM_ID] = {
 	IPU6_FW_PSYS_DEV_DFM_BB_FULL_PORT_ID_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_DFM_BB_EMPTY_PORT_ID_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_DFM_ISL_FULL_PORT_ID_MAX_SIZE,
@@ -78,7 +78,7 @@ const u16 ipu6_fw_psys_dfms[IPU6_FW_PSYS_N_DEV_DFM_ID] = {
 	IPU6_FW_PSYS_DEV_DFM_LB_EMPTY_PORT_ID_MAX_SIZE,
 };
 
-const u8
+static const u8
 ipu6_fw_psys_c_mem[IPU6_FW_PSYS_N_CELL_ID][IPU6_FW_PSYS_N_MEM_TYPE_ID] = {
 	{
 		/* IPU6_FW_PSYS_SP0_ID */
@@ -539,6 +539,8 @@ int ipu6_fw_psys_get_program_manifest_by_process(
 	return 0;
 }
 
+#if defined(DEBUG) || defined(CONFIG_DYNAMIC_DEBUG) || \
+	(defined(CONFIG_DYNAMIC_DEBUG_CORE) && defined(DYNAMIC_DEBUG_MODULE))
 void ipu6_fw_psys_pg_dump(struct ipu_psys *psys,
 			  struct ipu_psys_kcmd *kcmd, const char *note)
 {
@@ -593,3 +595,14 @@ void ipu6_fw_psys_pg_dump(struct ipu_psys *psys,
 		}
 	}
 }
+#else
+void ipu6_fw_psys_pg_dump(struct ipu_psys *psys,
+			  struct ipu_psys_kcmd *kcmd, const char *note)
+{
+	if (ipu_ver == IPU_VER_6SE || ipu_ver == IPU_VER_6 ||
+	    ipu_ver == IPU_VER_6EP)
+		return;
+
+	WARN(1, "%s ipu_ver:[%u] is unsupported!\n", __func__, ipu_ver);
+}
+#endif
diff --git a/drivers/media/pci/intel/ipu6/ipu6-isys-phy.c b/drivers/media/pci/intel/ipu6/ipu6-isys-phy.c
index 778da6afb1fac..e5f83c3640407 100644
--- a/drivers/media/pci/intel/ipu6/ipu6-isys-phy.c
+++ b/drivers/media/pci/intel/ipu6/ipu6-isys-phy.c
@@ -25,7 +25,7 @@ struct phy_reg {
 	u32 val;
 };
 
-struct phy_reg common_init_regs[] = {
+static const struct phy_reg common_init_regs[] = {
 	/* for TGL-U, use 0x80000000 */
 	{0x00000040, 0x80000000},
 	{0x00000044, 0x00a80880},
@@ -45,7 +45,7 @@ struct phy_reg common_init_regs[] = {
 	{0x00001944, 0xfa4401e2}
 };
 
-struct phy_reg x1_port0_config_regs[] = {
+static const struct phy_reg x1_port0_config_regs[] = {
 	{0x00000694, 0xc80060fa},
 	{0x00000680, 0x3d4f78ea},
 	{0x00000690, 0x10a0140b},
@@ -69,7 +69,7 @@ struct phy_reg x1_port0_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x1_port1_config_regs[] = {
+static const struct phy_reg x1_port1_config_regs[] = {
 	{0x00000c94, 0xc80060fa},
 	{0x00000c80, 0xcf47abea},
 	{0x00000c90, 0x10a0840b},
@@ -93,7 +93,7 @@ struct phy_reg x1_port1_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x1_port2_config_regs[] = {
+static const struct phy_reg x1_port2_config_regs[] = {
 	{0x00001294, 0x28f000fa},
 	{0x00001280, 0x08130cea},
 	{0x00001290, 0x10a0140b},
@@ -117,7 +117,7 @@ struct phy_reg x1_port2_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x1_port3_config_regs[] = {
+static const struct phy_reg x1_port3_config_regs[] = {
 	{0x00001894, 0xc80060fa},
 	{0x00001880, 0x0f90fd6a},
 	{0x00001890, 0x10a0840b},
@@ -141,7 +141,7 @@ struct phy_reg x1_port3_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x2_port0_config_regs[] = {
+static const struct phy_reg x2_port0_config_regs[] = {
 	{0x00000694, 0xc80060fa},
 	{0x00000680, 0x3d4f78ea},
 	{0x00000690, 0x10a0140b},
@@ -175,7 +175,7 @@ struct phy_reg x2_port0_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x2_port1_config_regs[] = {
+static const struct phy_reg x2_port1_config_regs[] = {
 	{0x00000c94, 0xc80060fa},
 	{0x00000c80, 0xcf47abea},
 	{0x00000c90, 0x10a0840b},
@@ -209,7 +209,7 @@ struct phy_reg x2_port1_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x2_port2_config_regs[] = {
+static const struct phy_reg x2_port2_config_regs[] = {
 	{0x00001294, 0xc80060fa},
 	{0x00001280, 0x08130cea},
 	{0x00001290, 0x10a0140b},
@@ -242,7 +242,7 @@ struct phy_reg x2_port2_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x2_port3_config_regs[] = {
+static const struct phy_reg x2_port3_config_regs[] = {
 	{0x00001894, 0xc80060fa},
 	{0x00001880, 0x0f90fd6a},
 	{0x00001890, 0x10a0840b},
@@ -276,7 +276,7 @@ struct phy_reg x2_port3_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x4_port0_config_regs[] = {
+static const struct phy_reg x4_port0_config_regs[] = {
 	{0x00000694, 0xc80060fa},
 	{0x00000680, 0x3d4f78fa},
 	{0x00000690, 0x10a0140b},
@@ -330,11 +330,11 @@ struct phy_reg x4_port0_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x4_port1_config_regs[] = {
+static const struct phy_reg x4_port1_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x4_port2_config_regs[] = {
+static const struct phy_reg x4_port2_config_regs[] = {
 	{0x00001294, 0x28f000fa},
 	{0x00001280, 0x08130cfa},
 	{0x00001290, 0x10c0140b},
@@ -388,32 +388,32 @@ struct phy_reg x4_port2_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg x4_port3_config_regs[] = {
+static const struct phy_reg x4_port3_config_regs[] = {
 	{0x00000000, 0x00000000}
 };
 
-struct phy_reg *x1_config_regs[4] = {
+static const struct phy_reg *x1_config_regs[4] = {
 	x1_port0_config_regs,
 	x1_port1_config_regs,
 	x1_port2_config_regs,
 	x1_port3_config_regs
 };
 
-struct phy_reg *x2_config_regs[4] = {
+static const struct phy_reg *x2_config_regs[4] = {
 	x2_port0_config_regs,
 	x2_port1_config_regs,
 	x2_port2_config_regs,
 	x2_port3_config_regs
 };
 
-struct phy_reg *x4_config_regs[4] = {
+static const struct phy_reg *x4_config_regs[4] = {
 	x4_port0_config_regs,
 	x4_port1_config_regs,
 	x4_port2_config_regs,
 	x4_port3_config_regs
 };
 
-struct phy_reg **config_regs[3] = {
+static const struct phy_reg **config_regs[3] = {
 	x1_config_regs,
 	x2_config_regs,
 	x4_config_regs,
@@ -568,7 +568,7 @@ int ipu6_isys_phy_config(struct ipu_isys *isys)
 	struct ipu_bus_device *adev = to_ipu_bus_device(&isys->adev->dev);
 	struct ipu_device *isp = adev->isp;
 	void __iomem *isp_base = isp->base;
-	struct phy_reg **phy_config_regs;
+	const struct phy_reg **phy_config_regs;
 	struct ipu_isys_subdev_pdata *spdata = isys->pdata->spdata;
 	struct ipu_isys_subdev_info **subdevs, *sd_info;
 	struct ipu_isys_csi2_config cfg;
diff --git a/drivers/media/pci/intel/ipu6/ipu6-ppg.c b/drivers/media/pci/intel/ipu6/ipu6-ppg.c
index c6acf9cb70ef3..8f6f413c03933 100644
--- a/drivers/media/pci/intel/ipu6/ipu6-ppg.c
+++ b/drivers/media/pci/intel/ipu6/ipu6-ppg.c
@@ -97,12 +97,14 @@ ipu_psys_create_buffer_set(struct ipu_psys_kcmd *kcmd,
 	buf_set_size = ipu_fw_psys_ppg_get_buffer_set_size(kcmd);
 
 	kbuf_set = __get_buf_set(fh, buf_set_size);
-	if (!kbuf_set)
-		goto error;
+	if (!kbuf_set) {
+		dev_err(&psys->adev->dev, "failed to create buffer set\n");
+		return NULL;
+	}
 
 	kbuf_set->buf_set = ipu_fw_psys_ppg_create_buffer_set(kcmd,
 							      kbuf_set->kaddr,
-	0);
+							      0);
 
 	ipu_fw_psys_ppg_buffer_set_vaddress(kbuf_set->buf_set,
 					    kbuf_set->dma_addr);
@@ -111,9 +113,6 @@ ipu_psys_create_buffer_set(struct ipu_psys_kcmd *kcmd,
 							    keb);
 
 	return kbuf_set;
-error:
-	dev_err(&psys->adev->dev, "failed to create buffer set\n");
-	return NULL;
 }
 
 int ipu_psys_ppg_get_bufset(struct ipu_psys_kcmd *kcmd,
diff --git a/drivers/media/pci/intel/ipu6/ipu6-psys.c b/drivers/media/pci/intel/ipu6/ipu6-psys.c
index 6ec594b83ed55..925ed3f020875 100644
--- a/drivers/media/pci/intel/ipu6/ipu6-psys.c
+++ b/drivers/media/pci/intel/ipu6/ipu6-psys.c
@@ -25,10 +25,6 @@
 #include "ipu-trace-event.h"
 #endif
 
-#define is_ppg_kcmd(kcmd) (ipu_fw_psys_pg_get_protocol(	\
-			(struct ipu_psys_kcmd *)kcmd)	\
-			== IPU_FW_PSYS_PROCESS_GROUP_PROTOCOL_PPG)
-
 static bool early_pg_transfer;
 module_param(early_pg_transfer, bool, 0664);
 MODULE_PARM_DESC(early_pg_transfer,
@@ -531,7 +527,7 @@ int ipu_psys_kcmd_start(struct ipu_psys *psys, struct ipu_psys_kcmd *kcmd)
 	ret = ipu_fw_psys_pg_start(kcmd);
 	if (ret) {
 		dev_err(&psys->adev->dev, "failed to start kcmd!\n");
-		goto error;
+		return ret;
 	}
 
 	ipu_fw_psys_pg_dump(psys, kcmd, "run");
@@ -539,29 +535,10 @@ int ipu_psys_kcmd_start(struct ipu_psys *psys, struct ipu_psys_kcmd *kcmd)
 	ret = ipu_fw_psys_pg_disown(kcmd);
 	if (ret) {
 		dev_err(&psys->adev->dev, "failed to start kcmd!\n");
-		goto error;
+		return ret;
 	}
 
 	return 0;
-
-error:
-	dev_err(&psys->adev->dev, "failed to start process group\n");
-	return ret;
-}
-
-void ipu_psys_watchdog_work(struct work_struct *work)
-{
-	struct ipu_psys *psys = container_of(work,
-					     struct ipu_psys, watchdog_work);
-	dev_dbg(&psys->adev->dev, "watchdog for ppg not implemented yet!\n");
-}
-
-static void ipu_psys_watchdog(struct timer_list *t)
-{
-	struct ipu_psys_kcmd *kcmd = from_timer(kcmd, t, watchdog);
-	struct ipu_psys *psys = kcmd->fh->psys;
-
-	queue_work(IPU_PSYS_WORK_QUEUE, &psys->watchdog_work);
 }
 
 static int ipu_psys_kcmd_send_to_ppg_start(struct ipu_psys_kcmd *kcmd)
@@ -744,14 +721,13 @@ int ipu_psys_kcmd_new(struct ipu_psys_command *cmd, struct ipu_psys_fh *fh)
 		goto error;
 	}
 
-	if (!is_ppg_kcmd(kcmd)) {
+	if (ipu_fw_psys_pg_get_protocol(kcmd) !=
+			IPU_FW_PSYS_PROCESS_GROUP_PROTOCOL_PPG) {
 		dev_err(&psys->adev->dev, "No support legacy pg now\n");
 		ret = -EINVAL;
 		goto error;
 	}
 
-	timer_setup(&kcmd->watchdog, ipu_psys_watchdog, 0);
-
 	if (cmd->min_psys_freq) {
 		kcmd->constraint.min_freq = cmd->min_psys_freq;
 		ipu_buttress_add_psys_constraint(psys->adev->isp,
diff --git a/drivers/media/pci/intel/ipu6/ipu6ep-fw-resources.c b/drivers/media/pci/intel/ipu6/ipu6ep-fw-resources.c
index ca2ab3967e5c0..7b1ee7c6dc4ef 100644
--- a/drivers/media/pci/intel/ipu6/ipu6ep-fw-resources.c
+++ b/drivers/media/pci/intel/ipu6/ipu6ep-fw-resources.c
@@ -14,7 +14,7 @@
 /*
  * Cell types by cell IDs
  */
-const u8 ipu6ep_fw_psys_cell_types[IPU6EP_FW_PSYS_N_CELL_ID] = {
+static const u8 ipu6ep_fw_psys_cell_types[IPU6EP_FW_PSYS_N_CELL_ID] = {
 	IPU6_FW_PSYS_SP_CTRL_TYPE_ID,
 	IPU6_FW_PSYS_VP_TYPE_ID,
 	IPU6_FW_PSYS_ACC_PSA_TYPE_ID,
@@ -46,7 +46,7 @@ const u8 ipu6ep_fw_psys_cell_types[IPU6EP_FW_PSYS_N_CELL_ID] = {
 	IPU6_FW_PSYS_TNR_TYPE_ID,
 };
 
-const u16 ipu6ep_fw_num_dev_channels[IPU6_FW_PSYS_N_DEV_CHN_ID] = {
+static const u16 ipu6ep_fw_num_dev_channels[IPU6_FW_PSYS_N_DEV_CHN_ID] = {
 	IPU6_FW_PSYS_DEV_CHN_DMA_EXT0_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_CHN_DMA_EXT1_READ_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_CHN_DMA_EXT1_WRITE_MAX_SIZE,
@@ -54,7 +54,7 @@ const u16 ipu6ep_fw_num_dev_channels[IPU6_FW_PSYS_N_DEV_CHN_ID] = {
 	IPU6_FW_PSYS_DEV_CHN_DMA_ISA_MAX_SIZE,
 };
 
-const u16 ipu6ep_fw_psys_mem_size[IPU6_FW_PSYS_N_MEM_ID] = {
+static const u16 ipu6ep_fw_psys_mem_size[IPU6_FW_PSYS_N_MEM_ID] = {
 	IPU6_FW_PSYS_VMEM0_MAX_SIZE,
 	IPU6_FW_PSYS_TRANSFER_VMEM0_MAX_SIZE,
 	IPU6_FW_PSYS_TRANSFER_VMEM1_MAX_SIZE,
@@ -67,7 +67,7 @@ const u16 ipu6ep_fw_psys_mem_size[IPU6_FW_PSYS_N_MEM_ID] = {
 	IPU6_FW_PSYS_PMEM0_MAX_SIZE
 };
 
-const u16 ipu6ep_fw_psys_dfms[IPU6_FW_PSYS_N_DEV_DFM_ID] = {
+static const u16 ipu6ep_fw_psys_dfms[IPU6_FW_PSYS_N_DEV_DFM_ID] = {
 	IPU6_FW_PSYS_DEV_DFM_BB_FULL_PORT_ID_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_DFM_BB_EMPTY_PORT_ID_MAX_SIZE,
 	IPU6_FW_PSYS_DEV_DFM_ISL_FULL_PORT_ID_MAX_SIZE,
@@ -76,7 +76,7 @@ const u16 ipu6ep_fw_psys_dfms[IPU6_FW_PSYS_N_DEV_DFM_ID] = {
 	IPU6_FW_PSYS_DEV_DFM_LB_EMPTY_PORT_ID_MAX_SIZE,
 };
 
-const u8
+static const u8
 ipu6ep_fw_psys_c_mem[IPU6EP_FW_PSYS_N_CELL_ID][IPU6_FW_PSYS_N_MEM_TYPE_ID] = {
 	{
 		/* IPU6_FW_PSYS_SP0_ID */
-- 
2.27.0

