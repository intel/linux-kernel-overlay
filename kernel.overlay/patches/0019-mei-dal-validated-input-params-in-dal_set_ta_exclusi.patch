From 965ab03162162f556c396288367a02bb5ad7e14b Mon Sep 17 00:00:00 2001
From: Yael Samet <yael.samet@intel.com>
Date: Tue, 1 Sep 2020 20:28:36 +0300
Subject: [PATCH 019/122] mei: dal: validated input params in
 dal_set_ta_exclusive_acces

Validate that ta_id isn't NULL in dal_set_ta_exclusive_access().

Signed-off-by: Yael Samet <yael.samet@intel.com>
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/dal_kdi.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/drivers/misc/mei/dal/dal_kdi.c b/drivers/misc/mei/dal/dal_kdi.c
index 41091ebe6c79..285dd1f5c7e6 100644
--- a/drivers/misc/mei/dal/dal_kdi.c
+++ b/drivers/misc/mei/dal/dal_kdi.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright(c) 2016-2019, Intel Corporation.
+ * Copyright(c) 2016-2020, Intel Corporation.
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ":%s: " fmt, __func__
@@ -371,11 +371,15 @@ EXPORT_SYMBOL(dal_close_session);
  *         -ENOMEM on memory allocation failure
  *         -EPERM when ta is owned by another client
  *         -EEXIST when ta is already owned by current client
+ *         -EINVAL when ta_id is NULL
  */
 int dal_set_ta_exclusive_access(const uuid_t *ta_id)
 {
 	int ret;
 
+	if (!ta_id)
+		return -EINVAL;
+
 	mutex_lock(&dal_kdi_lock);
 
 	ret = dal_access_policy_add(ta_id, DAL_INTF_KDI);
@@ -394,11 +398,15 @@ EXPORT_SYMBOL(dal_set_ta_exclusive_access);
  *         -ENODEV when the device can't be found
  *         -ENOENT when ta isn't found in exclusiveness ta list
  *         -EPERM when ta is owned by another client
+ *         -EINVAL when ta_id is NULL
  */
 int dal_unset_ta_exclusive_access(const uuid_t *ta_id)
 {
 	int ret;
 
+	if (!ta_id)
+		return -EINVAL;
+
 	mutex_lock(&dal_kdi_lock);
 
 	ret = dal_access_policy_remove(ta_id, DAL_INTF_KDI);
-- 
2.17.1

