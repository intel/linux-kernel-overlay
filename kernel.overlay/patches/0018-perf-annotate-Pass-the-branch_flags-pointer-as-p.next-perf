From f7f0c90754fbc08be98fc289be57d9e01aa505b0 Mon Sep 17 00:00:00 2001
From: Jin Yao <yao.jin@linux.intel.com>
Date: Sat, 17 Apr 2021 19:05:44 +0800
Subject: [PATCH 18/47] perf annotate: Pass the branch_flags pointer as
 parameter

Currently it just passes the 'flags.cycles' but in next patch
we need to pass the 'flags.events' as well to let user know
that the selected events incremented 0,1,2 or 3+ times.

So now we pass the whole branch_flags pointer as the parameter.

Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
---
 tools/perf/util/annotate.c | 16 ++++++++++------
 tools/perf/util/annotate.h |  3 ++-
 tools/perf/util/hist.c     |  2 +-
 3 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/tools/perf/util/annotate.c b/tools/perf/util/annotate.c
index abe1499a9164..51a449550cfa 100644
--- a/tools/perf/util/annotate.c
+++ b/tools/perf/util/annotate.c
@@ -30,6 +30,7 @@
 #include "bpf-event.h"
 #include "block-range.h"
 #include "string2.h"
+#include "branch.h"
 #include "util/event.h"
 #include "arch/common.h"
 #include <regex.h>
@@ -828,9 +829,11 @@ void symbol__annotate_zero_histograms(struct symbol *sym)
 
 static int __symbol__account_cycles(struct cyc_hist *ch,
 				    u64 start,
-				    unsigned offset, unsigned cycles,
+				    unsigned offset, struct branch_flags *flags,
 				    unsigned have_start)
 {
+	unsigned cycles = flags->cycles;
+
 	/*
 	 * For now we can only account one basic block per
 	 * final jump. But multiple could be overlapping.
@@ -965,7 +968,8 @@ static int symbol__inc_addr_samples(struct map_symbol *ms,
 }
 
 static int symbol__account_cycles(u64 addr, u64 start,
-				  struct symbol *sym, unsigned cycles)
+				  struct symbol *sym,
+				  struct branch_flags *flags)
 {
 	struct cyc_hist *cycles_hist;
 	unsigned offset;
@@ -987,18 +991,18 @@ static int symbol__account_cycles(u64 addr, u64 start,
 	offset = addr - sym->start;
 	return __symbol__account_cycles(cycles_hist,
 					start ? start - sym->start : 0,
-					offset, cycles,
+					offset, flags,
 					!!start);
 }
 
 int addr_map_symbol__account_cycles(struct addr_map_symbol *ams,
 				    struct addr_map_symbol *start,
-				    unsigned cycles)
+				    struct branch_flags *flags)
 {
 	u64 saddr = 0;
 	int err;
 
-	if (!cycles)
+	if (!flags->cycles)
 		return 0;
 
 	/*
@@ -1019,7 +1023,7 @@ int addr_map_symbol__account_cycles(struct addr_map_symbol *ams,
 			start ? start->addr : 0,
 			ams->ms.sym ? ams->ms.sym->start + ams->ms.map->start : 0,
 			saddr);
-	err = symbol__account_cycles(ams->al_addr, saddr, ams->ms.sym, cycles);
+	err = symbol__account_cycles(ams->al_addr, saddr, ams->ms.sym, flags);
 	if (err)
 		pr_debug2("account_cycles failed %d\n", err);
 	return err;
diff --git a/tools/perf/util/annotate.h b/tools/perf/util/annotate.h
index 3757416bcf46..b8c9fda71311 100644
--- a/tools/perf/util/annotate.h
+++ b/tools/perf/util/annotate.h
@@ -23,6 +23,7 @@ struct option;
 struct perf_sample;
 struct evsel;
 struct symbol;
+struct branch_flags;
 
 struct ins {
 	const char     *name;
@@ -343,7 +344,7 @@ int addr_map_symbol__inc_samples(struct addr_map_symbol *ams, struct perf_sample
 
 int addr_map_symbol__account_cycles(struct addr_map_symbol *ams,
 				    struct addr_map_symbol *start,
-				    unsigned cycles);
+				    struct branch_flags *flags);
 
 int hist_entry__inc_addr_samples(struct hist_entry *he, struct perf_sample *sample,
 				 struct evsel *evsel, u64 addr);
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index 65fe65ba03c2..da997266584d 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -2665,7 +2665,7 @@ void hist__account_cycles(struct branch_stack *bs, struct addr_location *al,
 			for (i = bs->nr - 1; i >= 0; i--) {
 				addr_map_symbol__account_cycles(&bi[i].from,
 					nonany_branch_mode ? NULL : prev,
-					bi[i].flags.cycles);
+					&bi[i].flags);
 				prev = &bi[i].to;
 
 				if (total_cycles)
-- 
2.27.0

