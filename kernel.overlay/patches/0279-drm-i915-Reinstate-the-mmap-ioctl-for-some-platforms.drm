From c7cb954c385ecab6de7d33c798945fa873cfd984 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20Hellstr=C3=B6m?= <thomas.hellstrom@linux.intel.com>
Date: Thu, 24 Jun 2021 13:29:14 +0200
Subject: [PATCH 0279/1423] drm/i915: Reinstate the mmap ioctl for some
 platforms
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Reinstate the mmap ioctl for all current integrated platforms.
The intention was really to have it disabled for discrete graphics
where we enforce a single mmap mode.

This was reported to break ADL-P with the media stack, which was not the
intention. Although longer term we do still plan to sunset this ioctl
even for integrated, in favour of using mmap_offset instead.

Fixes: 35cbd91eb541 ("drm/i915: Disable mmap ioctl for gen12+")
Signed-off-by: Thomas Hellstr√∂m <thomas.hellstrom@linux.intel.com>
Reviewed-by: Matthew Auld <matthew.auld@intel.com>
Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Signed-off-by: Matthew Auld <matthew.auld@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210624112914.311984-1-thomas.hellstrom@linux.intel.com
(cherry picked from commit d3f3baa3562a5d09f3e87f5fdf84952112807753)
Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
---
 drivers/gpu/drm/i915/gem/i915_gem_mman.c   |  8 +++++
 drivers/gpu/drm/i915/intel_memory_region.c | 10 +++---
 drivers/gpu/drm/i915/intel_memory_region.h |  9 ++---
 drivers/gpu/drm/i915/intel_region_ttm.c    | 42 ++++++++++++----------
 drivers/gpu/drm/i915/intel_region_ttm.h    | 12 ++++---
 5 files changed, 49 insertions(+), 32 deletions(-)

diff --git a/drivers/gpu/drm/i915/gem/i915_gem_mman.c b/drivers/gpu/drm/i915/gem/i915_gem_mman.c
index 8598a1c78a4c..215326764606 100644
--- a/drivers/gpu/drm/i915/gem/i915_gem_mman.c
+++ b/drivers/gpu/drm/i915/gem/i915_gem_mman.c
@@ -56,10 +56,18 @@ int
 i915_gem_mmap_ioctl(struct drm_device *dev, void *data,
 		    struct drm_file *file)
 {
+	struct drm_i915_private *i915 = to_i915(dev);
 	struct drm_i915_gem_mmap *args = data;
 	struct drm_i915_gem_object *obj;
 	unsigned long addr;
 
+	/*
+	 * mmap ioctl is disallowed for all discrete platforms,
+	 * and for all platforms with GRAPHICS_VER > 12.
+	 */
+	if (IS_DGFX(i915) || GRAPHICS_VER(i915) > 12)
+		return -EOPNOTSUPP;
+
 	if (args->flags & ~(I915_MMAP_WC))
 		return -EINVAL;
 
diff --git a/drivers/gpu/drm/i915/intel_memory_region.c b/drivers/gpu/drm/i915/intel_memory_region.c
index 4092cc987679..e6024eb7cca4 100644
--- a/drivers/gpu/drm/i915/intel_memory_region.c
+++ b/drivers/gpu/drm/i915/intel_memory_region.c
@@ -30,7 +30,7 @@ static const struct {
 
 struct intel_region_reserve {
 	struct list_head link;
-	void *node;
+	struct ttm_resource *res;
 };
 
 struct intel_memory_region *
@@ -78,7 +78,7 @@ void intel_memory_region_unreserve(struct intel_memory_region *mem)
 	mutex_lock(&mem->mm_lock);
 	list_for_each_entry_safe(reserve, next, &mem->reserved, link) {
 		list_del(&reserve->link);
-		mem->priv_ops->free(mem, reserve->node);
+		mem->priv_ops->free(mem, reserve->res);
 		kfree(reserve);
 	}
 	mutex_unlock(&mem->mm_lock);
@@ -106,9 +106,9 @@ int intel_memory_region_reserve(struct intel_memory_region *mem,
 	if (!reserve)
 		return -ENOMEM;
 
-	reserve->node = mem->priv_ops->reserve(mem, offset, size);
-	if (IS_ERR(reserve->node)) {
-		ret = PTR_ERR(reserve->node);
+	reserve->res = mem->priv_ops->reserve(mem, offset, size);
+	if (IS_ERR(reserve->res)) {
+		ret = PTR_ERR(reserve->res);
 		kfree(reserve);
 		return ret;
 	}
diff --git a/drivers/gpu/drm/i915/intel_memory_region.h b/drivers/gpu/drm/i915/intel_memory_region.h
index e69cde13daf2..1f7dac63abb7 100644
--- a/drivers/gpu/drm/i915/intel_memory_region.h
+++ b/drivers/gpu/drm/i915/intel_memory_region.h
@@ -17,6 +17,7 @@ struct drm_i915_private;
 struct drm_i915_gem_object;
 struct intel_memory_region;
 struct sg_table;
+struct ttm_resource;
 
 enum intel_memory_type {
 	INTEL_MEMORY_SYSTEM = I915_MEMORY_CLASS_SYSTEM,
@@ -59,11 +60,11 @@ struct intel_memory_region_ops {
 };
 
 struct intel_memory_region_private_ops {
-	void *(*reserve)(struct intel_memory_region *mem,
-			 resource_size_t offset,
-			 resource_size_t size);
+	struct ttm_resource *(*reserve)(struct intel_memory_region *mem,
+					resource_size_t offset,
+					resource_size_t size);
 	void (*free)(struct intel_memory_region *mem,
-		     void *node);
+		     struct ttm_resource *res);
 };
 
 struct intel_memory_region {
diff --git a/drivers/gpu/drm/i915/intel_region_ttm.c b/drivers/gpu/drm/i915/intel_region_ttm.c
index c8ac118c21f6..82a6727ede46 100644
--- a/drivers/gpu/drm/i915/intel_region_ttm.c
+++ b/drivers/gpu/drm/i915/intel_region_ttm.c
@@ -4,6 +4,7 @@
  */
 #include <drm/ttm/ttm_bo_driver.h>
 #include <drm/ttm/ttm_device.h>
+#include <drm/ttm/ttm_range_manager.h>
 
 #include "i915_drv.h"
 #include "i915_scatterlist.h"
@@ -64,14 +65,15 @@ static int intel_region_to_ttm_type(struct intel_memory_region *mem)
 	return type;
 }
 
-static void *intel_region_ttm_node_reserve(struct intel_memory_region *mem,
-					   resource_size_t offset,
-					   resource_size_t size)
+static struct ttm_resource *
+intel_region_ttm_node_reserve(struct intel_memory_region *mem,
+			      resource_size_t offset,
+			      resource_size_t size)
 {
 	struct ttm_resource_manager *man = mem->region_private;
 	struct ttm_place place = {};
-	struct ttm_resource res = {};
 	struct ttm_buffer_object mock_bo = {};
+	struct ttm_resource *res;
 	int ret;
 
 	/*
@@ -87,12 +89,12 @@ static void *intel_region_ttm_node_reserve(struct intel_memory_region *mem,
 
 	place.fpfn = offset >> PAGE_SHIFT;
 	place.lpfn = place.fpfn + (size >> PAGE_SHIFT);
-	res.num_pages = size >> PAGE_SHIFT;
+	mock_bo.base.size = size;
 	ret = man->func->alloc(man, &mock_bo, &place, &res);
 	if (ret == -ENOSPC)
 		ret = -ENXIO;
 
-	return ret ? ERR_PTR(ret) : res.mm_node;
+	return ret ? ERR_PTR(ret) : res;
 }
 
 /**
@@ -101,13 +103,11 @@ static void *intel_region_ttm_node_reserve(struct intel_memory_region *mem,
  * @node: The opaque node representing an allocation.
  */
 void intel_region_ttm_node_free(struct intel_memory_region *mem,
-				void *node)
+				struct ttm_resource *res)
 {
 	struct ttm_resource_manager *man = mem->region_private;
-	struct ttm_resource res = {};
 
-	res.mm_node = node;
-	man->func->free(man, &res);
+	man->func->free(man, res);
 }
 
 static const struct intel_memory_region_private_ops priv_ops = {
@@ -167,9 +167,14 @@ void intel_region_ttm_fini(struct intel_memory_region *mem)
  * Return: A malloced sg_table on success, an error pointer on failure.
  */
 struct sg_table *intel_region_ttm_node_to_st(struct intel_memory_region *mem,
-					     void *node)
+					     struct ttm_resource *res)
 {
-	return i915_sg_from_mm_node(node, mem->region.start);
+	struct ttm_range_mgr_node *range_node =
+		container_of(res, typeof(*range_node), base);
+
+	GEM_WARN_ON(!mem->is_range_manager);
+	return i915_sg_from_mm_node(&range_node->mm_nodes[0],
+				    mem->region.start);
 }
 
 /**
@@ -187,14 +192,15 @@ struct sg_table *intel_region_ttm_node_to_st(struct intel_memory_region *mem,
  *
  * Return: A valid pointer on success, an error pointer on failure.
  */
-void *intel_region_ttm_node_alloc(struct intel_memory_region *mem,
-				  resource_size_t size,
-				  unsigned int flags)
+struct ttm_resource *
+intel_region_ttm_node_alloc(struct intel_memory_region *mem,
+			    resource_size_t size,
+			    unsigned int flags)
 {
 	struct ttm_resource_manager *man = mem->region_private;
 	struct ttm_place place = {};
-	struct ttm_resource res = {};
 	struct ttm_buffer_object mock_bo = {};
+	struct ttm_resource *res;
 	int ret;
 
 	/*
@@ -202,7 +208,7 @@ void *intel_region_ttm_node_alloc(struct intel_memory_region *mem,
 	 * manager and contigous and min page size would be fulfilled
 	 * by default if size is min page size aligned.
 	 */
-	res.num_pages = size >> PAGE_SHIFT;
+	mock_bo.base.size = size;
 
 	if (mem->is_range_manager) {
 		if (size >= SZ_1G)
@@ -216,5 +222,5 @@ void *intel_region_ttm_node_alloc(struct intel_memory_region *mem,
 	ret = man->func->alloc(man, &mock_bo, &place, &res);
 	if (ret == -ENOSPC)
 		ret = -ENXIO;
-	return ret ? ERR_PTR(ret) : res.mm_node;
+	return ret ? ERR_PTR(ret) : res;
 }
diff --git a/drivers/gpu/drm/i915/intel_region_ttm.h b/drivers/gpu/drm/i915/intel_region_ttm.h
index 1c82c6c3429d..11b0574ab791 100644
--- a/drivers/gpu/drm/i915/intel_region_ttm.h
+++ b/drivers/gpu/drm/i915/intel_region_ttm.h
@@ -11,6 +11,7 @@
 
 struct drm_i915_private;
 struct intel_memory_region;
+struct ttm_resource;
 
 int intel_region_ttm_device_init(struct drm_i915_private *dev_priv);
 
@@ -21,12 +22,13 @@ int intel_region_ttm_init(struct intel_memory_region *mem);
 void intel_region_ttm_fini(struct intel_memory_region *mem);
 
 struct sg_table *intel_region_ttm_node_to_st(struct intel_memory_region *mem,
-					     void *node);
+					     struct ttm_resource *res);
 
-void *intel_region_ttm_node_alloc(struct intel_memory_region *mem,
-				  resource_size_t size,
-				  unsigned int flags);
+struct ttm_resource *
+intel_region_ttm_node_alloc(struct intel_memory_region *mem,
+			    resource_size_t size,
+			    unsigned int flags);
 
 void intel_region_ttm_node_free(struct intel_memory_region *mem,
-				void *node);
+				struct ttm_resource *node);
 #endif /* _INTEL_REGION_TTM_H_ */
-- 
2.27.0

