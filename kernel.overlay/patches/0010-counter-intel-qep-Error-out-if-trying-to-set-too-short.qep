From 4b1f288040c436e80f1c19216c0e234ec192b0fd Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Thu, 27 May 2021 14:59:22 +0300
Subject: [PATCH 10/15] counter: intel-qep: Error out if trying to set too
 short spike filter

Do not silently pretend that spike filter is enabled when user space
supplies 1 clock period long filter length. Previously filter was
disabled when user space supplied shorter than 2 clock periods long
filter.

Review comment was "If userspace supplies a value that the filter cannot
support, I think it makes more sense to return an -EINVAL here. Otherwise,
the user may believe they have enabled the filter when it is in fact now
disabled."

I also noticed it made the sysfs behavior inconsistent. Write 10 and
read returns 0. So it is better to error out also for that reason.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/counter/intel-qep.c | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/drivers/counter/intel-qep.c b/drivers/counter/intel-qep.c
index 03380403346b..762efadee133 100644
--- a/drivers/counter/intel-qep.c
+++ b/drivers/counter/intel-qep.c
@@ -304,17 +304,19 @@ static ssize_t spike_filter_ns_write(struct counter_device *counter,
 		return ret;
 
 	/*
-	 * Spike filter length is (MAX_COUNT + 2) clock periods. Disable
-	 * filter when user space supplies shorter than 2 clock periods and
-	 * otherwise enable and set MAX_COUNT = clock periods - 2.
+	 * Spike filter length is (MAX_COUNT + 2) clock periods.
+	 * Disable filter when user space writes 0, enable for valid
+	 * nanoseconds values and error out otherwise.
 	 */
 	length /= INTEL_QEP_CLK_PERIOD_NS;
-	if (length < 2) {
+	if (length == 0) {
 		enable = false;
 		length = 0;
-	} else {
+	} else if (length >= 2) {
 		enable = true;
 		length -= 2;
+	} else {
+		return -EINVAL;
 	}
 
 	if (length > INTEL_QEPFLT_MAX_COUNT(length))
-- 
2.25.1

