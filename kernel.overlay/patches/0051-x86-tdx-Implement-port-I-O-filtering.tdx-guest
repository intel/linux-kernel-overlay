From 7518486b236186faca9bba30c9ecff4be973e227 Mon Sep 17 00:00:00 2001
From: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
Date: Fri, 17 Jul 2020 11:12:09 +0300
Subject: [PATCH 51/78] x86/tdx: Implement port I/O filtering

Add allowlist of ports that can be used for communication with the host.
Only RTC and PCI ranges are essential. For debug mode we also allow COM1
to be used for console as virtio console get initialized late.

The filtering is disabled for decompression code. It doesn't have
significant attack surface to care about.

Reviewed-by: Andi Kleen <ak@linux.intel.com>
Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
---
 arch/x86/include/asm/tdx.h   |  1 +
 arch/x86/kernel/tdx-filter.c | 30 ++++++++++++++++++++++++++++++
 arch/x86/kernel/tdx.c        |  8 ++++++++
 3 files changed, 39 insertions(+)

diff --git a/arch/x86/include/asm/tdx.h b/arch/x86/include/asm/tdx.h
index 1433a48d1c1d..d8c77ef45cb7 100644
--- a/arch/x86/include/asm/tdx.h
+++ b/arch/x86/include/asm/tdx.h
@@ -84,6 +84,7 @@ int tdg_handle_virtualization_exception(struct pt_regs *regs,
 		struct ve_info *ve);
 
 bool tdg_early_handle_ve(struct pt_regs *regs);
+bool tdg_allowed_port(short int port);
 
 extern phys_addr_t tdg_shared_mask(void);
 
diff --git a/arch/x86/kernel/tdx-filter.c b/arch/x86/kernel/tdx-filter.c
index 03c3d58e8d84..22a5f2c36f61 100644
--- a/arch/x86/kernel/tdx-filter.c
+++ b/arch/x86/kernel/tdx-filter.c
@@ -37,6 +37,36 @@ static struct dev_filter_node pci_filter_node = {
 	.data = &pci_data,
 };
 
+bool tdg_allowed_port(short int port)
+{
+	if (tdg_debug_enabled() && tdg_disable_filter)
+		return true;
+
+	switch (port) {
+	/* MC146818 RTC */
+	case 0x70 ... 0x71:
+	/* PCI */
+	case 0xcf8 ... 0xcff:
+		return true;
+	/* ACPI ports list:
+	 * 0600-0603 : ACPI PM1a_EVT_BLK
+	 * 0604-0605 : ACPI PM1a_CNT_BLK
+	 * 0608-060b : ACPI PM_TMR
+	 * 0620-062f : ACPI GPE0_BLK
+	 */
+	case 0x600 ... 0x62f:
+		return true;
+	/* COM1 */
+	case 0x3f8:
+	case 0x3f9:
+	case 0x3fa:
+	case 0x3fd:
+		return tdg_debug_enabled();
+	default:
+		return false;
+	}
+}
+
 void __init tdg_filter_init(void)
 {
 	if (!prot_guest_has(PR_GUEST_TDX))
diff --git a/arch/x86/kernel/tdx.c b/arch/x86/kernel/tdx.c
index c110b9514199..b8c40d42f932 100644
--- a/arch/x86/kernel/tdx.c
+++ b/arch/x86/kernel/tdx.c
@@ -314,6 +314,14 @@ static void tdg_handle_io(struct pt_regs *regs, u32 exit_qual)
 	/* I/O strings ops are unrolled at build time. */
 	BUG_ON(string);
 
+	if (!tdg_allowed_port(port)) {
+		if (!out) {
+			regs->ax &= ~mask;
+			regs->ax |= (UINT_MAX & mask);
+		}
+		return;
+	}
+
 	if (!out) {
 		ret = __trace_tdx_hypercall(EXIT_REASON_IO_INSTRUCTION,
 					    size, out, port, regs->ax,
-- 
2.27.0

