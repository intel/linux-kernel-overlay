From 9b5525f2d058184f86dc52b1077c829b2daac836 Mon Sep 17 00:00:00 2001
From: Andi Kleen <ak@linux.intel.com>
Date: Fri, 18 Jun 2021 19:11:08 -0700
Subject: [PATCH 50/82] x86/tdx: Block Xen initialization in TDX

Xen has a lot of complicated code that would be a lot of work to audit
and harden. Right now nobody is planning to enable TDX on Xen, so it
seems safer to just disable it. In principle a malicious hypervisor
could fake being Xen and then use a potential hole in the Xen drivers
to attack the guest.

If Xen ever gets enabled for TDX this can be removed, but of course in
this case the drivers and other Xen code would need to be audited and
hardened first.

Add a CPUID prot_guest_has filter and use that to disallow Xen HVM
initialization. For Xen PVH it's impossible anyways because that
requires a special entry point that even a malicious hypervisor
couldn't call.

Cc: jgross@suse.com
Signed-off-by: Andi Kleen <ak@linux.intel.com>
Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
---
 arch/x86/kernel/tdx.c           | 1 +
 arch/x86/xen/enlighten_hvm.c    | 8 ++++++++
 include/linux/protected_guest.h | 2 ++
 3 files changed, 11 insertions(+)

diff --git a/arch/x86/kernel/tdx.c b/arch/x86/kernel/tdx.c
index 6afe629a7cb0..3e8fd00f4692 100644
--- a/arch/x86/kernel/tdx.c
+++ b/arch/x86/kernel/tdx.c
@@ -113,6 +113,7 @@ bool tdx_prot_guest_has(unsigned long flag)
 	case PR_GUEST_UNROLL_STRING_IO:
 	case PR_GUEST_SHARED_MAPPING_INIT:
 	case PR_GUEST_TDX:
+	case PR_GUEST_CPUID_FILTER:
 		return tdx_guest_enabled;
 	case PR_GUEST_DRIVER_FILTER:
 		return tdg_filter_enabled() && tdx_guest_enabled;
diff --git a/arch/x86/xen/enlighten_hvm.c b/arch/x86/xen/enlighten_hvm.c
index e68ea5f4ad1c..05c197ea517f 100644
--- a/arch/x86/xen/enlighten_hvm.c
+++ b/arch/x86/xen/enlighten_hvm.c
@@ -281,6 +281,14 @@ static uint32_t __init xen_platform_hvm(void)
 	uint32_t xen_domain = xen_cpuid_base();
 	struct x86_hyper_init *h = &x86_hyper_xen_hvm.init;
 
+	/*
+	 * Make sure a malicious hypervisor cannot fake being Xen through CPUID.
+	 * It cannot fake being Xen-PV because that would need a special entry
+	 * point.
+	 */
+	if (prot_guest_has(PR_GUEST_CPUID_FILTER))
+		return 0;
+
 	if (xen_pv_domain())
 		return 0;
 
diff --git a/include/linux/protected_guest.h b/include/linux/protected_guest.h
index 805b79a70543..0bfe5e081021 100644
--- a/include/linux/protected_guest.h
+++ b/include/linux/protected_guest.h
@@ -22,6 +22,8 @@
 #define PR_GUEST_SHARED_MAPPING_INIT		0x1004
 /* Support for driver filter */
 #define PR_GUEST_DRIVER_FILTER			0x1005
+/* Support for filtering some CPUIDs */
+#define PR_GUEST_CPUID_FILTER			0x1006
 
 #ifdef CONFIG_ARCH_HAS_PROTECTED_GUEST
 #include <asm/protected_guest.h>
-- 
2.27.0

