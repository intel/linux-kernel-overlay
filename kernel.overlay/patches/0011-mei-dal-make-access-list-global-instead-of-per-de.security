From 40e91549ea45575723cee83418ff1b4338f78ef6 Mon Sep 17 00:00:00 2001
From: Yael Samet <yael.samet@intel.com>
Date: Mon, 22 Jul 2019 21:36:09 +0300
Subject: [PATCH 11/24] mei: dal: make access list global instead of per
 device.

Instead of a TA access list for each dal
device, there is a global one, exported via
kernel interface.

Change-Id: I75005f37491b7b0daf551b23a265ad29773d935c
Signed-off-by: Yael Samet <yael.samet@intel.com>
Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
---
 drivers/misc/mei/dal/dal_class.c     |  8 +--
 drivers/misc/mei/dal/dal_dev.h       | 15 +++---
 drivers/misc/mei/dal/dal_kdi.c       | 36 ++-----------
 drivers/misc/mei/dal/dal_ta_access.c | 81 +++++++++-------------------
 4 files changed, 37 insertions(+), 103 deletions(-)

diff --git a/drivers/misc/mei/dal/dal_class.c b/drivers/misc/mei/dal/dal_class.c
index b5a0201a1f73..3ed80393a337 100644
--- a/drivers/misc/mei/dal/dal_class.c
+++ b/drivers/misc/mei/dal/dal_class.c
@@ -319,7 +319,6 @@ static int dal_validate_access(const struct bh_command_header *hdr,
 			       size_t count, void *ctx)
 {
 	struct dal_client *dc = ctx;
-	struct dal_device *ddev = dc->ddev;
 	const uuid_t *ta_id;
 
 	if (!bh_msg_is_cmd_open_session(hdr))
@@ -329,7 +328,7 @@ static int dal_validate_access(const struct bh_command_header *hdr,
 	if (!ta_id)
 		return -EINVAL;
 
-	return dal_access_policy_allowed(ddev, ta_id, dc);
+	return dal_access_policy_allowed(ta_id, dc->intf);
 }
 
 /**
@@ -675,7 +674,6 @@ static void dal_device_release(struct device *dev)
 {
 	struct dal_device *ddev = to_dal_device(dev);
 
-	dal_access_list_free(ddev);
 	kfree(ddev->bh_fw_msg.msg);
 	kfree(ddev);
 }
@@ -727,10 +725,6 @@ static int dal_probe(struct mei_cl_device *cldev,
 		goto err_unregister;
 	}
 
-	ret = dal_access_list_init(ddev);
-	if (ret)
-		goto err_unregister;
-
 	ret = dal_mei_enable(ddev);
 	if (ret < 0)
 		goto err_unregister;
diff --git a/drivers/misc/mei/dal/dal_dev.h b/drivers/misc/mei/dal/dal_dev.h
index 1cf178786f42..80630cc846f7 100644
--- a/drivers/misc/mei/dal/dal_dev.h
+++ b/drivers/misc/mei/dal/dal_dev.h
@@ -27,6 +27,8 @@ extern struct class *dal_class;
 enum dal_intf {
 	DAL_INTF_KDI,
 	DAL_INTF_CDEV,
+
+	DAL_INTF_MAX
 };
 
 /**
@@ -152,13 +154,10 @@ int dal_kdi_recv(unsigned int handle, unsigned char *buf, size_t *count);
 int dal_kdi_init(void);
 void dal_kdi_exit(void);
 
-int dal_access_policy_add(struct dal_device *ddev,
-			  const uuid_t *ta_id, void *owner);
-int dal_access_policy_remove(struct dal_device *ddev,
-			     const uuid_t *ta_id, void *owner);
-int dal_access_policy_allowed(struct dal_device *ddev,
-			      const uuid_t *ta_id, void *owner);
-void dal_access_list_free(struct dal_device *ddev);
-int dal_access_list_init(struct dal_device *ddev);
+int dal_access_policy_add(const uuid_t *ta_id, enum dal_intf owner);
+int dal_access_policy_remove(const uuid_t *ta_id, enum dal_intf owner);
+int dal_access_policy_allowed(const uuid_t *ta_id, enum dal_intf owner);
+void dal_access_list_free(void);
+int dal_access_list_init(void);
 
 #endif /* _DAL_KDI_H_ */
diff --git a/drivers/misc/mei/dal/dal_kdi.c b/drivers/misc/mei/dal/dal_kdi.c
index e9805596c91a..41091ebe6c79 100644
--- a/drivers/misc/mei/dal/dal_kdi.c
+++ b/drivers/misc/mei/dal/dal_kdi.c
@@ -374,27 +374,12 @@ EXPORT_SYMBOL(dal_close_session);
  */
 int dal_set_ta_exclusive_access(const uuid_t *ta_id)
 {
-	struct dal_device *ddev;
-	struct device *dev;
-	struct dal_client *dc;
 	int ret;
 
 	mutex_lock(&dal_kdi_lock);
 
-	dev = dal_find_dev(DAL_MEI_DEVICE_IVM);
-	if (!dev) {
-		dev_dbg(dev, "can't find device\n");
-		ret = -ENODEV;
-		goto unlock;
-	}
+	ret = dal_access_policy_add(ta_id, DAL_INTF_KDI);
 
-	ddev = to_dal_device(dev);
-	dc = ddev->clients[DAL_INTF_KDI];
-
-	ret = dal_access_policy_add(ddev, ta_id, dc);
-
-	put_device(dev);
-unlock:
 	mutex_unlock(&dal_kdi_lock);
 	return ret;
 }
@@ -412,27 +397,12 @@ EXPORT_SYMBOL(dal_set_ta_exclusive_access);
  */
 int dal_unset_ta_exclusive_access(const uuid_t *ta_id)
 {
-	struct dal_device *ddev;
-	struct device *dev;
-	struct dal_client *dc;
 	int ret;
 
 	mutex_lock(&dal_kdi_lock);
 
-	dev = dal_find_dev(DAL_MEI_DEVICE_IVM);
-	if (!dev) {
-		dev_dbg(dev, "can't find device\n");
-		ret = -ENODEV;
-		goto unlock;
-	}
+	ret = dal_access_policy_remove(ta_id, DAL_INTF_KDI);
 
-	ddev = to_dal_device(dev);
-	dc = ddev->clients[DAL_INTF_KDI];
-
-	ret = dal_access_policy_remove(ddev, ta_id, dc);
-
-	put_device(dev);
-unlock:
 	mutex_unlock(&dal_kdi_lock);
 	return ret;
 }
@@ -532,6 +502,7 @@ int dal_kdi_init(void)
 	int ret;
 
 	bh_init_internal();
+	dal_access_list_init();
 
 	dal_kdi_interface.class = dal_class;
 	ret = class_interface_register(&dal_kdi_interface);
@@ -553,5 +524,6 @@ int dal_kdi_init(void)
 void dal_kdi_exit(void)
 {
 	bh_deinit_internal();
+	dal_access_list_free();
 	class_interface_unregister(&dal_kdi_interface);
 }
diff --git a/drivers/misc/mei/dal/dal_ta_access.c b/drivers/misc/mei/dal/dal_ta_access.c
index 23f5b424de62..cb19ce7a1458 100644
--- a/drivers/misc/mei/dal/dal_ta_access.c
+++ b/drivers/misc/mei/dal/dal_ta_access.c
@@ -15,6 +15,9 @@ static const uuid_t spooler_ta_id = UUID_INIT(0xba8d1643, 0x50b6, 0x49cc,
 					      0x86, 0x1d, 0x2c, 0x01,
 					      0xbe, 0xd1, 0x4b, 0xe8);
 
+/* dal_access_list, list of TAs with access restriction */
+static struct list_head dal_access_list;
+
 /**
  * struct dal_access_policy - ta access information node
  *
@@ -25,21 +28,9 @@ static const uuid_t spooler_ta_id = UUID_INIT(0xba8d1643, 0x50b6, 0x49cc,
 struct dal_access_policy {
 	struct list_head list;
 	uuid_t ta_id;
-	void *owner;
+	enum dal_intf owner;
 };
 
-/**
- * dal_dev_get_access_list - get access list of dal device
- *
- * @ddev: dal device
- *
- * Return: pointer to access list
- */
-static struct list_head *dal_dev_get_access_list(struct dal_device *ddev)
-{
-	return dev_get_drvdata(&ddev->dev);
-}
-
 /**
  * dal_access_policy_alloc - allocate memory and initialize access list node
  *
@@ -51,7 +42,7 @@ static struct list_head *dal_dev_get_access_list(struct dal_device *ddev)
  * Locking: called under "kdi_lock" lock
  */
 static struct dal_access_policy *
-dal_access_policy_alloc(const uuid_t *ta_id, void *owner)
+dal_access_policy_alloc(const uuid_t *ta_id, enum dal_intf owner)
 {
 	struct dal_access_policy *e;
 
@@ -90,7 +81,6 @@ dal_access_policy_find(struct list_head *access_list, const uuid_t *ta_id)
 /**
  * dal_access_policy_add - add access information of ta and its owner
  *
- * @ddev: dal device
  * @ta_id: trusted application id
  * @owner: owner of ta
  *
@@ -101,15 +91,13 @@ dal_access_policy_find(struct list_head *access_list, const uuid_t *ta_id)
  *
  * Locking: called under "kdi_lock" lock
  */
-int dal_access_policy_add(struct dal_device *ddev,
-			  const uuid_t *ta_id, void *owner)
+int dal_access_policy_add(const uuid_t *ta_id, enum dal_intf owner)
 {
-	struct list_head *access_list = dal_dev_get_access_list(ddev);
 	struct dal_access_policy *e;
 
-	e = dal_access_policy_find(access_list, ta_id);
+	e = dal_access_policy_find(&dal_access_list, ta_id);
 	if (e) {
-		if (!e->owner)
+		if (e->owner != owner)
 			return -EPERM;
 
 		return -EEXIST;
@@ -119,14 +107,13 @@ int dal_access_policy_add(struct dal_device *ddev,
 	if (!e)
 		return -ENOMEM;
 
-	list_add_tail(&e->list, access_list);
+	list_add_tail(&e->list, &dal_access_list);
 	return 0;
 }
 
 /**
  * dal_access_policy_remove - remove access information of ta and its owner
  *
- * @ddev: dal device
  * @ta_id: trusted application id
  * @owner: owner of ta
  *
@@ -136,17 +123,15 @@ int dal_access_policy_add(struct dal_device *ddev,
  *
  * Locking: called under "kdi_lock" lock
  */
-int dal_access_policy_remove(struct dal_device *ddev,
-			     const uuid_t *ta_id, void *owner)
+int dal_access_policy_remove(const uuid_t *ta_id, enum dal_intf owner)
 {
-	struct list_head *access_list = dal_dev_get_access_list(ddev);
 	struct dal_access_policy *e;
 
-	e = dal_access_policy_find(access_list, ta_id);
+	e = dal_access_policy_find(&dal_access_list, ta_id);
 	if (!e)
 		return -ENOENT;
 
-	if (!e->owner || e->owner != owner)
+	if (e->owner != owner)
 		return -EPERM;
 
 	list_del(&e->list);
@@ -157,7 +142,6 @@ int dal_access_policy_remove(struct dal_device *ddev,
 /**
  * dal_access_policy_allowed - check if owner is allowed to use ta
  *
- * @ddev: dal device
  * @ta_id: trusted application id
  * @owner: owner
  *
@@ -166,17 +150,19 @@ int dal_access_policy_remove(struct dal_device *ddev,
  *
  * Locking: called under "ddev->write_lock" lock
  */
-int dal_access_policy_allowed(struct dal_device *ddev,
-			      const uuid_t *ta_id, void *owner)
+int dal_access_policy_allowed(const uuid_t *ta_id, enum dal_intf owner)
 {
-	struct list_head *access_list = dal_dev_get_access_list(ddev);
 	struct dal_access_policy *e;
 
-	e = dal_access_policy_find(access_list, ta_id);
+	e = dal_access_policy_find(&dal_access_list, ta_id);
 	if (!e)
 		return 0;
 
-	if (e->owner && e->owner != owner)
+	/*
+	 * owner is DAL_INTF_MAX if the ta cannot be blocked
+	 * (currently only the spooler ta)
+	 */
+	if (e->owner != DAL_INTF_MAX && e->owner != owner)
 		return -EPERM;
 
 	return 0;
@@ -184,51 +170,34 @@ int dal_access_policy_allowed(struct dal_device *ddev,
 
 /**
  * dal_access_list_free - free memory of access list
- *
- * @ddev: dal device
  */
-void dal_access_list_free(struct dal_device *ddev)
+void dal_access_list_free(void)
 {
-	struct list_head *access_list = dal_dev_get_access_list(ddev);
 	struct dal_access_policy *e, *n;
 
-	if  (!access_list)
-		return;
-
-	list_for_each_entry_safe(e, n, access_list, list) {
+	list_for_each_entry_safe(e, n, &dal_access_list, list) {
 		list_del(&e->list);
 		kfree(e);
 	}
 
-	kfree(access_list);
-	dev_set_drvdata(&ddev->dev, NULL);
+	INIT_LIST_HEAD(&dal_access_list);
 }
 
 /**
  * dal_access_list_init - initialize an empty access list
  *
- * @ddev: dal device
- *
  * Note: Add spooler ta id with blank owner to the list.
  * This will prevent any user from setting itself owner of the spooler,
  * which will block others from openning session to it.
  *
  * Return: 0 on success
- *         -ENOMEM on memory allocation failure
  */
-int dal_access_list_init(struct dal_device *ddev)
+int dal_access_list_init(void)
 {
-	struct list_head *access_list;
-
-	access_list = kzalloc(sizeof(*access_list), GFP_KERNEL);
-	if (!access_list)
-		return -ENOMEM;
-
-	INIT_LIST_HEAD(access_list);
-	dev_set_drvdata(&ddev->dev, access_list);
+	INIT_LIST_HEAD(&dal_access_list);
 
 	/* Nobody can own SPOOLER TA */
-	dal_access_policy_add(ddev, &spooler_ta_id, NULL);
+	dal_access_policy_add(&spooler_ta_id, DAL_INTF_MAX);
 
 	return 0;
 }
-- 
2.25.1

