From 829a7302dc1a2909274ca47565d8ed29919a8a32 Mon Sep 17 00:00:00 2001
From: Srikanth Thokala <srikanth.thokala@intel.com>
Date: Thu, 1 Oct 2020 17:30:52 +0530
Subject: [PATCH 161/223] Proper formatting of local variables

Signed-off-by: Srikanth Thokala <srikanth.thokala@intel.com>
---
 drivers/misc/xlink-pcie/common/util.c      |  4 +-
 drivers/misc/xlink-pcie/local_host/core.c  | 75 ++++++++++------------
 drivers/misc/xlink-pcie/local_host/dma.c   | 51 ++++++++-------
 drivers/misc/xlink-pcie/local_host/epf.c   | 36 ++++++-----
 drivers/misc/xlink-pcie/remote_host/core.c | 61 +++++++++---------
 drivers/misc/xlink-pcie/remote_host/main.c |  5 +-
 drivers/misc/xlink-pcie/remote_host/pci.c  |  7 +-
 7 files changed, 120 insertions(+), 119 deletions(-)

diff --git a/drivers/misc/xlink-pcie/common/util.c b/drivers/misc/xlink-pcie/common/util.c
index 90001c025601..1526bb0a91b6 100644
--- a/drivers/misc/xlink-pcie/common/util.c
+++ b/drivers/misc/xlink-pcie/common/util.c
@@ -347,8 +347,8 @@ void intel_xpcie_add_bd_to_interface(struct xpcie *xpcie,
 static ssize_t debug_show(struct device *dev, struct device_attribute *attr,
 			  char *buf)
 {
-	struct xpcie *xpcie;
 	size_t bytes, tx_list_num, rx_list_num, tx_pool_num, rx_pool_num;
+	struct xpcie *xpcie;
 
 	xpcie = intel_xpcie_dev_to_xpcie(dev);
 	if (!xpcie)
@@ -386,9 +386,9 @@ static ssize_t debug_show(struct device *dev, struct device_attribute *attr,
 static ssize_t debug_store(struct device *dev, struct device_attribute *attr,
 			   const char *buf, size_t count)
 {
+	struct xpcie *xpcie;
 	long value;
 	int rc;
-	struct xpcie *xpcie;
 
 	xpcie = intel_xpcie_dev_to_xpcie(dev);
 	if (!xpcie)
diff --git a/drivers/misc/xlink-pcie/local_host/core.c b/drivers/misc/xlink-pcie/local_host/core.c
index b42d9c7c763c..3c9cffd0ed29 100644
--- a/drivers/misc/xlink-pcie/local_host/core.c
+++ b/drivers/misc/xlink-pcie/local_host/core.c
@@ -72,16 +72,17 @@ static void intel_xpcie_unmap_dma(struct xpcie *xpcie,
 
 static void intel_xpcie_set_cap_txrx(struct xpcie *xpcie)
 {
-	struct xpcie_cap_txrx *cap;
-	struct xpcie_cap_hdr *hdr;
-	u32 start = sizeof(struct xpcie_mmio);
 	size_t hdr_len = sizeof(struct xpcie_cap_txrx);
 	size_t tx_len = sizeof(struct xpcie_transfer_desc) *
 				XPCIE_NUM_TX_DESCS;
 	size_t rx_len = sizeof(struct xpcie_transfer_desc) *
 				XPCIE_NUM_RX_DESCS;
-	u16 next = (u16)(start + hdr_len + tx_len + rx_len);
+	u32 start = sizeof(struct xpcie_mmio);
+	struct xpcie_cap_txrx *cap;
+	struct xpcie_cap_hdr *hdr;
+	u16 next;
 
+	next = (u16)(start + hdr_len + tx_len + rx_len);
 	xpcie->mmio->cap_offset = start;
 	cap = (void *)xpcie->mmio + start;
 	memset(cap, 0, sizeof(struct xpcie_cap_txrx));
@@ -167,14 +168,13 @@ static void intel_xpcie_txrx_cleanup(struct xpcie *xpcie)
 static int intel_xpcie_txrx_init(struct xpcie *xpcie,
 				 struct xpcie_cap_txrx *cap)
 {
-	int index;
-	int ndesc;
-	struct xpcie_buf_desc *bd;
-	struct xpcie_stream *tx = &xpcie->tx;
-	struct xpcie_stream *rx = &xpcie->rx;
 	struct xpcie_epf *xpcie_epf = container_of(xpcie,
 						   struct xpcie_epf, xpcie);
 	struct device *dma_dev = xpcie_epf->epf->epc->dev.parent;
+	struct xpcie_stream *tx = &xpcie->tx;
+	struct xpcie_stream *rx = &xpcie->rx;
+	struct xpcie_buf_desc *bd;
+	int index, ndesc;
 
 	xpcie->txrx = cap;
 	xpcie->fragment_size = cap->fragment_size;
@@ -272,8 +272,8 @@ static int intel_xpcie_txrx_init(struct xpcie *xpcie,
 
 static int intel_xpcie_discover_txrx(struct xpcie *xpcie)
 {
-	int error;
 	struct xpcie_cap_txrx *cap;
+	int error;
 
 	cap = intel_xpcie_cap_find(xpcie, 0, XPCIE_CAP_TXRX);
 	if (cap) {
@@ -302,21 +302,18 @@ static void intel_xpcie_start_rx(struct xpcie *xpcie, unsigned long delay)
 static void intel_xpcie_rx_event_handler(struct work_struct *work)
 {
 	struct xpcie *xpcie = container_of(work, struct xpcie, rx_event.work);
-	int rc;
-	u16 interface;
-	u32 head, tail, ndesc, length;
-	u64 address;
-	u32 initial_head;
-	int descs_num = 0;
-	int chan = 0;
-	struct xpcie_stream *rx = &xpcie->rx;
 	struct xpcie_epf *xpcie_epf = container_of(xpcie,
 						   struct xpcie_epf, xpcie);
-	struct xpcie_dma_ll_desc *desc;
 	struct xpcie_buf_desc *bd_head, *bd_tail, *bd;
-	struct xpcie_transfer_desc *td;
+	u32 head, tail, ndesc, length, initial_head;
 	unsigned long delay = msecs_to_jiffies(1);
+	struct xpcie_stream *rx = &xpcie->rx;
+	struct xpcie_dma_ll_desc *desc;
+	struct xpcie_transfer_desc *td;
+	int descs_num = 0, chan = 0, rc;
 	bool reset_work = false;
+	u16 interface;
+	u64 address;
 
 	intel_xpcie_debug_incr(xpcie, &xpcie->stats.rx_event_runs, 1);
 
@@ -435,20 +432,16 @@ static void intel_xpcie_rx_event_handler(struct work_struct *work)
 static void intel_xpcie_tx_event_handler(struct work_struct *work)
 {
 	struct xpcie *xpcie = container_of(work, struct xpcie, tx_event.work);
-
-	int rc;
-	u32 head, tail, ndesc;
-	u64 address;
-	u32 initial_tail;
-	int descs_num = 0;
-	int chan = 0;
-	struct xpcie_stream *tx = &xpcie->tx;
 	struct xpcie_epf *xpcie_epf = container_of(xpcie,
 						   struct xpcie_epf, xpcie);
-	struct xpcie_dma_ll_desc *desc;
 	struct xpcie_buf_desc *bd_head, *bd_tail, *bd;
+	struct xpcie_stream *tx = &xpcie->tx;
+	u32 head, tail, ndesc, initial_tail;
+	struct xpcie_dma_ll_desc *desc;
 	struct xpcie_transfer_desc *td;
 	size_t bytes = 0, buffers = 0;
+	int descs_num = 0, chan = 0, rc;
+	u64 address;
 
 	intel_xpcie_debug_incr(xpcie, &xpcie->stats.tx_event_runs, 1);
 
@@ -608,9 +601,9 @@ static void intel_xpcie_events_cleanup(struct xpcie *xpcie)
 
 int intel_xpcie_core_init(struct xpcie *xpcie)
 {
-	int error;
 	struct xpcie_epf *xpcie_epf = container_of(xpcie,
 						   struct xpcie_epf, xpcie);
+	int error;
 
 	intel_xpcie_init_debug(xpcie, &xpcie_epf->epf->dev);
 
@@ -663,15 +656,16 @@ void intel_xpcie_core_cleanup(struct xpcie *xpcie)
 int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer,
 			  size_t *length, u32 timeout_ms)
 {
-	int ret = 0;
+	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
 	struct xpcie_interface *inf = &xpcie->interfaces[0];
-	size_t len = *length;
-	size_t remaining = len;
-	struct xpcie_buf_desc *bd;
 	unsigned long jiffies_start = jiffies;
+	struct xpcie_buf_desc *bd;
 	long jiffies_passed = 0;
-	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
+	size_t len, remaining;
+	int ret = 0;
 
+	len = *length;
+	remaining = len;
 	*length = 0;
 	if (len == 0)
 		return -EINVAL;
@@ -753,15 +747,16 @@ int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer,
 int intel_xpcie_core_write(struct xpcie *xpcie, void *buffer,
 			   size_t *length, u32 timeout_ms)
 {
-	int ret;
-	size_t len = *length;
-	size_t remaining = len;
+	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
 	struct xpcie_interface *inf = &xpcie->interfaces[0];
-	struct xpcie_buf_desc *bd, *head;
 	unsigned long jiffies_start = jiffies;
+	struct xpcie_buf_desc *bd, *head;
 	long jiffies_passed = 0;
-	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
+	size_t remaining, len;
+	int ret;
 
+	len = *length;
+	remaining = len;
 	*length = 0;
 	if (len == 0)
 		return -EINVAL;
diff --git a/drivers/misc/xlink-pcie/local_host/dma.c b/drivers/misc/xlink-pcie/local_host/dma.c
index c4878c6066bb..5e12a984459b 100644
--- a/drivers/misc/xlink-pcie/local_host/dma.c
+++ b/drivers/misc/xlink-pcie/local_host/dma.c
@@ -88,6 +88,8 @@
 
 #define DMA_POLLING_TIMEOUT		1000000
 
+#define DMA_CHAN_NUM			(4)
+
 struct __packed pcie_dma_reg {
 	u32 dma_ctrl_data_arb_prior;
 	u32 reserved1;
@@ -151,8 +153,6 @@ enum xpcie_ep_engine_type {
 	READ_ENGINE
 };
 
-#define DMA_CHAN_NUM (4)
-
 static u32 dma_chan_offset[2][DMA_CHAN_NUM] = {
 	{ 0x200, 0x400, 0x600, 0x800 },
 	{ 0x300, 0x500, 0x700, 0x900 }
@@ -162,6 +162,7 @@ static void __iomem *intel_xpcie_ep_get_dma_base(struct pci_epf *epf)
 {
 	struct device *dev = &epf->dev;
 	struct xpcie_epf *xpcie_epf = (struct xpcie_epf *)dev->driver_data;
+
 	return xpcie_epf->dbi_base + DMA_DBI_OFFSET;
 }
 
@@ -207,9 +208,6 @@ static int intel_xpcie_ep_dma_disable(void __iomem *dma_base,
 static void intel_xpcie_ep_dma_enable(void __iomem *dma_base,
 				      enum xpcie_ep_engine_type rw)
 {
-	int i;
-	u32 offset;
-	struct pcie_dma_chan *dma_chan;
 	struct pcie_dma_reg *dma_reg = (struct pcie_dma_reg *)(dma_base);
 	void __iomem *engine_en = (rw == WRITE_ENGINE) ?
 					&dma_reg->dma_write_engine_en :
@@ -228,6 +226,9 @@ static void intel_xpcie_ep_dma_enable(void __iomem *dma_base,
 				&dma_reg->dma_read_channel_arb_weight_low;
 	u32 weight = (rw == WRITE_ENGINE) ? DMA_CHAN_WRITE_ALL_MAX_WEIGHT :
 					    DMA_CHAN_READ_ALL_MAX_WEIGHT;
+	struct pcie_dma_chan *dma_chan;
+	u32 offset;
+	int i;
 
 	iowrite32(DMA_ENGINE_EN_MASK, engine_en);
 
@@ -259,9 +260,9 @@ static void intel_xpcie_ep_dma_enable(void __iomem *dma_base,
 static int intel_xpcie_ep_dma_doorbell(struct xpcie_epf *xpcie_epf, int chan,
 				       void __iomem *doorbell)
 {
+	u32 val, pm_val;
 	int rc = 0;
 	int i = 20;
-	u32 val, pm_val;
 
 	val = ioread32(xpcie_epf->apb_base + PCIE_REGS_PCIE_APP_CNTRL);
 	iowrite32(val | APP_XFER_PENDING,
@@ -312,8 +313,8 @@ static void intel_xpcie_ep_dma_setup_ll_descs(struct pcie_dma_chan *dma_chan,
 						*desc_buf,
 					      int descs_num)
 {
-	int i = 0;
 	struct xpcie_dma_ll_desc *descs = desc_buf->virt;
+	int i = 0;
 
 	/* Setup linked list descriptors */
 	for (i = 0; i < descs_num - 1; i++)
@@ -333,12 +334,12 @@ static void intel_xpcie_ep_dma_setup_ll_descs(struct pcie_dma_chan *dma_chan,
 
 int intel_xpcie_ep_dma_write_ll(struct pci_epf *epf, int chan, int descs_num)
 {
-	int i, rc = 0;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
 	void __iomem *dma_base = xpcie_epf->dma_base;
-	struct pcie_dma_reg *dma_reg = (struct pcie_dma_reg *)dma_base;
-	struct pcie_dma_chan *dma_chan;
 	struct xpcie_dma_ll_desc_buf *desc_buf;
+	struct pcie_dma_chan *dma_chan;
+	struct pcie_dma_reg *dma_reg;
+	int i, rc = 0;
 
 	if (descs_num <= 0 || descs_num > XPCIE_NUM_TX_DESCS)
 		return -EINVAL;
@@ -346,6 +347,7 @@ int intel_xpcie_ep_dma_write_ll(struct pci_epf *epf, int chan, int descs_num)
 	if (chan < 0 || chan >= DMA_CHAN_NUM)
 		return -EINVAL;
 
+	dma_reg = (struct pcie_dma_reg *)dma_base;
 	dma_chan = (struct pcie_dma_chan *)
 		(dma_base + dma_chan_offset[WRITE_ENGINE][chan]);
 
@@ -392,12 +394,12 @@ int intel_xpcie_ep_dma_write_ll(struct pci_epf *epf, int chan, int descs_num)
 
 int intel_xpcie_ep_dma_read_ll(struct pci_epf *epf, int chan, int descs_num)
 {
-	int i, rc = 0;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
 	void __iomem *dma_base = xpcie_epf->dma_base;
-	struct pcie_dma_reg *dma_reg = (struct pcie_dma_reg *)dma_base;
-	struct pcie_dma_chan *dma_chan;
 	struct xpcie_dma_ll_desc_buf *desc_buf;
+	struct pcie_dma_chan *dma_chan;
+	struct pcie_dma_reg *dma_reg;
+	int i, rc = 0;
 
 	if (descs_num <= 0 || descs_num > XPCIE_NUM_RX_DESCS)
 		return -EINVAL;
@@ -405,6 +407,7 @@ int intel_xpcie_ep_dma_read_ll(struct pci_epf *epf, int chan, int descs_num)
 	if (chan < 0 || chan >= DMA_CHAN_NUM)
 		return -EINVAL;
 
+	dma_reg = (struct pcie_dma_reg *)dma_base;
 	dma_chan = (struct pcie_dma_chan *)
 		(dma_base + dma_chan_offset[READ_ENGINE][chan]);
 
@@ -455,8 +458,8 @@ int intel_xpcie_ep_dma_read_ll(struct pci_epf *epf, int chan, int descs_num)
 
 static void intel_xpcie_ep_dma_free_ll_descs_mem(struct xpcie_epf *xpcie_epf)
 {
-	int i;
 	struct device *dma_dev = xpcie_epf->epf->epc->dev.parent;
+	int i;
 
 	for (i = 0; i < DMA_CHAN_NUM; i++) {
 		if (xpcie_epf->tx_desc_buf[i].virt) {
@@ -481,12 +484,14 @@ static void intel_xpcie_ep_dma_free_ll_descs_mem(struct xpcie_epf *xpcie_epf)
 
 static int intel_xpcie_ep_dma_alloc_ll_descs_mem(struct xpcie_epf *xpcie_epf)
 {
-	int i;
 	struct device *dma_dev = xpcie_epf->epf->epc->dev.parent;
 	int tx_num = XPCIE_NUM_TX_DESCS + 1;
 	int rx_num = XPCIE_NUM_RX_DESCS + 1;
-	size_t tx_size = tx_num * sizeof(struct xpcie_dma_ll_desc);
-	size_t rx_size = rx_num * sizeof(struct xpcie_dma_ll_desc);
+	size_t tx_size, rx_size;
+	int i;
+
+	tx_size = tx_num * sizeof(struct xpcie_dma_ll_desc);
+	rx_size = rx_num * sizeof(struct xpcie_dma_ll_desc);
 
 	for (i = 0; i < DMA_CHAN_NUM; i++) {
 		xpcie_epf->tx_desc_buf[i].virt =
@@ -513,10 +518,12 @@ static int intel_xpcie_ep_dma_alloc_ll_descs_mem(struct xpcie_epf *xpcie_epf)
 bool intel_xpcie_ep_dma_enabled(struct pci_epf *epf)
 {
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
-	struct pcie_dma_reg *dma_reg = (struct pcie_dma_reg *)
-					xpcie_epf->dma_base;
-	void __iomem *w_engine_en = &dma_reg->dma_write_engine_en;
-	void __iomem *r_engine_en = &dma_reg->dma_read_engine_en;
+	void __iomem *w_engine_en, *r_engine_en;
+	struct pcie_dma_reg *dma_reg;
+
+	dma_reg = (struct pcie_dma_reg *)xpcie_epf->dma_base;
+	r_engine_en = &dma_reg->dma_read_engine_en;
+	w_engine_en = &dma_reg->dma_write_engine_en;
 
 	return (ioread32(w_engine_en) & DMA_ENGINE_EN_MASK) &&
 		(ioread32(r_engine_en) & DMA_ENGINE_EN_MASK);
@@ -552,8 +559,8 @@ int intel_xpcie_ep_dma_uninit(struct pci_epf *epf)
 
 int intel_xpcie_ep_dma_init(struct pci_epf *epf)
 {
-	int rc = 0;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
+	int rc = 0;
 
 	xpcie_epf->dma_base = intel_xpcie_ep_get_dma_base(epf);
 
diff --git a/drivers/misc/xlink-pcie/local_host/epf.c b/drivers/misc/xlink-pcie/local_host/epf.c
index f0570f9cf46b..65f2778783af 100644
--- a/drivers/misc/xlink-pcie/local_host/epf.c
+++ b/drivers/misc/xlink-pcie/local_host/epf.c
@@ -65,11 +65,11 @@ u32 xlink_sw_id;
 
 static irqreturn_t intel_xpcie_err_interrupt(int irq, void *args)
 {
+	struct xpcie_epf *xpcie_epf;
 	struct xpcie *xpcie = args;
-	struct xpcie_epf *xpcie_epf = container_of(xpcie,
-						   struct xpcie_epf, xpcie);
 	u32 val;
 
+	xpcie_epf = container_of(xpcie, struct xpcie_epf, xpcie);
 	val = ioread32(xpcie_epf->apb_base + PCIE_REGS_PCIE_ERR_INTR_FLAGS);
 	if (val & LINK_REQ_RST_FLG)
 		intel_xpcie_ep_dma_reset(xpcie_epf->epf);
@@ -81,12 +81,12 @@ static irqreturn_t intel_xpcie_err_interrupt(int irq, void *args)
 
 static irqreturn_t intel_xpcie_host_interrupt(int irq, void *args)
 {
+	struct xpcie_epf *xpcie_epf;
 	struct xpcie *xpcie = args;
-	struct xpcie_epf *xpcie_epf = container_of(xpcie,
-						   struct xpcie_epf, xpcie);
-	u32 val;
 	u8 event;
+	u32 val;
 
+	xpcie_epf = container_of(xpcie, struct xpcie_epf, xpcie);
 	val = ioread32(xpcie_epf->apb_base + PCIE_REGS_PCIE_INTR_FLAGS);
 	if (val & LBC_CII_EVENT_FLAG) {
 		iowrite32(LBC_CII_EVENT_FLAG,
@@ -202,8 +202,8 @@ static int intel_xpcie_configure_bar(struct pci_epf *epf,
 {
 	struct pci_epf_bar *epf_bar;
 	bool bar_fixed_64bit;
-	int i;
 	int ret;
+	int i;
 
 	for (i = BAR_0; i <= BAR_5; i++) {
 		epf_bar = &epf->bar[i];
@@ -235,8 +235,8 @@ static int intel_xpcie_configure_bar(struct pci_epf *epf,
 
 static void intel_xpcie_cleanup_bar(struct pci_epf *epf, enum pci_barno barno)
 {
-	struct pci_epc *epc = epf->epc;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
+	struct pci_epc *epc = epf->epc;
 
 	if (xpcie_epf->vaddr[barno]) {
 		pci_epc_clear_bar(epc, epf->func_no, &epf->bar[barno]);
@@ -259,11 +259,11 @@ static void intel_xpcie_cleanup_bars(struct pci_epf *epf)
 static int intel_xpcie_setup_bar(struct pci_epf *epf, enum pci_barno barno,
 				 size_t min_size, size_t align)
 {
-	int ret;
-	void *vaddr = NULL;
-	struct pci_epc *epc = epf->epc;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
 	struct pci_epf_bar *bar = &epf->bar[barno];
+	struct pci_epc *epc = epf->epc;
+	void *vaddr = NULL;
+	int ret;
 
 	bar->flags |= PCI_BASE_ADDRESS_MEM_TYPE_64;
 	if (!bar->size)
@@ -321,9 +321,9 @@ static int intel_xpcie_setup_bars(struct pci_epf *epf, size_t align)
 static int intel_xpcie_epf_get_platform_data(struct device *dev,
 					     struct xpcie_epf *xpcie_epf)
 {
-	struct resource *res;
 	struct platform_device *pdev = to_platform_device(dev);
 	struct device_node *soc_node, *version_node;
+	struct resource *res;
 	const char *prop;
 	int prop_size;
 
@@ -379,19 +379,20 @@ static int intel_xpcie_epf_get_platform_data(struct device *dev,
 
 static int intel_xpcie_epf_bind(struct pci_epf *epf)
 {
-	struct pci_epc *epc = epf->epc;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
-	struct device *dev = epc->dev.parent;
 	const struct pci_epc_features *features;
+	struct pci_epc *epc = epf->epc;
 	bool msi_capable = true;
+	struct device *dev;
 	size_t align = 0;
-	int ret;
 	u32 bus_num = 0;
 	u32 dev_num = 0;
+	int ret;
 
 	if (WARN_ON_ONCE(!epc))
 		return -EINVAL;
 
+	dev = epc->dev.parent;
 	features = pci_epc_get_features(epc, epf->func_no);
 	xpcie_epf->epc_features = features;
 	if (features) {
@@ -485,8 +486,8 @@ static int intel_xpcie_epf_bind(struct pci_epf *epf)
 
 static void intel_xpcie_epf_unbind(struct pci_epf *epf)
 {
-	struct pci_epc *epc = epf->epc;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
+	struct pci_epc *epc = epf->epc;
 
 	free_irq(xpcie_epf->irq, &xpcie_epf->xpcie);
 	free_irq(xpcie_epf->irq_err, &xpcie_epf->xpcie);
@@ -507,8 +508,8 @@ static void intel_xpcie_epf_linkup(struct pci_epf *epf)
 
 static int intel_xpcie_epf_probe(struct pci_epf *epf)
 {
-	struct xpcie_epf *xpcie_epf;
 	struct device *dev = &epf->dev;
+	struct xpcie_epf *xpcie_epf;
 	int ret = 0;
 
 	xpcie_epf = devm_kzalloc(dev, sizeof(*xpcie_epf), GFP_KERNEL);
@@ -525,8 +526,9 @@ static int intel_xpcie_epf_probe(struct pci_epf *epf)
 static void intel_xpcie_epf_shutdown(struct device *dev)
 {
 	struct pci_epf *epf = to_pci_epf(dev);
-	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
+	struct xpcie_epf *xpcie_epf;
 
+	xpcie_epf = epf_get_drvdata(epf);
 	/* Notify host in case PCIe hot plug not supported */
 	if (xpcie_epf && xpcie_epf->xpcie.status == XPCIE_STATUS_RUN) {
 		intel_xpcie_set_doorbell(&xpcie_epf->xpcie, FROM_DEVICE,
diff --git a/drivers/misc/xlink-pcie/remote_host/core.c b/drivers/misc/xlink-pcie/remote_host/core.c
index 6be577649551..1be04f8a2960 100644
--- a/drivers/misc/xlink-pcie/remote_host/core.c
+++ b/drivers/misc/xlink-pcie/remote_host/core.c
@@ -62,11 +62,11 @@ static void intel_xpcie_unmap_dma(struct xpcie *xpcie,
 
 static void intel_xpcie_txrx_cleanup(struct xpcie *xpcie)
 {
-	int index;
-	struct xpcie_buf_desc *bd;
+	struct xpcie_interface *inf = &xpcie->interfaces[0];
 	struct xpcie_stream *tx = &xpcie->tx;
 	struct xpcie_stream *rx = &xpcie->rx;
-	struct xpcie_interface *inf = &xpcie->interfaces[0];
+	struct xpcie_buf_desc *bd;
+	int index;
 
 	xpcie->stop_flag = true;
 	xpcie->no_tx_buffer = false;
@@ -117,12 +117,10 @@ static void intel_xpcie_txrx_cleanup(struct xpcie *xpcie)
 static int intel_xpcie_txrx_init(struct xpcie *xpcie,
 				 struct xpcie_cap_txrx *cap)
 {
-	int rc;
-	int index;
-	int ndesc;
-	struct xpcie_buf_desc *bd;
 	struct xpcie_stream *tx = &xpcie->tx;
 	struct xpcie_stream *rx = &xpcie->rx;
+	struct xpcie_buf_desc *bd;
+	int rc, index, ndesc;
 
 	xpcie->txrx = cap;
 	xpcie->fragment_size = ioread32(&cap->fragment_size);
@@ -212,8 +210,8 @@ static int intel_xpcie_txrx_init(struct xpcie *xpcie,
 
 static int intel_xpcie_discover_txrx(struct xpcie *xpcie)
 {
-	int error;
 	struct xpcie_cap_txrx *cap;
+	int error;
 
 	cap = intel_xpcie_cap_find(xpcie, 0, XPCIE_CAP_TXRX);
 	if (cap)
@@ -237,15 +235,14 @@ static void intel_xpcie_start_rx(struct xpcie *xpcie, unsigned long delay)
 static void intel_xpcie_rx_event_handler(struct work_struct *work)
 {
 	struct xpcie *xpcie = container_of(work, struct xpcie, rx_event.work);
-
-	int rc;
 	struct xpcie_dev *xdev = container_of(xpcie, struct xpcie_dev, xpcie);
-	u16 status, interface;
-	u32 head, tail, ndesc, length;
-	struct xpcie_stream *rx = &xpcie->rx;
 	struct xpcie_buf_desc *bd, *replacement = NULL;
-	struct xpcie_transfer_desc *td;
 	unsigned long delay = msecs_to_jiffies(1);
+	struct xpcie_stream *rx = &xpcie->rx;
+	struct xpcie_transfer_desc *td;
+	u32 head, tail, ndesc, length;
+	u16 status, interface;
+	int rc;
 
 	intel_xpcie_debug_incr(xpcie, &xpcie->stats.rx_event_runs, 1);
 
@@ -317,14 +314,13 @@ static void intel_xpcie_rx_event_handler(struct work_struct *work)
 static void intel_xpcie_tx_event_handler(struct work_struct *work)
 {
 	struct xpcie *xpcie = container_of(work, struct xpcie, tx_event.work);
-
-	u16 status;
 	struct xpcie_dev *xdev = container_of(xpcie, struct xpcie_dev, xpcie);
-	u32 head, tail, old, ndesc;
 	struct xpcie_stream *tx = &xpcie->tx;
-	struct xpcie_buf_desc *bd;
 	struct xpcie_transfer_desc *td;
+	u32 head, tail, old, ndesc;
+	struct xpcie_buf_desc *bd;
 	size_t bytes, buffers;
+	u16 status;
 
 	intel_xpcie_debug_incr(xpcie, &xpcie->stats.tx_event_runs, 1);
 
@@ -396,7 +392,9 @@ static void intel_xpcie_tx_event_handler(struct work_struct *work)
 static irqreturn_t intel_xpcie_interrupt(int irq, void *args)
 {
 	struct xpcie_dev *xdev = args;
-	struct xpcie *xpcie = &xdev->xpcie;
+	struct xpcie *xpcie;
+
+	xpcie = &xdev->xpcie;
 
 	if (intel_xpcie_get_doorbell(xpcie, FROM_DEVICE, DATA_SENT)) {
 		intel_xpcie_set_doorbell(xpcie, FROM_DEVICE, DATA_SENT, 0);
@@ -447,9 +445,8 @@ static void intel_xpcie_events_cleanup(struct xpcie *xpcie)
 
 int intel_xpcie_core_init(struct xpcie *xpcie)
 {
-	int rc;
-	int status;
 	struct xpcie_dev *xdev = container_of(xpcie, struct xpcie_dev, xpcie);
+	int status, rc;
 
 	status = intel_xpcie_get_device_status(xpcie);
 	if (status != XPCIE_STATUS_RUN) {
@@ -499,15 +496,16 @@ void intel_xpcie_core_cleanup(struct xpcie *xpcie)
 int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer, size_t *length,
 			  uint32_t timeout_ms)
 {
-	int ret = 0;
+	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
 	struct xpcie_interface *inf = &xpcie->interfaces[0];
-	size_t len = *length;
-	size_t remaining = len;
-	struct xpcie_buf_desc *bd;
 	unsigned long jiffies_start = jiffies;
+	struct xpcie_buf_desc *bd;
+	size_t remaining, len;
 	long jiffies_passed = 0;
-	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
+	int ret = 0;
 
+	len = *length;
+	remaining = len;
 	*length = 0;
 	if (len == 0)
 		return -EINVAL;
@@ -587,15 +585,16 @@ int intel_xpcie_core_read(struct xpcie *xpcie, void *buffer, size_t *length,
 int intel_xpcie_core_write(struct xpcie *xpcie, void *buffer, size_t *length,
 			   uint32_t timeout_ms)
 {
-	int ret;
-	size_t len = *length;
-	size_t remaining = len;
+	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
 	struct xpcie_interface *inf = &xpcie->interfaces[0];
-	struct xpcie_buf_desc *bd, *head;
 	unsigned long jiffies_start = jiffies;
+	struct xpcie_buf_desc *bd, *head;
 	long jiffies_passed = 0;
-	long jiffies_timeout = (long)msecs_to_jiffies(timeout_ms);
+	size_t remaining, len;
+	int ret;
 
+	len = *length;
+	remaining = len;
 	*length = 0;
 	if (len == 0)
 		return -EINVAL;
diff --git a/drivers/misc/xlink-pcie/remote_host/main.c b/drivers/misc/xlink-pcie/remote_host/main.c
index ffd440449430..55f9c63bd1ad 100644
--- a/drivers/misc/xlink-pcie/remote_host/main.c
+++ b/drivers/misc/xlink-pcie/remote_host/main.c
@@ -20,11 +20,10 @@ static bool driver_unload;
 static int intel_xpcie_probe(struct pci_dev *pdev,
 			     const struct pci_device_id *ent)
 {
-	int ret = 0;
-	u32 sw_devid = 0;
-	u32 hw_id = 0;
+	u32 hw_id = 0, sw_devid = 0;
 	bool new_device = false;
 	struct xpcie_dev *xdev;
+	int ret = 0;
 
 	hw_id = ((u16)pdev->bus->number << 8) | PCI_SLOT(pdev->devfn);
 
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.c b/drivers/misc/xlink-pcie/remote_host/pci.c
index b8e115def52b..a9572918a502 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.c
+++ b/drivers/misc/xlink-pcie/remote_host/pci.c
@@ -102,8 +102,8 @@ struct xpcie *intel_xpcie_dev_to_xpcie(struct device *dev)
 
 static void intel_xpcie_pci_set_aspm(struct xpcie_dev *xdev, int aspm)
 {
-	u8 cap_exp;
 	u16 link_control;
+	u8 cap_exp;
 
 	cap_exp = pci_find_capability(xdev->pci, PCI_CAP_ID_EXP);
 	if (!cap_exp) {
@@ -184,8 +184,7 @@ static void intel_xpcie_pci_irq_cleanup(struct xpcie_dev *xdev)
 static int intel_xpcie_pci_irq_init(struct xpcie_dev *xdev,
 				    irq_handler_t irq_handler)
 {
-	int irq;
-	int rc;
+	int rc, irq;
 
 	rc = pci_alloc_irq_vectors(xdev->pci, 1, 1, PCI_IRQ_MSI);
 	if (rc < 0) {
@@ -390,8 +389,8 @@ int intel_xpcie_pci_raise_irq(struct xpcie_dev *xdev,
 
 u32 intel_xpcie_get_device_num(u32 *id_list)
 {
-	u32 num = 0;
 	struct xpcie_dev *p;
+	u32 num = 0;
 
 	mutex_lock(&dev_list_mutex);
 
-- 
2.27.0

