From 3d8bcf19f44f071513d8b72d4cf7d5107b229e8f Mon Sep 17 00:00:00 2001
From: "K Naduvalath, Sumesh" <sumesh.k.naduvalath@intel.com>
Date: Mon, 3 Aug 2020 13:50:26 +0530
Subject: [PATCH 7/8] ishtp: Add PM calls to prevent eclite events

This fix addes suspend and resume calls to prevent events during Sx

Signed-off-by: K Naduvalath, Sumesh <sumesh.k.naduvalath@intel.com>
---
 drivers/platform/x86/intel_ishtp_eclite.c | 83 +++++++++++++++++++----
 1 file changed, 70 insertions(+), 13 deletions(-)

diff --git a/drivers/platform/x86/intel_ishtp_eclite.c b/drivers/platform/x86/intel_ishtp_eclite.c
index 5713634b1f53..2eebad914ef5 100644
--- a/drivers/platform/x86/intel_ishtp_eclite.c
+++ b/drivers/platform/x86/intel_ishtp_eclite.c
@@ -32,6 +32,7 @@
 #define ECL_CL_TX_RING_SIZE	8
 
 #define ECL_DATA_OPR_BUFLEN	384
+#define ECL_EVENTS_NOTIFY	333
 
 #define cmd_opr_offsetof(element)	offsetof(struct opregion_cmd, element)
 #define cl_data_to_dev(opr_dev)	ishtp_device((opr_dev)->cl_device)
@@ -79,6 +80,7 @@ struct ishtp_opregion_dev {
 	struct acpi_handle *acpi_handle;
 	unsigned int dsm_event_id;
 	unsigned int ish_link_ready;
+	unsigned int ish_pm_suspended;
 	unsigned int ish_read_done;
 	wait_queue_head_t read_wait;
 	wait_queue_head_t link_wait;
@@ -119,22 +121,24 @@ static int ecl_ish_cl_read(struct ishtp_opregion_dev *opr_dev)
 	len = sizeof(header);
 
 	rv = wait_event_interruptible_timeout(opr_dev->link_wait,
-					      opr_dev->ish_link_ready,
+					      (opr_dev->ish_link_ready &&
+					       !opr_dev->ish_pm_suspended),
 					      5 * HZ);
 	if (!rv) {
-		dev_warn(cl_data_to_dev(opr_dev),
-			 "[ish_rd] Timeout, Link not ready\n");
+		dev_err(cl_data_to_dev(opr_dev),
+			"[ish_rd] timeout, Link not ready\n");
+		return -EIO;
 	}
 
 	opr_dev->ish_read_done = false;
 
-	if (!opr_dev->ish_link_ready)
+	if (!opr_dev->ish_link_ready || opr_dev->ish_pm_suspended)
 		return -EIO;
 
 	rv = ishtp_cl_send(opr_dev->ecl_ishtp_cl, (uint8_t *)&header, len);
 	if (rv) {
 		dev_err(cl_data_to_dev(opr_dev), "ish-read : send failed\n");
-		return rv;
+		return -EIO;
 	}
 
 	dev_dbg(cl_data_to_dev(opr_dev),
@@ -147,7 +151,7 @@ static int ecl_ish_cl_read(struct ishtp_opregion_dev *opr_dev)
 					      5 * HZ);
 	if (!rv) {
 		dev_err(cl_data_to_dev(opr_dev),
-			 "[ish_rd] No response from firmware\n");
+			"[ish_rd] No response from firmware\n");
 		return -EIO;
 	}
 
@@ -178,9 +182,6 @@ static int ecl_ish_cl_write(struct ishtp_opregion_dev *opr_dev)
 	       opr_dev->opr_context.data_area.data + message.header.offset,
 	       message.header.data_len);
 
-	if (!opr_dev->ish_link_ready)
-		return 0;
-
 	dev_dbg(cl_data_to_dev(opr_dev),
 		"[ish_wr] off : %x, len : %x\n",
 		message.header.offset,
@@ -355,6 +356,24 @@ static void ecl_ish_process_rx_event(struct ishtp_opregion_dev *opr_dev)
 	schedule_work(&opr_dev->event_work);
 }
 
+static int ecl_ish_cl_enable_events(struct ishtp_opregion_dev *opr_dev,
+				     bool config_enable)
+{
+	struct ecl_message message = { 0 };
+	int len;
+
+	message.header.version = ECL_ISH_HEADER_VERSION;
+	message.header.data_type = ECL_MSG_DATA;
+	message.header.request_type = ECL_ISH_WRITE;
+	message.header.offset = ECL_EVENTS_NOTIFY;
+	message.header.data_len = 1;
+	message.payload[0] = config_enable;
+
+	len = sizeof(struct ecl_message_header) + message.header.data_len;
+
+	return ishtp_cl_send(opr_dev->ecl_ishtp_cl, (uint8_t *)&message, len);
+}
+
 static void ecl_ishtp_cl_event_cb(struct ishtp_cl_device *cl_device)
 {
 	struct ishtp_opregion_dev *opr_dev;
@@ -473,10 +492,12 @@ static void ecl_ishtp_cl_reset_handler(struct work_struct *work)
 
 	ishtp_register_event_cb(cl_device, ecl_ishtp_cl_event_cb);
 
-	opr_dev->ish_link_ready = true;
+	ecl_ish_cl_enable_events(opr_dev, true);
 
-	dev_err(cl_data_to_dev(opr_dev),
-		"[ish_rst] Reset success. Link ready.\n");
+	dev_info(cl_data_to_dev(opr_dev),
+			"[ish_rst] Reset Success. Link ready.\n");
+
+	opr_dev->ish_link_ready = true;
 
 	wake_up_interruptible(&opr_dev->link_wait);
 }
@@ -506,7 +527,6 @@ static int ecl_ishtp_cl_probe(struct ishtp_cl_device *cl_device)
 	INIT_WORK(&opr_dev->event_work, ecl_acpi_invoke_dsm);
 	INIT_WORK(&opr_dev->reset_work, ecl_ishtp_cl_reset_handler);
 
-
 	/* Initialize ish client device */
 	rv = ecl_ishtp_cl_init(ecl_ishtp_cl);
 	if (rv) {
@@ -522,6 +542,7 @@ static int ecl_ishtp_cl_probe(struct ishtp_cl_device *cl_device)
 	ishtp_get_device(cl_device);
 
 	opr_dev->ish_link_ready = true;
+	opr_dev->ish_pm_suspended = false;
 
 	/* Now find ACPI device and init opregion handlers */
 	rv = acpi_opregion_init(opr_dev);
@@ -534,6 +555,8 @@ static int ecl_ishtp_cl_probe(struct ishtp_cl_device *cl_device)
 	/* Reprobe devices depending on ECLite - battery, fan, etc. */
 	acpi_walk_dep_device_list(opr_dev->acpi_handle);
 
+	ecl_ish_cl_enable_events(opr_dev, true);
+
 	return 0;
 
 err_exit:
@@ -552,6 +575,8 @@ static int ecl_ishtp_cl_remove(struct ishtp_cl_device *cl_device)
 	struct ishtp_opregion_dev *opr_dev =
 		ishtp_get_client_data(ecl_ishtp_cl);
 
+	ecl_ish_cl_enable_events(opr_dev, false);
+
 	acpi_remove_address_space_handler(opr_dev->acpi_handle,
 					  ECLITE_CMD_OPREGION_ID,
 					  ecl_opregion_cmd_handler);
@@ -583,12 +608,44 @@ static int ecl_ishtp_cl_reset(struct ishtp_cl_device *cl_device)
 	return 0;
 }
 
+static int ecl_ishtp_cl_suspend(struct device *device)
+{
+	struct ishtp_cl_device *cl_device = ishtp_dev_to_cl_device(device);
+	struct ishtp_cl *ecl_ishtp_cl = ishtp_get_drvdata(cl_device);
+	struct ishtp_opregion_dev *opr_dev =
+		ishtp_get_client_data(ecl_ishtp_cl);
+
+	opr_dev->ish_pm_suspended = true;
+	ecl_ish_cl_enable_events(opr_dev, false);
+
+	return 0;
+}
+
+static int ecl_ishtp_cl_resume(struct device *device)
+{
+	struct ishtp_cl_device *cl_device = ishtp_dev_to_cl_device(device);
+	struct ishtp_cl *ecl_ishtp_cl = ishtp_get_drvdata(cl_device);
+	struct ishtp_opregion_dev *opr_dev =
+		ishtp_get_client_data(ecl_ishtp_cl);
+
+	ecl_ish_cl_enable_events(opr_dev, true);
+	opr_dev->ish_pm_suspended = false;
+
+	return 0;
+}
+
+static const struct dev_pm_ops ecl_ishtp_pm_ops = {
+	.suspend = ecl_ishtp_cl_suspend,
+	.resume = ecl_ishtp_cl_resume,
+};
+
 static struct ishtp_cl_driver ecl_ishtp_cl_driver = {
 	.name = "ishtp-eclite",
 	.guid = &ecl_ishtp_guid,
 	.probe = ecl_ishtp_cl_probe,
 	.remove = ecl_ishtp_cl_remove,
 	.reset = ecl_ishtp_cl_reset,
+	.driver.pm = &ecl_ishtp_pm_ops,
 };
 
 static int __init ecl_ishtp_init(void)
-- 
2.27.0

