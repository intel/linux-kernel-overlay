From 73e11309133cb0e68d77dba4cca5fee1a0e6c12e Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Tue, 16 Mar 2021 15:40:52 -0700
Subject: [PATCH 07/68] x86/cpu: Add a helper function to the hybrid the of a
 specific CPU

On a hybrid processor, there are cases in which it is necessary to
determine the type of a specific CPU (i.e, different than the CPU running
the code). An example of this case is exposing cpumasks of CPUs of a given
type in sysfs. Create a new helper function for such cases.

Cc: Andi Kleen <ak@linux.intel.com>
Cc: Andy Lutomirski <luto@kernel.org>
Cc: Dave Hansen <dave.hansen@intel.com>
Cc: Kan Liang <kan.liang@linux.intel.com>
Cc: "Peter Zijlstra (Intel)" <peterz@infradead.org>
Cc: "Rafael J. Wysocki" <rafael.j.wysocki@intel.com>
Cc: "Ravi V. Shankar" <ravi.v.shankar@intel.com>
Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Cc: linux-kernel@vger.kernel.org
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/include/asm/cpu.h  |  6 ++++++
 arch/x86/kernel/cpu/intel.c | 24 ++++++++++++++++++++++++
 2 files changed, 30 insertions(+)

diff --git a/arch/x86/include/asm/cpu.h b/arch/x86/include/asm/cpu.h
index 610905d7e541..9f85b22b3e19 100644
--- a/arch/x86/include/asm/cpu.h
+++ b/arch/x86/include/asm/cpu.h
@@ -46,6 +46,7 @@ extern void switch_to_sld(unsigned long tifn);
 extern bool handle_user_split_lock(struct pt_regs *regs, long error_code);
 extern bool handle_guest_split_lock(unsigned long ip);
 u8 get_this_hybrid_cpu_type(void);
+u8 get_hybrid_cpu_type(int cpu);
 #else
 static inline void __init cpu_set_core_cap_bits(struct cpuinfo_x86 *c) {}
 static inline void switch_to_sld(unsigned long tifn) {}
@@ -63,6 +64,11 @@ static inline u8 get_this_hybrid_cpu_type(void)
 {
 	return 0;
 }
+
+static inline u8 get_hybrid_cpu_cpu_type(void)
+{
+	return 0;
+}
 #endif
 #ifdef CONFIG_IA32_FEAT_CTL
 void init_ia32_feat_ctl(struct cpuinfo_x86 *c);
diff --git a/arch/x86/kernel/cpu/intel.c b/arch/x86/kernel/cpu/intel.c
index 189fcbe16590..805fbfce8cfa 100644
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@ -1209,3 +1209,27 @@ u8 get_this_hybrid_cpu_type(void)
 
 	return cpuid_eax(0x0000001a) >> X86_HYBRID_CPU_TYPE_ID_SHIFT;
 }
+
+static void __do_get_get_hybrid_cpu_type(void *data)
+{
+	u8 *type = data;
+
+	*type = get_this_hybrid_cpu_type();
+}
+
+u8 get_hybrid_cpu_type(int cpu)
+{
+	u8 type;
+
+	if (!cpu_feature_enabled(X86_FEATURE_HYBRID_CPU))
+		return 0;
+
+	if (cpu < 0 || cpu >= nr_cpu_ids)
+		return 0;
+
+	if (cpu == smp_processor_id())
+		return get_this_hybrid_cpu_type();
+
+	smp_call_function_single(cpu, __do_get_get_hybrid_cpu_type, &type, true);
+	return type;
+}
-- 
2.27.0

