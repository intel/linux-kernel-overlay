From a5a470e6bfd66958cfd441dcae7eae43666af49f Mon Sep 17 00:00:00 2001
From: Paul Murphy <paul.j.murphy@intel.com>
Date: Wed, 13 May 2020 19:52:13 +0100
Subject: [PATCH 112/223] keembay-vpu-ipc: Review fixes

Used sizeof instead of define.

Move DT retrieval before sysfs creation, to guarantee values are valid
at time of creation.

Signed-off-by: Paul Murphy <paul.j.murphy@intel.com>
---
 drivers/firmware/keembay-vpu-ipc.c | 32 +++++++++++++++++++-----------
 1 file changed, 20 insertions(+), 12 deletions(-)

diff --git a/drivers/firmware/keembay-vpu-ipc.c b/drivers/firmware/keembay-vpu-ipc.c
index 724868b4c296..9c3737e5fd98 100644
--- a/drivers/firmware/keembay-vpu-ipc.c
+++ b/drivers/firmware/keembay-vpu-ipc.c
@@ -246,8 +246,8 @@ struct vpu_ipc_soc_info {
 	u64 device_id;
 	u64 feature_exclusion;
 	u32 hardware_id;
-	u8 stepping[2];
-	u8 sku[6];
+	u8 stepping[SOC_INFO_STEPPING_BYTES];
+	u8 sku[SOC_INFO_SKU_BYTES];
 };
 
 enum keembay_vpu_event {
@@ -1577,14 +1577,16 @@ static ssize_t stepping_show(struct device *dev,
 		struct device_attribute *attr,
 		char *buf)
 {
-	return show_attr_u8_array(buf, vpu_ipc_soc_info->stepping, SOC_INFO_STEPPING_BYTES);
+	return show_attr_u8_array(buf, vpu_ipc_soc_info->stepping,
+				  sizeof(vpu_ipc_soc_info->stepping));
 }
 
 static ssize_t stepping_store(struct device *dev,
 	struct device_attribute *attr,
 	const char *buf, size_t n)
 {
-	return store_attr_u8_array(buf, n, vpu_ipc_soc_info->stepping, SOC_INFO_STEPPING_BYTES);
+	return store_attr_u8_array(buf, n, vpu_ipc_soc_info->stepping,
+				   sizeof(vpu_ipc_soc_info->stepping));
 }
 static DEVICE_ATTR_RW(stepping);
 
@@ -1592,14 +1594,15 @@ static ssize_t sku_show(struct device *dev,
 		struct device_attribute *attr,
 		char *buf)
 {
-	return show_attr_u8_array(buf, vpu_ipc_soc_info->sku, SOC_INFO_SKU_BYTES);
+	return show_attr_u8_array(buf, vpu_ipc_soc_info->sku,
+				  sizeof(vpu_ipc_soc_info->sku));
 }
 
 static ssize_t sku_store(struct device *dev,
 	struct device_attribute *attr,
 	const char *buf, size_t n)
 {
-	return store_attr_u8_array(buf, n, vpu_ipc_soc_info->sku, SOC_INFO_SKU_BYTES);
+	return store_attr_u8_array(buf, n, vpu_ipc_soc_info->sku, sizeof(vpu_ipc_soc_info->sku));
 }
 static DEVICE_ATTR_RW(sku);
 
@@ -1810,16 +1813,21 @@ static int retrieve_dt_soc_information(void)
 		pr_err("Property 'hardware-id' can't be read.\n");
 		return ret;
 	}
+	/*
+	 * Note: the SKU and stepping information from the device tree is
+	 * not a string, but an array of u8/chars. Therefore, we cannot
+	 * parse it as a string.
+	 */
 	ret = of_property_read_u8_array(soc_info_dn, "sku",
 					vpu_ipc_soc_info->sku,
-					SOC_INFO_SKU_BYTES);
+					sizeof(vpu_ipc_soc_info->sku));
 	if (ret) {
 		pr_err("Property 'sku' can't be read.\n");
 		return ret;
 	}
 	ret = of_property_read_u8_array(soc_info_dn, "stepping",
 					vpu_ipc_soc_info->stepping,
-					SOC_INFO_STEPPING_BYTES);
+					sizeof(vpu_ipc_soc_info->stepping));
 	if (ret) {
 		pr_err("Property 'stepping' can't be read.\n");
 		return ret;
@@ -1842,14 +1850,14 @@ static int __init vpu_ipc_init(void)
 		goto cleanup_kobj;
 	}
 
-	rc = sysfs_create_files(vpu_ipc_kobj, vpu_ipc_attrs);
-	if (rc < 0)
-		goto cleanup_soc_info;
-
 	rc = retrieve_dt_soc_information();
 	if (rc < 0)
 		pr_warn("VPU IPC failed to find SoC info, using defaults.\n");
 
+	rc = sysfs_create_files(vpu_ipc_kobj, vpu_ipc_attrs);
+	if (rc < 0)
+		goto cleanup_soc_info;
+
 	rc = platform_driver_register(&keem_bay_vpu_ipc_driver);
 	if (rc < 0) {
 		pr_err("Failed to register platform driver for VPU IPC.\n");
-- 
2.27.0

