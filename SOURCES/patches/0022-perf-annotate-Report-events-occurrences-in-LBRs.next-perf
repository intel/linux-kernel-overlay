From 784cd1ed646bbe2586c11d3505665493db607f4b Mon Sep 17 00:00:00 2001
From: Jin Yao <yao.jin@linux.intel.com>
Date: Wed, 21 Apr 2021 10:18:35 +0800
Subject: [PATCH 22/49] perf annotate: Report events occurrences in LBRs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In annotate view, we support the reporting of events occurrences.

For example,
perf report --total-cycles --stdio
Select the hottest LBR block and switch to annotate view.

Percent¦ IPC Cycle cycles instructions      for(i=0; i<nele; i++) {
       ¦           -      -                   add      $0x1,%rax
       ¦           -      -                   cmp      $0x4e20,%rax
       ¦           -      -                 ? jne      17
       ¦           -      -                 }
       ¦           -      -
       ¦           -      -                 /*  Here's the interesting part:  After a sing
       ¦           -      -                 iteration of the inner, 'i' loop has 2 f-p loa
       ¦           -      -                 chk_sum0 = 0.0;
       ¦           -      -                   pxor     %xmm1,%xmm1
       ¦           -      -                 for(j=0; j<nits; j++) {
       ¦           -      -                   xor      %edi,%edi
       ¦           -      -                   lea      b+0x190e4,%rsi
       ¦           -      -                 j_float = (float)j;
       ¦3.00       -      -             49:+-?pxor     %xmm2,%xmm2
       ¦3.00       -      -                ¦  mov      $0x1c,%eax
       ¦3.00       -      -                ¦  cvtsi2ss %edi,%xmm2
       ¦           -      -                ¦for(i=0; i<nele; i++) {
       ¦3.00       -      -                ¦  nop
       ¦           -      -                ¦c[i] = a[i+MyOffset] + j_float*b[i+MyOffset];
 50.00 ¦2.75       -      -             60:¦  movss    (%rcx,%rax,1),%xmm0
       ¦2.75       -      -                ¦  mulss    %xmm2,%xmm0
       ¦2.75       -      -                ¦  addss    (%rdx,%rax,1),%xmm0
       ¦2.75       -      -                ¦  movss    %xmm0,(%rsi,%rax,1)
       ¦           -      -                ¦chk_sum0 += c[i];     // make store_forward
       ¦2.75       -      -                ¦  add      $0x4,%rax
       ¦2.75       -      -                ¦  addss    %xmm0,%xmm1
       ¦           -      -                ¦for(i=0; i<nele; i++) {
       ¦2.75       -      -                ¦  cmp      $0x1389c,%rax
 50.00 ¦2.75     4 ###+   #                ¦? jne      60
       ¦           -      -                ¦for(j=0; j<nits; j++) {
       ¦2.75       -      -                ¦  add      $0x1,%edi
       ¦2.75       -      -                +--cmp      $0x2710,%edi
       ¦2.75     4 ###+   #                +--jne      49
       ¦           -      -                   movl     $0x461c3c00,j_float
       ¦           -      -                 }

Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
---
 tools/perf/builtin-report.c       |   1 +
 tools/perf/ui/browsers/annotate.c |   5 +-
 tools/perf/util/annotate.c        | 102 ++++++++++++++++++++++++++++++
 tools/perf/util/annotate.h        |   6 ++
 4 files changed, 112 insertions(+), 2 deletions(-)

diff --git a/tools/perf/builtin-report.c b/tools/perf/builtin-report.c
index df807393aba9..f8dd5bc53bc9 100644
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@ -516,6 +516,7 @@ static int evlist__tui_block_hists_browse(struct evlist *evlist, struct report *
 	struct evsel *pos;
 	int i = 0, ret;
 
+	rep->annotation_opts.evlist = evlist;
 	evlist__for_each_entry(evlist, pos) {
 		ret = report__browse_block_hists(&rep->block_reports[i++].hist,
 						 rep->min_percent, pos,
diff --git a/tools/perf/ui/browsers/annotate.c b/tools/perf/ui/browsers/annotate.c
index ad0a70f0edaf..f2c9eee5b3d4 100644
--- a/tools/perf/ui/browsers/annotate.c
+++ b/tools/perf/ui/browsers/annotate.c
@@ -154,6 +154,7 @@ static void annotate_browser__draw_current_jump(struct ui_browser *browser)
 	struct symbol *sym = ms->sym;
 	struct annotation *notes = symbol__annotation(sym);
 	u8 pcnt_width = annotation__pcnt_width(notes);
+	int events_width = annotation__events_width(notes);
 	int width;
 
 	/* PLT symbols contain external offsets */
@@ -202,12 +203,12 @@ static void annotate_browser__draw_current_jump(struct ui_browser *browser)
 
 	ui_browser__set_color(browser, HE_COLORSET_JUMP_ARROWS);
 	__ui_browser__line_arrow(browser,
-				 pcnt_width + 2 + notes->widths.addr + width,
+				 pcnt_width + 2 + notes->widths.addr + width + events_width,
 				 from, to);
 
 	if (is_fused(ab, cursor)) {
 		ui_browser__mark_fused(browser,
-				       pcnt_width + 3 + notes->widths.addr + width,
+				       pcnt_width + 3 + notes->widths.addr + width + events_width,
 				       from - 1,
 				       to > from);
 	}
diff --git a/tools/perf/util/annotate.c b/tools/perf/util/annotate.c
index f1f02fc35c60..19d60c6085f2 100644
--- a/tools/perf/util/annotate.c
+++ b/tools/perf/util/annotate.c
@@ -31,6 +31,7 @@
 #include "block-range.h"
 #include "string2.h"
 #include "branch.h"
+#include "strbuf.h"
 #include "util/event.h"
 #include "arch/common.h"
 #include <regex.h>
@@ -1096,6 +1097,15 @@ static void annotation__count_and_fill(struct annotation *notes, u64 start, u64
 	}
 }
 
+static void init_branch_events(struct annotation_line *al, struct cyc_hist *ch)
+{
+	for (int i = 0; i < PERF_MAX_BRANCH_EVENTS; i++) {
+		al->event_occurs[i] = (u32)((float)ch->event_occurs[i] /
+					    (float)ch->num + 0.5);
+		al->max_occurs[i] = ch->max_occurs[i];
+	}
+}
+
 void annotation__compute_ipc(struct annotation *notes, size_t size)
 {
 	s64 offset;
@@ -1123,6 +1133,7 @@ void annotation__compute_ipc(struct annotation *notes, size_t size)
 				al->cycles = ch->cycles_aggr / ch->num_aggr;
 				al->cycles_max = ch->cycles_max;
 				al->cycles_min = ch->cycles_min;
+				init_branch_events(al, ch);
 			}
 			notes->have_cycles = true;
 		}
@@ -2933,6 +2944,91 @@ static void ipc_coverage_string(char *bf, int size, struct annotation *notes)
 		  ipc, coverage);
 }
 
+int annotation__events_width(struct annotation *notes)
+{
+	struct evlist *evlist = notes->options->evlist;
+	struct evsel *pos;
+	int width = 0, branch_events_nr = 0;
+
+	if (!evlist)
+		return 0;
+
+	evlist__for_each_entry(evlist, pos) {
+		if (pos->core.attr.branch_events) {
+			branch_events_nr++;
+			if (pos->name)
+				width += strlen(pos->name) + 1;
+		}
+		if (branch_events_nr == PERF_MAX_BRANCH_EVENTS)
+			break;
+	}
+
+	return width;
+}
+
+static void lbr_events_title(void (*obj__printf)(void *obj, const char *fmt, ...),
+			     void *obj, struct evlist *evlist)
+{
+	struct evsel *pos;
+	int branch_events_nr = 0;
+
+	evlist__for_each_entry(evlist, pos) {
+		if (pos->core.attr.branch_events) {
+			branch_events_nr++;
+			obj__printf(obj, "%-*s ", strlen(pos->name), pos->name);
+		}
+
+		if (branch_events_nr == PERF_MAX_BRANCH_EVENTS)
+			break;
+	}
+}
+
+static int lbr_occur_indications(struct strbuf *buf, u32 *event_occurs,
+				 u8 *max_occurs, int idx)
+{
+	if (strbuf_init(buf, 64) < 0)
+		return -1;
+
+	if (event_occurs[idx] == 0) {
+		strbuf_addch(buf, '-');
+		return 0;
+	}
+
+	for (unsigned int i = 0; i < event_occurs[idx]; i++)
+		strbuf_addch(buf, '#');
+
+	if (max_occurs[idx])
+		strbuf_addch(buf, '+');
+
+	return 0;
+}
+
+static void lbr_events_value(void (*obj__printf)(void *obj, const char *fmt, ...),
+			     void *obj, struct evlist *evlist,
+			     struct annotation_line *al)
+{
+	struct evsel *pos;
+	int branch_events_nr = 0;
+	struct strbuf buf;
+
+	evlist__for_each_entry(evlist, pos) {
+		if (pos->core.attr.branch_events) {
+			if (lbr_occur_indications(&buf, al->event_occurs,
+						  al->max_occurs, pos->idx)) {
+				obj__printf(obj, "%-*s ", strlen(pos->name), "n/a");
+				continue;
+			}
+
+			obj__printf(obj, "%-*s ", strlen(pos->name), buf.buf);
+			strbuf_release(&buf);
+			branch_events_nr++;
+		}
+
+		if (branch_events_nr == PERF_MAX_BRANCH_EVENTS)
+			break;
+	}
+}
+
 static void __annotation_line__write(struct annotation_line *al, struct annotation *notes,
 				     bool first_line, bool current_entry, bool change_color, int width,
 				     void *obj, unsigned int percent_type,
@@ -2949,6 +3045,7 @@ static void __annotation_line__write(struct annotation_line *al, struct annotati
 	bool show_title = false;
 	char bf[256];
 	int printed;
+	struct evlist *evlist = notes->options->evlist;
 
 	if (first_line && (al->offset == -1 || percent_max == 0.0)) {
 		if (notes->have_cycles) {
@@ -3029,6 +3126,11 @@ static void __annotation_line__write(struct annotation_line *al, struct annotati
 					    "Cycle(min/max)");
 		}
 
+		if (show_title)
+			lbr_events_title(obj__printf, obj, evlist);
+		else
+			lbr_events_value(obj__printf, obj, evlist, al);
+
 		if (show_title && !*al->line) {
 			ipc_coverage_string(bf, sizeof(bf), notes);
 			obj__printf(obj, "%*s", ANNOTATION__AVG_IPC_WIDTH, bf);
diff --git a/tools/perf/util/annotate.h b/tools/perf/util/annotate.h
index 9d085fd398db..2ff341b74944 100644
--- a/tools/perf/util/annotate.h
+++ b/tools/perf/util/annotate.h
@@ -25,6 +25,7 @@ struct perf_sample;
 struct evsel;
 struct symbol;
 struct branch_flags;
+struct evlist;
 
 #define LBR_EVENT_MAX_OCCUR	3
 
@@ -101,6 +102,7 @@ struct annotation_options {
 	const char *disassembler_style;
 	const char *prefix;
 	const char *prefix_strip;
+	struct evlist *evlist;
 	unsigned int percent_type;
 };
 
@@ -149,6 +151,8 @@ struct annotation_line {
 	u64			 cycles_min;
 	char			*path;
 	u32			 idx;
+	u32			 event_occurs[PERF_MAX_BRANCH_EVENTS];
+	u8			 max_occurs[PERF_MAX_BRANCH_EVENTS];
 	int			 idx_asm;
 	int			 data_nr;
 	struct annotation_data	 data[];
@@ -318,6 +322,8 @@ static inline int annotation__pcnt_width(struct annotation *notes)
 	return (symbol_conf.show_total_period ? 12 : 7) * notes->nr_events;
 }
 
+int annotation__events_width(struct annotation *notes);
+
 static inline bool annotation_line__filter(struct annotation_line *al, struct annotation *notes)
 {
 	return notes->options->hide_src_code && al->offset == -1;
-- 
2.27.0

