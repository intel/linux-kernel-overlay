From 98f810498c6ab60a4d3043d0e7f96f3df739a2cc Mon Sep 17 00:00:00 2001
From: ssanil <shruthi.sanil@intel.com>
Date: Wed, 29 Jan 2020 10:26:37 +0530
Subject: [PATCH 026/223] Fix error: Semi colon missing

---
 drivers/watchdog/thunderbay_wdt.c | 46 +++++++++++++++----------------
 1 file changed, 22 insertions(+), 24 deletions(-)

diff --git a/drivers/watchdog/thunderbay_wdt.c b/drivers/watchdog/thunderbay_wdt.c
index 4c376412b660..620fe141acca 100644
--- a/drivers/watchdog/thunderbay_wdt.c
+++ b/drivers/watchdog/thunderbay_wdt.c
@@ -28,19 +28,19 @@
 #include <linux/watchdog.h>
 
 /* Non-secure watchdog register offsets */
-#define TIM_WATCHDOG			0x0
+#define TIM_WATCHDOG		0x0
 #define TIM_WATCHDOG_INT_THRES	0x4
-#define TIM_WDOG_EN				0x8
-#define TIM_SAFE				0xc
+#define TIM_WDOG_EN		0x8
+#define TIM_SAFE		0xc
 
-#define LOAD_MIN				0x00000001
-#define LOAD_MAX				0xffffffff
-#define WDT_DISABLE				0x0
-#define WDT_ENABLE				0x1
-#define WDT_UNLOCK				0xf1d0dead
+#define LOAD_MIN		0x00000001
+#define LOAD_MAX		0xffffffff
+#define WDT_DISABLE		0x0
+#define WDT_ENABLE		0x1
+#define WDT_UNLOCK		0xf1d0dead
 
-#define WATCHDOG_TIMEOUT		5 /* seconds */
-#define WATCHDOG_PRETIMEOUT		4 /* seconds */
+#define WATCHDOG_TIMEOUT	5 /* seconds */
+#define WATCHDOG_PRETIMEOUT	4 /* seconds */
 
 #define START_DEFAULT		0
 static int start_enabled = START_DEFAULT;
@@ -206,11 +206,6 @@ static irqreturn_t thunderbay_wdt_th_isr(int irq, void *dev_id)
 	arm_smccc_smc(0x8200ff18, 0x100, 0, 0, 0, 0, 0, 0, &res);
 #endif
 
-	/*
-	 * TODO: No action defined.
-	 * Actions such as coredump collection or saving the required data, panic information before the system restarts.
-	 */
-
 	pr_crit("Intel Thunder Bay non-secure watchdog pre-timeout.\n");
 	watchdog_notify_pretimeout(&wdt->wdd);
 
@@ -219,14 +214,17 @@ static irqreturn_t thunderbay_wdt_th_isr(int irq, void *dev_id)
 
 static const struct watchdog_info thunderbay_wdt_info = {
 	.identity	= "Intel Thunder Bay Watchdog Timer",
-	.options	= WDIOF_SETTIMEOUT | WDIOF_PRETIMEOUT | WDIOF_MAGICCLOSE | WDIOF_KEEPALIVEPING,
+	.options	= WDIOF_SETTIMEOUT |
+			  WDIOF_PRETIMEOUT |
+			  WDIOF_MAGICCLOSE |
+			  WDIOF_KEEPALIVEPING,
 };
 
 static const struct watchdog_ops thunderbay_wdt_ops = {
-	.owner			= THIS_MODULE,
-	.start			= thunderbay_wdt_start,
-	.stop			= thunderbay_wdt_stop,
-	.ping			= thunderbay_wdt_ping,
+	.owner		= THIS_MODULE,
+	.start		= thunderbay_wdt_start,
+	.stop		= thunderbay_wdt_stop,
+	.ping		= thunderbay_wdt_ping,
 	.set_timeout	= thunderbay_wdt_set_timeout,
 	.set_pretimeout	= thunderbay_wdt_set_pretimeout,
 	.get_timeleft	= thunderbay_wdt_get_timeleft,
@@ -310,7 +308,7 @@ static int thunderbay_wdt_probe(struct platform_device *pdev)
 
 	if(start_enabled)
 	{
-		wdt->wdd.status = 3
+		wdt->wdd.status = 3;
 		thunderbay_wdt_writel(wdt, TIM_WATCHDOG, 30 * wdt->rate);
 		thunderbay_wdt_writel(wdt, TIM_WDOG_EN, WDT_ENABLE);
 	}
@@ -351,10 +349,10 @@ MODULE_DEVICE_TABLE(of, thunderbay_wdt_match);
 static struct platform_driver thunderbay_wdt_driver = {
 	.probe	= thunderbay_wdt_probe,
 	.driver	= {
-			.name			= "thunderbay_wdt",
-			.pm				= &thunderbay_wdt_pm_ops,
+		  .name		  = "thunderbay_wdt",
+		  .pm		  = &thunderbay_wdt_pm_ops,
 #ifdef CONFIG_OF
-			.of_match_table = thunderbay_wdt_match,
+		  .of_match_table = thunderbay_wdt_match,
 #endif
 	},
 };
-- 
2.27.0

