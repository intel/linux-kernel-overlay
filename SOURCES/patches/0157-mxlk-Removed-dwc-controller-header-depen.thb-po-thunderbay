From 762df7f9301021575f1a6bcf79c7c608e44188c3 Mon Sep 17 00:00:00 2001
From: kadarlax <raghuveerx.kadarla@intel.com>
Date: Fri, 18 Sep 2020 18:55:39 +0530
Subject: [PATCH 157/223] mxlk: Removed dwc controller header dependencies

Signed-off-by: kadarlax <raghuveerx.kadarla@intel.com>
---
 drivers/misc/xlink-pcie/local_host/dma.c    |  8 +++-----
 drivers/misc/xlink-pcie/local_host/epf.c    | 12 ++++++++----
 drivers/misc/xlink-pcie/local_host/struct.h |  2 +-
 3 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/drivers/misc/xlink-pcie/local_host/dma.c b/drivers/misc/xlink-pcie/local_host/dma.c
index 654e96598538..1c4efb06288c 100644
--- a/drivers/misc/xlink-pcie/local_host/dma.c
+++ b/drivers/misc/xlink-pcie/local_host/dma.c
@@ -158,11 +158,9 @@ static u32 dma_chan_offset[2][DMA_CHAN_NUM] = {
 
 static void __iomem *intel_xpcie_ep_get_dma_base(struct pci_epf *epf)
 {
-	struct pci_epc *epc = epf->epc;
-	struct dw_pcie_ep *ep = epc_get_drvdata(epc);
-	struct dw_pcie *pci = to_dw_pcie_from_ep(ep);
-
-	return pci->dbi_base + DMA_DBI_OFFSET;
+	struct device *dev = &epf->dev;
+	struct xpcie_epf *xpcie_epf = (struct xpcie_epf *)dev->driver_data;
+	return xpcie_epf->dbi_base + DMA_DBI_OFFSET;
 }
 
 static int intel_xpcie_ep_dma_disable(void __iomem *dma_base,
diff --git a/drivers/misc/xlink-pcie/local_host/epf.c b/drivers/misc/xlink-pcie/local_host/epf.c
index 47a69c71d74f..219b50ef9a26 100644
--- a/drivers/misc/xlink-pcie/local_host/epf.c
+++ b/drivers/misc/xlink-pcie/local_host/epf.c
@@ -16,6 +16,7 @@
 #include <linux/compiler.h>
 #include <linux/pci_ids.h>
 #include <linux/reboot.h>
+#include <linux/platform_device.h>
 #include <linux/xlink_drv_inf.h>
 #include <linux/err.h>
 #include <linux/of.h>
@@ -345,6 +346,12 @@ static int intel_xpcie_epf_get_platform_data(struct device *dev,
 	if (IS_ERR(xpcie_epf->apb_base))
 		return PTR_ERR(xpcie_epf->apb_base);
 
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "dbi");
+	xpcie_epf->dbi_base =
+		devm_ioremap(dev, res->start, resource_size(res));
+	if (IS_ERR(xpcie_epf->dbi_base))
+		return PTR_ERR(xpcie_epf->dbi_base);
+
 	strncpy(xpcie_epf->stepping, "B0", strlen("B0"));
 	soc_node = of_get_parent(pdev->dev.of_node);
 	if (soc_node) {
@@ -366,6 +373,7 @@ static int intel_xpcie_epf_bind(struct pci_epf *epf)
 {
 	struct pci_epc *epc = epf->epc;
 	struct xpcie_epf *xpcie_epf = epf_get_drvdata(epf);
+	struct device *dev = epc->dev.parent;
 	const struct pci_epc_features *features;
 	bool msi_capable = true;
 	size_t align = 0;
@@ -373,10 +381,6 @@ static int intel_xpcie_epf_bind(struct pci_epf *epf)
 	u32 bus_num = 0;
 	u32 dev_num = 0;
 
-	struct dw_pcie_ep *ep = epc_get_drvdata(epc);
-	struct dw_pcie *pci = to_dw_pcie_from_ep(ep);
-	struct device *dev = pci->dev;
-
 	if (WARN_ON_ONCE(!epc))
 		return -EINVAL;
 
diff --git a/drivers/misc/xlink-pcie/local_host/struct.h b/drivers/misc/xlink-pcie/local_host/struct.h
index bd2127a13754..1d9b9bc780b9 100644
--- a/drivers/misc/xlink-pcie/local_host/struct.h
+++ b/drivers/misc/xlink-pcie/local_host/struct.h
@@ -12,7 +12,6 @@
 
 #include <linux/pci-epc.h>
 #include <linux/pci-epf.h>
-#include <pcie-keembay.h>
 #include "../common/xpcie.h"
 
 #define KEEMBAY_XPCIE_STEPPING_MAXLEN 8
@@ -56,6 +55,7 @@ struct xpcie_epf {
 	int				irq_err;
 	void __iomem			*apb_base;
 	void __iomem			*dma_base;
+	void __iomem			*dbi_base;
 	char				stepping[KEEMBAY_XPCIE_STEPPING_MAXLEN];
 
 	irq_handler_t			core_irq_callback;
-- 
2.27.0

