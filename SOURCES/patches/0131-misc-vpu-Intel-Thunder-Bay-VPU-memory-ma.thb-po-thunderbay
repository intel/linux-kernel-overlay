From 8f894d0a732d95a9c5b7ad17dfed52c0a06a6297 Mon Sep 17 00:00:00 2001
From: "Demakkanavar, Kenchappa" <kenchappa.demakkanavar@intel.com>
Date: Tue, 3 Dec 2019 14:53:52 +0800
Subject: [PATCH 131/223] misc: vpu: Intel Thunder Bay VPU memory map driver

Add support for Intel Thunder Bay VPU memory mapping. This driver enables
VPU to access DDR with the help of iommu APIs.

User can provide VPU accessible DDR address ranges in device tree file
(DTS) along with memory attributes. These DTS entries are parsed and access
to DDR is enabled by using iommu_map() API.

Example of DTS entry for specifying VPU address to DDR address mapping:

intel,smmu_params = <0x80000000 0x8 0x80000000 0x80000000
		     (IOMMU_READ|IOMMU_WRITE)>;

Above property "intel,smmu_params" maps 2GB VPU address starting from
0x80000000 to DDR address 0x880000000 with read and write access
permissions enabled.

Signed-off-by: Demakkanavar, Kenchappa <kenchappa.demakkanavar@intel.com>
---
 drivers/misc/Kconfig      |   1 +
 drivers/misc/Makefile     |   1 +
 drivers/misc/vpu/Kconfig  |   4 ++
 drivers/misc/vpu/Makefile |   4 ++
 drivers/misc/vpu/vpu.c    | 132 ++++++++++++++++++++++++++++++++++++++
 5 files changed, 142 insertions(+)
 create mode 100644 drivers/misc/vpu/Kconfig
 create mode 100644 drivers/misc/vpu/Makefile
 create mode 100644 drivers/misc/vpu/vpu.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 91cb49b06f93..850e532ed690 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -478,4 +478,5 @@ source "drivers/misc/xlink-smbus/Kconfig"
 source "drivers/misc/hddl_device/Kconfig"
 source "drivers/misc/emc2103/Kconfig"
 source "drivers/misc/keembay-ipc/Kconfig"
+source "drivers/misc/vpu/Kconfig"
 endmenu
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 4b4c9df05a6d..d5c3051977ea 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -63,3 +63,4 @@ obj-$(CONFIG_XLINK_SMBUS)	+= xlink-smbus/
 obj-y				+= hddl_device/
 obj-$(CONFIG_HOST_KMB_EMC)	+= emc2103/
 obj-$(CONFIG_KEEMBAY_IPC)	+= keembay-ipc/
+obj-$(CONFIG_VPU)		+= vpu/
diff --git a/drivers/misc/vpu/Kconfig b/drivers/misc/vpu/Kconfig
new file mode 100644
index 000000000000..2e204ea8065e
--- /dev/null
+++ b/drivers/misc/vpu/Kconfig
@@ -0,0 +1,4 @@
+config VPU
+	tristate "Support for VPU memory mapping driver"
+	help
+	  This driver enables VPU to access DDR memory.
diff --git a/drivers/misc/vpu/Makefile b/drivers/misc/vpu/Makefile
new file mode 100644
index 000000000000..d95c1f9f44e0
--- /dev/null
+++ b/drivers/misc/vpu/Makefile
@@ -0,0 +1,4 @@
+#
+# Makefile for VPU Linux driver
+#
+obj-$(CONFIG_VPU) += vpu.o
diff --git a/drivers/misc/vpu/vpu.c b/drivers/misc/vpu/vpu.c
new file mode 100644
index 000000000000..90f7d851d613
--- /dev/null
+++ b/drivers/misc/vpu/vpu.c
@@ -0,0 +1,132 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Kernel module for:
+ *    1. Memory mapping DDR address space to Intel Thunder Bay SOC's VPU
+ *       address space
+ *
+ * Copyright (C) 2019 Intel Corporation
+ *
+ */
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/iommu.h>
+#include <linux/of.h>
+
+static int vpu_platform_driver_probe(struct platform_device *pdev)
+{
+	int rc = 0;
+	struct device *dev = &pdev->dev;
+	struct iommu_domain *vpu_domain = NULL;
+
+	int params_length = 0;
+	int i;
+	u32 va, size, attr, pa_l, pa_h;
+	u64 pa;
+
+	if (iommu_present(dev->bus)) {
+		if (!vpu_domain)
+			vpu_domain = iommu_domain_alloc(dev->bus);
+
+		iommu_attach_device(vpu_domain, dev);
+		params_length =
+			of_property_count_elems_of_size(dev->of_node, "intel,smmu_params",
+							sizeof(u32));
+
+		if (params_length == 0) {
+			dev_err(dev, "No memory region to map\n");
+			goto error_exit;
+		}
+
+		pr_info("vpu-mm: found %d entries for mapping\n", params_length);
+
+		for (i = 0; i < params_length; i += 5) {
+			char attr_s[] = "      ";
+
+			rc = of_property_read_u32_index(dev->of_node, "intel,smmu_params",
+							i + 0, &va);
+
+			if (rc) {
+				dev_err(dev, "property not set\n");
+				goto error_exit;
+			}
+
+			rc = of_property_read_u32_index(dev->of_node, "intel,smmu_params",
+							i + 1, &pa_h);
+
+			rc = of_property_read_u32_index(dev->of_node, "intel,smmu_params",
+							i + 2, &pa_l);
+
+			rc = of_property_read_u32_index(dev->of_node, "intel,smmu_params",
+							i + 3, &size);
+
+			rc = of_property_read_u32_index(dev->of_node, "intel,smmu_params",
+							i + 4, &attr);
+
+			if (rc) {
+				dev_err(dev, "No memory region to map\n");
+				goto error_exit;
+			}
+
+			pa = (((u64)pa_h) << 32) | pa_l;
+
+			if (attr & IOMMU_READ)
+				attr_s[0] = 'R';
+			if (attr & IOMMU_WRITE)
+				attr_s[1] = 'W';
+			if (attr & IOMMU_CACHE)
+				attr_s[2] = 'C';
+			if (!(attr & IOMMU_NOEXEC))
+				attr_s[3] = 'X';
+			if (attr & IOMMU_MMIO)
+				attr_s[4] = 'I';
+
+			if (attr & IOMMU_PRIV)
+				attr_s[5] = 'P';
+			else
+				attr_s[5] = 'U';
+
+			dev_info(dev, "vpu-mm: iommu mapping done for vaddr: 0x%0X--0x%0X, paddr: 0x%0llX++0x%0X, attr=0x%0x[%s]\n",
+				 va,
+				 va + size - 1,
+				 pa,
+				 size,
+				 attr, attr_s);
+
+			iommu_map(vpu_domain, (unsigned int)va, (unsigned long long)pa,
+				  size, attr);
+		}
+	}
+
+	return 0;
+
+error_exit:
+	return -1;
+}
+
+static void vpu_platform_driver_shutdown(struct platform_device *pdev)
+{
+}
+
+static const struct of_device_id vpu_of_match[] = {
+	{ .compatible = "intel,vpu", },
+	{ /* end of table */}
+};
+
+static struct platform_driver vpu_platform_driver = {
+	.probe  = vpu_platform_driver_probe,
+	.shutdown = vpu_platform_driver_shutdown,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name  = "intel,vpu",
+		.of_match_table = vpu_of_match,
+	},
+};
+
+builtin_platform_driver(vpu_platform_driver);
+
+MODULE_DESCRIPTION("VPU memory mapping driver");
+MODULE_AUTHOR("Demakkanavar, Kenchappa <kenchappa.demakkanavar@intel.com>");
+MODULE_AUTHOR("Raja Subramanian, Lakshmi Bai <lakshmi.bai.raja.subramanian@intel.com>");
+MODULE_AUTHOR("S, Kiran Kumar1 <kiran.kumar1.s@intel.com>");
+MODULE_LICENSE("GPL v2");
-- 
2.27.0

