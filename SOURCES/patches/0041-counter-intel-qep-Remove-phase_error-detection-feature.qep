From 2e2ba3da27a52f9a75a6bf31265c5db3e65c436a Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Wed, 17 Feb 2021 20:22:31 +0200
Subject: [PATCH 41/69] counter: intel-qep: Remove phase_error detection
 feature

I believe this phase_error feature is not implemented correctly. I'm not
able to test this but according to specification phase error should set
the PH_ERR status flag in QEPCON register but here implementation relies
on FIFOCRIT interrupt. Specification mentions only that interrupt occurs
when number of entries in capture FIFO reached the threshold level.

Second issue in implementation is that phase error status is lost if next
interrupt is not FIFOCRIT and userspace hasn't read the status yet.

Therefore remove the feature since above issues make it uncertain does
it really work and I don't have way to validate alternative
implementation.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/counter/intel-qep.c | 22 +---------------------
 1 file changed, 1 insertion(+), 21 deletions(-)

diff --git a/drivers/counter/intel-qep.c b/drivers/counter/intel-qep.c
index 8eb2e8ddc886..286c510fcc6c 100644
--- a/drivers/counter/intel-qep.c
+++ b/drivers/counter/intel-qep.c
@@ -102,7 +102,6 @@ struct intel_qep {
 	void __iomem *regs;
 	u32 int_stat;
 	bool enabled;
-	bool phase_error;
 	int op_mode;
 	int cap_mode;
 };
@@ -154,14 +153,7 @@ static irqreturn_t intel_qep_irq_thread(int irq, void *_qep)
 
 	stat = qep->int_stat;
 	if (stat & INTEL_QEPINT_FIFOCRIT) {
-		if (qep->op_mode == INTEL_QEP_OP_MODE_QEP) {
-			dev_dbg(qep->dev, "Phase Error detected\n");
-			qep->phase_error = true;
-		} else {
-			dev_dbg(qep->dev, "Fifo Critical\n");
-		}
-	} else {
-		qep->phase_error = false;
+		dev_dbg(qep->dev, "Fifo Critical\n");
 	}
 
 	if (stat & INTEL_QEPINT_FIFOENTRY)
@@ -431,16 +423,6 @@ static ssize_t enable_write(struct counter_device *counter,
 	return len;
 }
 
-static ssize_t phase_error_read(struct counter_device *counter,
-				struct counter_count *count,
-				void *priv, char *buf)
-{
-	struct intel_qep *qep = counter_to_qep(counter);
-
-	return snprintf(buf, PAGE_SIZE, "%s\n", qep->phase_error ?
-			"error" : "no_error");
-}
-
 static ssize_t operating_mode_read(struct counter_device *counter,
 				   struct counter_count *count,
 				   void *priv, char *buf)
@@ -538,7 +520,6 @@ static ssize_t capture_mode_write(struct counter_device *counter,
 static const struct counter_count_ext intel_qep_count_ext[] = {
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(ceiling),
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(enable),
-	INTEL_QEP_COUNTER_COUNT_EXT_RO(phase_error),
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(operating_mode),
 	INTEL_QEP_COUNTER_COUNT_EXT_RO(capture_data),
 	INTEL_QEP_COUNTER_COUNT_EXT_RW(capture_mode),
@@ -705,7 +686,6 @@ static int intel_qep_probe(struct pci_dev *pci, const struct pci_device_id *id)
 	qep->counter.num_ext = ARRAY_SIZE(intel_qep_ext);
 	qep->counter.priv = qep;
 	qep->enabled = false;
-	qep->phase_error = false;
 	qep->op_mode = INTEL_QEP_OP_MODE_QEP;
 	qep->cap_mode = 0;
 
-- 
2.27.0

