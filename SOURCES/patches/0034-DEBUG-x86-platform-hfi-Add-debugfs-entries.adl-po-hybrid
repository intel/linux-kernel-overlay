From a917fc2d5568b685c1b374dab15a57b98ae77116 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Sat, 28 Mar 2020 15:41:46 -0700
Subject: [PATCH 34/68] DEBUG: x86/platform/hfi: Add debugfs entries

Cc: Andi Kleen <ak@linux.intel.com>
Cc: Aubrey Li <aubrey.li@intel.com>
Cc: Len Brown <len.brown@intel.com>
Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Cc: "Ravi V. Shankar" <ravi.v.shankar@intel.com>
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/platform/intel/hfi.c | 124 ++++++++++++++++++++++++++++++++++
 1 file changed, 124 insertions(+)

diff --git a/arch/x86/platform/intel/hfi.c b/arch/x86/platform/intel/hfi.c
index c1be783d5b91..4dbf1d48bd30 100644
--- a/arch/x86/platform/intel/hfi.c
+++ b/arch/x86/platform/intel/hfi.c
@@ -20,6 +20,7 @@
 
 #include <linux/cpu.h>
 #include <linux/cpuset.h>
+#include <linux/debugfs.h>
 #include <linux/gfp.h>
 #include <linux/io.h>
 #include <linux/slab.h>
@@ -81,6 +82,127 @@ static struct hfi_params hfi_params;
 static u64 hfi_timestamp;
 static u32 *raw_data;
 
+#ifdef CONFIG_DEBUG_FS
+static int cpu_capacities_show(struct seq_file *m, void *data)
+{
+	int cpu;
+
+	seq_printf(m, "CPU capacities from arch_scale_cpu_capacity()\n");
+	for_each_online_cpu(cpu)
+		seq_printf(m, "CPU %d capacity %ld\n",
+			   cpu, arch_scale_cpu_capacity(cpu));
+
+	return 0;
+}
+DEFINE_SHOW_ATTRIBUTE(cpu_capacities);
+
+static int hfi_state_show(struct seq_file *s, void *unused)
+{
+	struct hfi_hdr *hfi_hdr;
+	u64 msr_val;
+	int cpu;
+
+	/* Dump the relevant registers */
+	rdmsrl(MSR_IA32_PACKAGE_THERM_STATUS, msr_val);
+	seq_printf(s, "MSR_IA32_PACKAGE_THERM_STATUS:\t0x%llx HFI status:%lld\n",
+		   msr_val, (msr_val & 0x4000000) >> 26);
+
+	rdmsrl(MSR_IA32_PACKAGE_THERM_INTERRUPT, msr_val);
+	seq_printf(s, "MSR_IA32_PACKAGE_THERM_INTERRUPT:\t0x%llx HFI intr: %lld \n",
+		   msr_val, (msr_val & 0x2000000) >> 25);
+
+	rdmsrl(MSR_IA32_HW_FEEDBACK_PTR, msr_val);
+	seq_printf(s, "MSR_IA32_HW_FEEDBACK_PTR:\t0x%llx\n", msr_val);
+
+	rdmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
+	seq_printf(s, "MSR_IA32_HW_FEEDBACK_CONFIG:\t0x%llx\n", msr_val);
+
+	/* Dump the HFI table parameters */
+	seq_printf(s, "\nTable base:\t0x%lx\n", (unsigned long)hfi_params.ts_counter);
+	seq_printf(s, "Headers base:\t0x%lx\n", (unsigned long)hfi_params.hdr);
+	seq_printf(s, "Data base:\t0x%lx\n", (unsigned long)hfi_params.data);
+	seq_printf(s, "Cpu stride:\t0x%x\n", hfi_params.cpu_stride);
+
+	seq_printf(s, "\nTimestamp: %lld\n", *hfi_params.ts_counter);
+
+	/* Dump the performance capability change indication */
+	seq_printf(s, "\nPerf Cap Change Indication:");
+	hfi_hdr = hfi_params.hdr;
+	seq_printf(s, "%u", hfi_hdr->perf_updated);
+
+	/* Dump the energy efficiency capability change indication */
+	seq_printf(s, "\n\nEnergy Efficiency Cap Change Indication:");
+	seq_printf(s, "%u\n", hfi_hdr->ee_updated);
+
+	/* Dump the HFI table */
+	seq_printf(s, "\nHFI table:\n");
+	seq_printf(s, "CPU\tIndex");
+	seq_printf(s, "\tPe  Ef");
+
+	seq_printf(s, "\n");
+	for_each_online_cpu(cpu) {
+		s16 index = per_cpu(hfi_cpu_index, cpu);
+		void *data_ptr = hfi_params.data +
+				       index * hfi_params.cpu_stride;
+		struct hfi_cpu_data *data = data_ptr;
+
+		seq_printf(s, "%4u\t%4d", cpu, index);
+		seq_printf(s, "\t%3u %3u", data->perf_cap, data->ee_cap);
+		seq_printf(s, "\n");
+	}
+
+	return 0;
+}
+
+static int hfi_state_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, hfi_state_show, inode->i_private);
+}
+
+static const struct file_operations hfi_state_ops = {
+	.open		= hfi_state_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static struct dentry *hfi_debugfs_dir;
+
+static void hfi_dbgfs_unregister(void)
+{
+	debugfs_remove_recursive(hfi_debugfs_dir);
+}
+
+static int hfi_dbgfs_register(void)
+{
+	struct dentry *f;
+
+	hfi_debugfs_dir = debugfs_create_dir("intel_hw_feedback", NULL);
+	if (!hfi_debugfs_dir)
+		return -ENOMEM;
+
+	f = debugfs_create_file("hw_state", 0444, hfi_debugfs_dir,
+				NULL, &hfi_state_ops);
+	if (!f)
+		goto err;
+
+	f = debugfs_create_file("capacities", 0444, hfi_debugfs_dir,
+				NULL, &cpu_capacities_fops);
+	if (!f)
+		goto err;
+
+	return 0;
+err:
+	hfi_dbgfs_unregister();
+	return -ENODEV;
+}
+#else
+static int hfi_dbgfs_register(void)
+{
+	return 0;
+}
+#endif /* CONFIG_DEBUG_FS */
+
 bool hfi_has_hw_sched_feedback(void)
 {
 	return boot_cpu_has(X86_FEATURE_INTEL_HFI);
@@ -441,6 +563,8 @@ static void __init intel_hfi_init(void)
 
 	init_energy_model();
 
+	hfi_dbgfs_register();
+
 	return;
 
 free_raw_data:
-- 
2.27.0

