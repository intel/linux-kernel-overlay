From 330f1b7aab64aacd165714f82642142353d26458 Mon Sep 17 00:00:00 2001
From: sandeep singh <sandeep1.singh@intel.com>
Date: Thu, 15 Apr 2021 13:56:40 +0530
Subject: [PATCH 059/223] Adding PID register configuration

Configuring PID based hybrid throttling

Signed-ff-by: sandeep singh <sandeep1.singh@intel.com>
---
 .../misc/intel_tsens/intel_tsens_thermal.c    |   6 +
 .../misc/intel_tsens/intel_tsens_thermal.h    |   3 +
 drivers/misc/intel_tsens/thunderbay_thermal.c | 813 +++++++++++-------
 drivers/misc/intel_tsens/thunderbay_tsens.h   |  79 +-
 include/linux/hddl_device.h                   |   1 +
 5 files changed, 571 insertions(+), 331 deletions(-)

diff --git a/drivers/misc/intel_tsens/intel_tsens_thermal.c b/drivers/misc/intel_tsens/intel_tsens_thermal.c
index 346bc0cb68dc..12fbe33b33ae 100644
--- a/drivers/misc/intel_tsens/intel_tsens_thermal.c
+++ b/drivers/misc/intel_tsens/intel_tsens_thermal.c
@@ -106,6 +106,8 @@ static int intel_tsens_register_pdev(struct intel_tsens_plat_info *plat_info)
 	plat_data.name = plat_info->plat_name;
 	plat_data.get_temp = NULL;
 	plat_data.s_node = plat_info->s_node;
+ 	plat_data.sensor_type = plat_info->sensor_type;
+	plat_data.pdev = plat_info->pdev;
 	pdevinfo.data = &plat_data;
 	pdevinfo.size_data = sizeof(plat_data);
 	dd = platform_device_register_full(&pdevinfo);
@@ -136,7 +138,9 @@ static int intel_tsens_add_pdev(struct intel_tsens_priv *priv)
 	 */
 	if (priv->plat_info.plat_name) {
 		priv->plat_info.base_addr = priv->base_addr;
+ 		priv->plat_info.sensor_type = -1;
 		priv->plat_info.s_node = priv->pid_node;
+		priv->plat_info.pdev = priv->pdev;
 		ret = intel_tsens_register_pdev(&priv->plat_info);
 		if (ret) {
 			dev_err(&priv->pdev->dev,
@@ -152,6 +156,8 @@ static int intel_tsens_add_pdev(struct intel_tsens_priv *priv)
 			continue;
 		tsens->plat_info.base_addr = tsens->base_addr;
 		tsens->plat_info.s_node = priv->pid_node;
+ 		tsens->plat_info.sensor_type = tsens->sensor_type;
+		tsens->plat_info.pdev = priv->pdev;
 		ret = intel_tsens_register_pdev(&tsens->plat_info);
 		if (ret) {
 			dev_err(&priv->pdev->dev,
diff --git a/drivers/misc/intel_tsens/intel_tsens_thermal.h b/drivers/misc/intel_tsens/intel_tsens_thermal.h
index 575eef34f2a5..dfbfacce10ea 100644
--- a/drivers/misc/intel_tsens/intel_tsens_thermal.h
+++ b/drivers/misc/intel_tsens/intel_tsens_thermal.h
@@ -18,7 +18,9 @@ struct intel_tsens_plat_data {
 	void __iomem *base_addr;
 	int (*get_temp)(struct platform_device *pdev, int type, int *temp);
 	void *pdata;
+	int sensor_type;
 	struct device_node *s_node;
+	struct platform_device *pdev;
 };
 
 struct intel_tsens_plat_info {
@@ -26,6 +28,7 @@ struct intel_tsens_plat_info {
 	int id;
 	struct platform_device *pdev;
 	void __iomem *base_addr;
+ 	int sensor_type;
 	struct device_node *s_node;
 };
 
diff --git a/drivers/misc/intel_tsens/thunderbay_thermal.c b/drivers/misc/intel_tsens/thunderbay_thermal.c
index 868c1e82cd92..2fac4e9a0e39 100644
--- a/drivers/misc/intel_tsens/thunderbay_thermal.c
+++ b/drivers/misc/intel_tsens/thunderbay_thermal.c
@@ -19,10 +19,17 @@
 #include <linux/hddl_device.h>
 #include "intel_tsens_thermal.h"
 #include "thunderbay_tsens.h"
+#include <linux/interrupt.h>
+#include <linux/debugfs.h> /* this is for DebugFS libraries */
 
 struct intel_tsens_pid {
 u32 hw_throt_mode_ccu0;
 u32 hw_throt_mode_ccu1;
+u32 hw_throt_mode_ccu2;
+u32 hw_throt_mode_ccu3;
+u32 thres_mask_dts0;
+u32 thres_mask_dts1;
+u32 thres_mask_dts2;
 u32 thres_throt_cnt_cfg;
 u32 therm_scaling_cnt;
 u32 div_throt_cfg_ccu0;
@@ -68,9 +75,20 @@ struct thunderbay_thermal_priv {
 	struct intel_tsens_plat_data *plat_data;
 	struct device_node *s_node;
 	struct intel_tsens_pid *pid_info;
+	bool irq_available;
+	struct platform_device *pdev;
+};
+
+static const mode_t THERMAL_MODE = 0600;
+
+struct thb_thermal {
+	char *name;
+	int offset;
+	void __iomem *base_addr;
 };
 
 static int thb_dt_parse;
+
 static int thb_sensor_read_temp(void __iomem *regs_val,
 				int offset,
 				int *temp)
@@ -175,367 +193,505 @@ static int thunderbay_get_temp(struct platform_device *pdev, int type, int *temp
 	return 0;
 }
 
-static int intel_tsens_pid_config_reg(struct thunderbay_thermal_priv *priv)
+//static irqreturn_t irq_handler(int irq, void *args)
+//{
+//	struct thunderbay_thermal_priv *priv = args;
+//	u32 reg_val;
+//
+//	reg_val = ioread32(priv->base_addr + SW_THERM_INTR_STAT);
+//	iowrite32(reg_val, priv->base_addr + SW_THERM_INTR_STAT);
+//
+//return IRQ_HANDLED;
+//}
+
+static ssize_t offset_read_op(struct file *file, char __user *buf,
+			      size_t count, loff_t *ppos)
 {
-		if (priv->pid_info->hw_throt_mode_ccu0 != 0)
-			iowrite32(priv->pid_info->hw_throt_mode_ccu0,
-				  priv->base_addr + HW_THROT_MODE_CCU0);
+	struct thb_thermal *thb_t = file->private_data;
+	int output;
+	char *data;
+	ssize_t ret;
 
-		if (priv->pid_info->hw_throt_mode_ccu1 != 0)
-			iowrite32(priv->pid_info->hw_throt_mode_ccu1,
-				  priv->base_addr + HW_THROT_MODE_CCU1);
+	data = kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
 
-		if (priv->pid_info->thres_throt_cnt_cfg != 0)
-			iowrite32(priv->pid_info->thres_throt_cnt_cfg,
-				  priv->base_addr + THRES_THROT_CNT_CFG);
+	output = ioread32(thb_t->base_addr + thb_t->offset);
+	ret = snprintf(data, PAGE_SIZE, "Register_base_address : %p\n"
+		       "Register_offset : %x\n"
+		       "Register_Data : %x\n",
+		       thb_t->base_addr,
+		       thb_t->offset,
+		       output);
+
+	ret = simple_read_from_buffer(buf, count, ppos, data, ret);
+	kfree(data);
+return ret;
+}
 
-		if (priv->pid_info->therm_scaling_cnt != 0)
-			iowrite32(priv->pid_info->therm_scaling_cnt,
-				  priv->base_addr + THERM_SCALING_CNT);
+static ssize_t offset_write_op(struct file *file, const char __user *buf,
+			       size_t count, loff_t *ppos)
+{
+	struct thb_thermal *thb_t = file->private_data;
+	char *data;
+	int ret, val, offset;
+	data = kmalloc(PAGE_SIZE, GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+	ret = simple_write_to_buffer(data, 32, ppos, buf, count);
+	//ret = kstrtou32(data, 0, &output);
+	ret = sscanf(data, "%x %x", &val, &offset);
+	if (ret > 2) {
+		kfree(data);
+		return -EINVAL;
+	}
+	iowrite32(val, thb_t->base_addr + thb_t->offset);
+	kfree(data);
+return ret;
+}
 
-		if (priv->pid_info->div_throt_cfg_ccu0 != 0)
-			iowrite32(priv->pid_info->div_throt_cfg_ccu0,
-				  priv->base_addr + DIV_THROT_CFG_CCU0);
+static const struct file_operations thermal_offset_fops = {
+	.open           = simple_open,
+	.read		= offset_read_op,
+	.write		= offset_write_op,
+};
 
-		if (priv->pid_info->div_throt_cfg_ccu1 != 0)
-			iowrite32(priv->pid_info->div_throt_cfg_ccu1,
-				  priv->base_addr + DIV_THROT_CFG_CCU1);
+static int thermal_throttle_debugfs(struct platform_device *pdev,
+				    struct dentry *thermal_debug,
+				    struct thb_thermal *thb_t)
+{
+	struct thb_thermal *thb_debug = NULL;
+	struct dentry *thermal_debug_value;
 
-		if (priv->pid_info->div_throt_cfg_ccu2 != 0)
-			iowrite32(priv->pid_info->div_throt_cfg_ccu2,
-				  priv->base_addr + DIV_THROT_CFG_CCU2);
+	thb_debug = devm_kzalloc(&pdev->dev,
+				 sizeof(struct thb_thermal),
+				 GFP_KERNEL);
+	if (!thb_debug) {
+		dev_err(&pdev->dev, "No memory");
+		return -ENOMEM;
+	}
+
+	thb_debug->base_addr = thb_t->base_addr;
+	thb_debug->name = thb_t->name;
+	thb_debug->offset = thb_t->offset;
+
+	thermal_debug_value = debugfs_create_file(thb_t->name,
+						  THERMAL_MODE,
+						  thermal_debug,
+						  thb_debug,
+						  &thermal_offset_fops);
+	if (!thermal_debug_value) {
+		pr_info(" failed to create file\n");
+		return -1;
+	}
+return 0;
+}
 
-		if (priv->pid_info->div_throt_cfg_ccu3 != 0)
-			iowrite32(priv->pid_info->div_throt_cfg_ccu3,
+static int intel_tbh_thermal_config(struct thunderbay_thermal_priv *priv, int type)
+{
+	struct platform_device *pdev = priv->pdev;
+	int ret, t_reg;
+	//int irq_line;
+	static struct dentry *dir;
+	struct dentry *thermal_debug;
+	struct thb_thermal *thb_t;
+	static int common_dir;
+
+	thb_t = devm_kzalloc(&pdev->dev,
+			     sizeof(struct thb_thermal),
+			     GFP_KERNEL);
+	if (!thb_t) {
+		dev_err(&pdev->dev, "No memory");
+		return -ENOMEM;
+	}
+	if (common_dir == 0) {
+		dir = debugfs_create_dir("thb_thermal", 0);
+		if (!dir) {
+			pr_info("debugfs_dir: failed to create /sys/kernel/debug/thb_thermal\n");
+			return -1;
+		}
+	common_dir++;
+ 	}
+		switch (type) {
+		case CPUSS_SOUTH_NOC:
+			//irq_line = platform_get_irq_byname(pdev, "cpuss");
+			//if (irq_line > 0) {
+				//ret = request_irq(irq_line, irq_handler,
+				//		  0, "Thermal_A53SS_IRQ",
+				//		  priv);
+				//if (ret) {
+				//	pr_info("%d: request_irq failed, errno=%d\n",
+				//		irq_line, -ret);
+				//	free_irq(irq_line, NULL);
+				//}
+			//}
+			// PID CONFIG
+			iowrite32(DTS_THD_SAR_PID_EN_ABORT_VALUE,
+				  priv->base_addr + DTS_THD_SAR_PID_EN_ABORT);
+			iowrite32(DTS_PID_RISE_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS0);
+			iowrite32(DTS_PID_RISE_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS1);
+			iowrite32(DTS_PID_FALL_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS0);
+			iowrite32(DTS_PID_FALL_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS1);
+			iowrite32(DTS_PID_KP_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS0);
+			iowrite32(DTS_PID_KP_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS1);
+			iowrite32(DTS_PID_KD_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS0);
+			iowrite32(DTS_PID_KD_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS1);
+			iowrite32(DTS_PID_KI_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS0);
+			iowrite32(DTS_PID_KI_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS1);
+			iowrite32(DTS_PID_CTRL_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS0);
+			iowrite32(DTS_PID_CTRL_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS1);
+			iowrite32(DIV_THROT_CFG_CCU0_VALUE,
+				  priv->base_addr + DIV_THROT_CFG_CCU0);
+			iowrite32(DIV_THROT_CFG_CCU1_VALUE,
+				  priv->base_addr + DIV_THROT_CFG_CCU1);
+			iowrite32(DIV_THROT_CFG_CCU2_VALUE,
+				  priv->base_addr + DIV_THROT_CFG_CCU2);
+			iowrite32(DIV_THROT_CFG_CCU3_VALUE,
 				  priv->base_addr + DIV_THROT_CFG_CCU3);
+			iowrite32(HW_THROT_MODE_CCU0_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU0);
+			iowrite32(HW_THROT_MODE_CCU1_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU1);
+			iowrite32(HW_THROT_MODE_CCU2_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU2);
+			iowrite32(HW_THROT_MODE_CCU3_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU3);
+			//debugfs
+			thermal_debug = debugfs_create_dir("CPUSS", dir);
+			if (!thermal_debug)
+				pr_info("failed to create thb_thermal/CPUSS dir\n");
+			for (t_reg = 0; t_reg < thb_thermal_size; t_reg++) {
+				thb_t->name = thermal_throt[t_reg];
+				thb_t->offset = thermal_throt_offset[t_reg];
+				thb_t->base_addr = priv->base_addr;
+				ret = thermal_throttle_debugfs(pdev,
+							       thermal_debug,
+							       thb_t);
+				if (ret)
+					pr_info("Thermal Throttling DebugFS Failed");
+			}
 
-		if (priv->pid_info->cg_throt_cfg1_ccu0 != 0)
-			iowrite32(priv->pid_info->cg_throt_cfg1_ccu0,
-				  priv->base_addr + CG_THROT_CFG1_CCU0);
+		break;
 
-		if (priv->pid_info->cg_throt_cfg1_ccu1 != 0)
-			iowrite32(priv->pid_info->cg_throt_cfg1_ccu1,
+		case PAR_VPU_0:
+			//irq_line = platform_get_irq_byname(pdev, "slice0");
+			//if (irq_line > 0) {
+			//	ret = request_irq(irq_line, irq_handler, 0,
+			//			  "Thermal_COM_CPR_0_IRQ",
+			//			  priv);
+			//if (ret) {
+			//	pr_info("%d: request_irq failed, errno=%d\n",
+			//		irq_line, -ret);
+			//	free_irq(irq_line, NULL);
+			//}
+			//}
+			//PID Config
+			iowrite32(DTS_THD_SAR_PID_EN_ABORT_VALUE,
+				  priv->base_addr + DTS_THD_SAR_PID_EN_ABORT);
+			iowrite32(DTS_PID_RISE_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS0);
+			iowrite32(DTS_PID_RISE_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS1);
+			iowrite32(DTS_PID_RISE_THRES_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS2);
+			iowrite32(DTS_PID_FALL_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS0);
+			iowrite32(DTS_PID_FALL_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS1);
+			iowrite32(DTS_PID_FALL_THRES_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS2);
+			iowrite32(DTS_PID_KP_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS0);
+			iowrite32(DTS_PID_KP_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS1);
+			iowrite32(DTS_PID_KP_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS2);
+			iowrite32(DTS_PID_KD_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS0);
+			iowrite32(DTS_PID_KD_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS1);
+			iowrite32(DTS_PID_KD_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS2);
+			iowrite32(DTS_PID_KI_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS0);
+			iowrite32(DTS_PID_KI_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS1);
+			iowrite32(DTS_PID_KI_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS2);
+			iowrite32(DTS_PID_CTRL_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS0);
+			iowrite32(DTS_PID_CTRL_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS1);
+			iowrite32(DTS_PID_CTRL_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS2);
+			iowrite32(CG_THROT_CFG1_CCU0_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU0);
+			iowrite32(CG_THROT_CFG1_CCU1_VALUE,
 				  priv->base_addr + CG_THROT_CFG1_CCU1);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU0_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU0);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU1_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU1);
+			//debugfs
+			thermal_debug = debugfs_create_dir("COMSS1", dir);
+			if (!thermal_debug)
+				pr_info("failed to create thb_thermal/COMSS1 dir\n");
+			for (t_reg = 0; t_reg < thb_thermal_size; t_reg++) {
+				thb_t->name = thermal_throt[t_reg];
+				thb_t->offset = thermal_throt_offset[t_reg];
+				thb_t->base_addr = priv->base_addr;
+				ret = thermal_throttle_debugfs(pdev,
+							       thermal_debug,
+							       thb_t);
+				if (ret)
+					pr_info("Thermal Throttling DebugFS Failed");
+			}
+		break;
 
-		if (priv->pid_info->cg_throt_cfg1_ccu2 != 0)
-			iowrite32(priv->pid_info->cg_throt_cfg1_ccu2,
-				  priv->base_addr + CG_THROT_CFG1_CCU2);
-
-		if (priv->pid_info->cg_throt_cfg1_ccu3 != 0)
-			iowrite32(priv->pid_info->cg_throt_cfg1_ccu3,
-				  priv->base_addr + CG_THROT_CFG1_CCU3);
-
-		if (priv->pid_info->dts_thd_sar_pid_en_abort != 0)
-			iowrite32(priv->pid_info->dts_thd_sar_pid_en_abort,
+		case PAR_VPU_1:
+			//irq_line = platform_get_irq_byname(pdev, "slice1");
+			//if (irq_line > 0) {
+			//	ret = request_irq(irq_line, irq_handler,
+			//			  0,
+			//			  "Thermal_COM_CPR_1_IRQ",
+			//			  priv);
+			//	if (ret) {
+			//		pr_info("%d: request_irq failed, errno=%d\n",
+			//			irq_line, -ret);
+			//		free_irq(irq_line, NULL);
+			//	}
+			//}
+			//PID Config
+			iowrite32(DTS_THD_SAR_PID_EN_ABORT_VALUE,
 				  priv->base_addr + DTS_THD_SAR_PID_EN_ABORT);
-
-		if (priv->pid_info->dts_sar_mode_cfg != 0)
-			iowrite32(priv->pid_info->dts_sar_mode_cfg,
-				  priv->base_addr + DTS_SAR_MODE_CFG);
-
-		if (priv->pid_info->dts_pid_throt_cfg != 0)
-			iowrite32(priv->pid_info->dts_pid_throt_cfg,
-				  priv->base_addr + DTS_PID_THROT_CFG);
-
-		if (priv->pid_info->dts_pid_ctrl_dts0 != 0)
-			iowrite32(priv->pid_info->dts_pid_ctrl_dts0,
+			iowrite32(DTS_PID_RISE_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS0);
+			iowrite32(DTS_PID_RISE_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS1);
+			iowrite32(DTS_PID_RISE_THRES_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS2);
+			iowrite32(DTS_PID_FALL_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS0);
+			iowrite32(DTS_PID_FALL_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS1);
+			iowrite32(DTS_PID_FALL_THRES_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS2);
+			iowrite32(DTS_PID_KP_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS0);
+			iowrite32(DTS_PID_KP_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS1);
+			iowrite32(DTS_PID_KP_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS2);
+			iowrite32(DTS_PID_KD_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS0);
+			iowrite32(DTS_PID_KD_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS1);
+			iowrite32(DTS_PID_KD_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS2);
+			iowrite32(DTS_PID_KI_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS0);
+			iowrite32(DTS_PID_KI_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS1);
+			iowrite32(DTS_PID_KI_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS2);
+			iowrite32(DTS_PID_CTRL_DTS0_VALUE,
 				  priv->base_addr + DTS_PID_CTRL_DTS0);
-
-		if (priv->pid_info->dts_pid_ctrl_dts1 != 0)
-			iowrite32(priv->pid_info->dts_pid_ctrl_dts1,
+			iowrite32(DTS_PID_CTRL_DTS1_VALUE,
 				  priv->base_addr + DTS_PID_CTRL_DTS1);
-
-		if (priv->pid_info->dts_pid_ctrl_dts2 != 0)
-			iowrite32(priv->pid_info->dts_pid_ctrl_dts2,
+			iowrite32(DTS_PID_CTRL_DTS2_VALUE,
 				  priv->base_addr + DTS_PID_CTRL_DTS2);
+			iowrite32(CG_THROT_CFG1_CCU0_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU0);
+			iowrite32(CG_THROT_CFG1_CCU1_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU1);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU0_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU0);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU1_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU1);
+			//debugfs
+			thermal_debug = debugfs_create_dir("COMSS2", dir);
+			if (!thermal_debug)
+				pr_info("failed to create thb_thermal/COMSS2 dir\n");
+			for (t_reg = 0; t_reg < thb_thermal_size; t_reg++) {
+				thb_t->name = thermal_throt[t_reg];
+				thb_t->offset = thermal_throt_offset[t_reg];
+				thb_t->base_addr = priv->base_addr;
+				ret = thermal_throttle_debugfs(pdev,
+							       thermal_debug,
+							       thb_t);
+				if (ret)
+					pr_info("Thermal Throttling DebugFS Failed");
+			}
+		break;
 
-		if (priv->pid_info->dts_pid_kp_dts0 != 0)
-			iowrite32(priv->pid_info->dts_pid_kp_dts0,
+		case PAR_VPU_2:
+			//irq_line = platform_get_irq_byname(pdev, "slice2");
+			//if (irq_line > 0) {
+			//	ret = request_irq(irq_line, irq_handler,
+			//			  0,
+			//			  "Thermal_COM_CPR_2_IRQ",
+			//			  priv);
+			//if (ret) {
+			//	pr_info("%d: request_irq failed, errno=%d\n",
+			//		irq_line, -ret);
+			//	free_irq(irq_line, NULL);
+			//}
+			//}
+			//PID Config
+			iowrite32(DTS_THD_SAR_PID_EN_ABORT_VALUE,
+				  priv->base_addr + DTS_THD_SAR_PID_EN_ABORT);
+			iowrite32(DTS_PID_RISE_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS0);
+			iowrite32(DTS_PID_RISE_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS1);
+			iowrite32(DTS_PID_RISE_THRES_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_RISE_THRES_DTS2);
+			iowrite32(DTS_PID_FALL_THRES_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS0);
+			iowrite32(DTS_PID_FALL_THRES_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS1);
+			iowrite32(DTS_PID_FALL_THRES_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_FALL_THRES_DTS2);
+			iowrite32(DTS_PID_KP_DTS0_VALUE,
 				  priv->base_addr + DTS_PID_KP_DTS0);
-
-		if (priv->pid_info->dts_pid_kp_dts1 != 0)
-			iowrite32(priv->pid_info->dts_pid_kp_dts1,
+			iowrite32(DTS_PID_KP_DTS1_VALUE,
 				  priv->base_addr + DTS_PID_KP_DTS1);
-
-		if (priv->pid_info->dts_pid_kp_dts2 != 0)
-			iowrite32(priv->pid_info->dts_pid_kp_dts2,
+			iowrite32(DTS_PID_KP_DTS2_VALUE,
 				  priv->base_addr + DTS_PID_KP_DTS2);
-
-		if (priv->pid_info->dts_pid_kd_dts0 != 0)
-			iowrite32(priv->pid_info->dts_pid_kd_dts0,
+			iowrite32(DTS_PID_KD_DTS0_VALUE,
 				  priv->base_addr + DTS_PID_KD_DTS0);
-
-		if (priv->pid_info->dts_pid_kd_dts1 != 0)
-			iowrite32(priv->pid_info->dts_pid_kd_dts1,
+			iowrite32(DTS_PID_KD_DTS1_VALUE,
 				  priv->base_addr + DTS_PID_KD_DTS1);
-
-		if (priv->pid_info->dts_pid_kd_dts2 != 0)
-			iowrite32(priv->pid_info->dts_pid_kd_dts2,
+			iowrite32(DTS_PID_KD_DTS2_VALUE,
 				  priv->base_addr + DTS_PID_KD_DTS2);
-
-		if (priv->pid_info->dts_pid_ki_dts0 != 0)
-			iowrite32(priv->pid_info->dts_pid_ki_dts0,
+			iowrite32(DTS_PID_KI_DTS0_VALUE,
 				  priv->base_addr + DTS_PID_KI_DTS0);
-
-		if (priv->pid_info->dts_pid_ki_dts1 != 0)
-			iowrite32(priv->pid_info->dts_pid_ki_dts1,
+			iowrite32(DTS_PID_KI_DTS1_VALUE,
 				  priv->base_addr + DTS_PID_KI_DTS1);
-
-		if (priv->pid_info->dts_pid_ki_dts2 != 0)
-			iowrite32(priv->pid_info->dts_pid_ki_dts2,
+			iowrite32(DTS_PID_KI_DTS2_VALUE,
 				  priv->base_addr + DTS_PID_KI_DTS2);
-
-		if (priv->pid_info->dts_pid_rise_thres_dts0 != 0)
-			iowrite32(priv->pid_info->dts_pid_rise_thres_dts0,
+			iowrite32(DTS_PID_CTRL_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS0);
+			iowrite32(DTS_PID_CTRL_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS1);
+			iowrite32(DTS_PID_CTRL_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS2);
+			iowrite32(CG_THROT_CFG1_CCU0_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU0);
+			iowrite32(CG_THROT_CFG1_CCU1_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU1);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU0_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU0);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU1_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU1);
+			//debugfs
+			thermal_debug = debugfs_create_dir("COMSS3", dir);
+			if (!thermal_debug)
+				pr_info("failed to create thb_thermal/COMSS3 dir\n");
+			for (t_reg = 0; t_reg < thb_thermal_size; t_reg++) {
+				thb_t->name = thermal_throt[t_reg];
+				thb_t->offset = thermal_throt_offset[t_reg];
+				thb_t->base_addr = priv->base_addr;
+				ret = thermal_throttle_debugfs(pdev,
+							       thermal_debug,
+							       thb_t);
+				if (ret)
+					pr_info("Thermal Throttling DebugFS Failed");
+			}
+			break;
+
+		case PAR_VPU_3:
+			//irq_line = platform_get_irq_byname(pdev, "slice3");
+			//if (irq_line > 0) {
+				//ret = request_irq(irq_line, irq_handler,
+						//  0,
+						//  "Thermal_COM_CPR_3_IRQ",
+						//  priv);
+			//if (ret) {
+				//pr_info("%d: request_irq failed, errno=%d\n",
+					//irq_line, -ret);
+				//free_irq(irq_line, NULL);
+			//}
+			//}
+			//PID Config
+			iowrite32(DTS_THD_SAR_PID_EN_ABORT_VALUE,
+				  priv->base_addr + DTS_THD_SAR_PID_EN_ABORT);
+			iowrite32(DTS_PID_RISE_THRES_DTS0_VALUE,
 				  priv->base_addr + DTS_PID_RISE_THRES_DTS0);
-
-		if (priv->pid_info->dts_pid_rise_thres_dts1 != 0)
-			iowrite32(priv->pid_info->dts_pid_rise_thres_dts1,
+			iowrite32(DTS_PID_RISE_THRES_DTS1_VALUE,
 				  priv->base_addr + DTS_PID_RISE_THRES_DTS1);
-
-		if (priv->pid_info->dts_pid_rise_thres_dts2 != 0)
-			iowrite32(priv->pid_info->dts_pid_rise_thres_dts2,
+			iowrite32(DTS_PID_RISE_THRES_DTS2_VALUE,
 				  priv->base_addr + DTS_PID_RISE_THRES_DTS2);
-
-		if (priv->pid_info->dts_pid_fall_thres_dts0 != 0)
-			iowrite32(priv->pid_info->dts_pid_fall_thres_dts0,
+			iowrite32(DTS_PID_FALL_THRES_DTS0_VALUE,
 				  priv->base_addr + DTS_PID_FALL_THRES_DTS0);
-
-		if (priv->pid_info->dts_pid_fall_thres_dts1 != 0)
-			iowrite32(priv->pid_info->dts_pid_fall_thres_dts1,
+			iowrite32(DTS_PID_FALL_THRES_DTS1_VALUE,
 				  priv->base_addr + DTS_PID_FALL_THRES_DTS1);
-
-		if (priv->pid_info->dts_pid_fall_thres_dts2 != 0)
-			iowrite32(priv->pid_info->dts_pid_fall_thres_dts2,
+			iowrite32(DTS_PID_FALL_THRES_DTS2_VALUE,
 				  priv->base_addr + DTS_PID_FALL_THRES_DTS2);
+			iowrite32(DTS_PID_KP_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS0);
+			iowrite32(DTS_PID_KP_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS1);
+			iowrite32(DTS_PID_KP_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KP_DTS2);
+			iowrite32(DTS_PID_KD_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS0);
+			iowrite32(DTS_PID_KD_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS1);
+			iowrite32(DTS_PID_KD_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KD_DTS2);
+			iowrite32(DTS_PID_KI_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS0);
+			iowrite32(DTS_PID_KI_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS1);
+			iowrite32(DTS_PID_KI_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_KI_DTS2);
+			iowrite32(DTS_PID_CTRL_DTS0_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS0);
+			iowrite32(DTS_PID_CTRL_DTS1_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS1);
+			iowrite32(DTS_PID_CTRL_DTS2_VALUE,
+				  priv->base_addr + DTS_PID_CTRL_DTS2);
+			iowrite32(CG_THROT_CFG1_CCU0_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU0);
+			iowrite32(CG_THROT_CFG1_CCU1_VALUE,
+				  priv->base_addr + CG_THROT_CFG1_CCU1);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU0_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU0);
+			iowrite32(COMPSS_HW_THROT_MODE_CCU1_VALUE,
+				  priv->base_addr + HW_THROT_MODE_CCU1);
+			//debugfs
+			thermal_debug = debugfs_create_dir("COMSS4", dir);
+			if (!thermal_debug)
+				pr_info("failed to create thb_thermal/COMSS4 dir\n");
+			for (t_reg = 0; t_reg < thb_thermal_size; t_reg++) {
+				thb_t->name = thermal_throt[t_reg];
+				thb_t->offset = thermal_throt_offset[t_reg];
+				thb_t->base_addr = priv->base_addr;
+				ret = thermal_throttle_debugfs(pdev, thermal_debug, thb_t);
+				if (ret)
+					pr_info("Thermal Throttling DebugFS Failed");
+			}
+		break;
 
-		if (priv->pid_info->dts_pid_max_integ_limit != 0)
-			iowrite32(priv->pid_info->dts_pid_max_integ_limit,
-				  priv->base_addr + DTS_PID_MAX_INTEG_LIMIT);
-
-		if (priv->pid_info->dts_pid_min_integ_limit != 0)
-			iowrite32(priv->pid_info->dts_pid_min_integ_limit,
-				  priv->base_addr + DTS_PID_MIN_INTEG_LIMIT);
-
-		if (priv->pid_info->dts_pid_max_accum_limit != 0)
-			iowrite32(priv->pid_info->dts_pid_max_accum_limit,
-				  priv->base_addr + DTS_PID_MAX_ACCUM_LIMIT);
-
-		if (priv->pid_info->dts_pid_min_accum_limit != 0)
-			iowrite32(priv->pid_info->dts_pid_min_accum_limit,
-				  priv->base_addr + DTS_PID_MIN_ACCUM_LIMIT);
-return 0;
-}
-
-int intel_tsens_pid_config_dt(struct thunderbay_thermal_priv *priv)
-{
-	struct device_node *t_node = priv->s_node;
-	struct device_node *np, *s_node;
-
-	for_each_child_of_node(t_node, s_node) {
-		int ret;
-		struct intel_tsens_pid pid = {0};
-
-		priv->pid_info = &pid;
-		np = of_parse_phandle(s_node, "pid_cfg", 0);
-		if (!np)
-			return NULL;
-
-		ret = of_property_read_u32(np, "hw_throt_mode_ccu0",
-					   &priv->pid_info->hw_throt_mode_ccu0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "hw_throt_mode_ccu1",
-					   &priv->pid_info->hw_throt_mode_ccu1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "thres_throt_cnt_cfg",
-					   &priv->pid_info->thres_throt_cnt_cfg);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "therm_scaling_cnt",
-					   &priv->pid_info->therm_scaling_cnt);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "div_throt_cfg_ccu0",
-					   &priv->pid_info->div_throt_cfg_ccu0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "div_throt_cfg_ccu1",
-					   &priv->pid_info->div_throt_cfg_ccu1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "div_throt_cfg_ccu2",
-					   &priv->pid_info->div_throt_cfg_ccu2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "div_throt_cfg_ccu3",
-					   &priv->pid_info->div_throt_cfg_ccu3);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu0",
-					   &priv->pid_info->cg_throt_cfg1_ccu0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu1",
-					   &priv->pid_info->cg_throt_cfg1_ccu1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu2",
-					   &priv->pid_info->cg_throt_cfg1_ccu2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "cg_throt_cfg1_ccu3",
-					   &priv->pid_info->cg_throt_cfg1_ccu3);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_thd_sar_pid_en_abort",
-					   &priv->pid_info->dts_thd_sar_pid_en_abort);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_sar_mode_cfg",
-					   &priv->pid_info->dts_sar_mode_cfg);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_throt_cfg",
-					   &priv->pid_info->dts_pid_throt_cfg);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_ctrl_dts0",
-					   &priv->pid_info->dts_pid_ctrl_dts0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_ctrl_dts1",
-					   &priv->pid_info->dts_pid_ctrl_dts1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_ctrl_dts2",
-					   &priv->pid_info->dts_pid_ctrl_dts2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_kp_dts0",
-					   &priv->pid_info->dts_pid_kp_dts0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_kp_dts1",
-					   &priv->pid_info->dts_pid_kp_dts1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_kp_dts2",
-					   &priv->pid_info->dts_pid_kp_dts2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_kd_dts0",
-					   &priv->pid_info->dts_pid_kd_dts0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_kd_dts1",
-					   &priv->pid_info->dts_pid_kd_dts1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_kd_dts2",
-					   &priv->pid_info->dts_pid_kd_dts2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_ki_dts0",
-					   &priv->pid_info->dts_pid_ki_dts0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_ki_dts1",
-					   &priv->pid_info->dts_pid_ki_dts1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_ki_dts2",
-					   &priv->pid_info->dts_pid_ki_dts2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_rise_thres_dts0",
-					   &priv->pid_info->dts_pid_rise_thres_dts0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_rise_thres_dts1",
-					   &priv->pid_info->dts_pid_rise_thres_dts1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_rise_thres_dts2",
-					   &priv->pid_info->dts_pid_rise_thres_dts2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_fall_thres_dts0",
-					   &priv->pid_info->dts_pid_fall_thres_dts0);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_fall_thres_dts1",
-					   &priv->pid_info->dts_pid_fall_thres_dts1);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_fall_thres_dts2",
-					   &priv->pid_info->dts_pid_fall_thres_dts2);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_max_integ_limit",
-					   &priv->pid_info->dts_pid_max_integ_limit);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_min_integ_limit",
-					   &priv->pid_info->dts_pid_min_integ_limit);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_max_accum_limit",
-					   &priv->pid_info->dts_pid_max_accum_limit);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = of_property_read_u32(np, "dts_pid_min_accum_limit",
-					   &priv->pid_info->dts_pid_min_accum_limit);
-		if (ret && ret != -EINVAL)
-			goto invalid;
-
-		ret = intel_tsens_pid_config_reg(priv);
-		if (ret)
-			goto invalid;
-
-invalid:
-	return ret;
+		default:
+			break;
 	}
 return 0;
 }
-EXPORT_SYMBOL_GPL(intel_tsens_pid_config_dt);
+
 
 static int thunderbay_thermal_probe(struct platform_device *pdev)
 {
@@ -559,12 +715,11 @@ static int thunderbay_thermal_probe(struct platform_device *pdev)
 	priv->base_addr = plat_data->base_addr;
 	priv->plat_data = plat_data;
 	priv->s_node = plat_data->s_node;
-	if (priv->s_node != 0 && thb_dt_parse < 1) {
-		if (intel_tsens_pid_config_dt(priv))
-			dev_info(&pdev->dev, "PID dt_parsing failed");
-		thb_dt_parse++;
-	}
+	priv->pdev = plat_data->pdev;
 	plat_data->get_temp = thunderbay_get_temp;
+	//thermal register config
+	if (intel_tbh_thermal_config(priv, plat_data->sensor_type))
+		dev_info(&pdev->dev, "THENDERBAY_THERMAL_CONFIGURATION_FAILED");
 	spin_lock_init(&priv->lock);
 	platform_set_drvdata(pdev, priv);
 
diff --git a/drivers/misc/intel_tsens/thunderbay_tsens.h b/drivers/misc/intel_tsens/thunderbay_tsens.h
index 448220d67a82..aa542d1c152b 100644
--- a/drivers/misc/intel_tsens/thunderbay_tsens.h
+++ b/drivers/misc/intel_tsens/thunderbay_tsens.h
@@ -29,9 +29,17 @@
 #define LOWER_TEMP -13736
 #define UPPER_TEMP 153123
 
+/* THERMAL INTERRUPT CLEAR */
+#define SW_THERM_INTR_STAT 0x407c
+
 /* PID Registers */
 #define HW_THROT_MODE_CCU0 0x308c
 #define HW_THROT_MODE_CCU1 0x3090
+#define HW_THROT_MODE_CCU2 0x3094
+#define HW_THROT_MODE_CCU3 0x3098
+#define THRES_MASK_DTS0 0x4c4
+#define THRES_MASK_DTS1 0x4c8
+#define THRES_MASK_DTS2 0x4cc
 #define THRES_THROT_CNT_CFG 0x3020
 #define THERM_SCALING_CNT 0x3078
 #define DIV_THROT_CFG_CCU0 0x3000
@@ -42,7 +50,6 @@
 #define CG_THROT_CFG1_CCU1 0x3014
 #define CG_THROT_CFG1_CCU2 0x3018
 #define CG_THROT_CFG1_CCU3 0x301C
-#define THRES_THROT_CNT_CFG 0x3020
 #define DTS_THD_SAR_PID_EN_ABORT 0x3024
 #define DTS_SAR_MODE_CFG 0x3028
 #define DTS_PID_THROT_CFG 0x302C
@@ -64,12 +71,56 @@
 #define DTS_PID_FALL_THRES_DTS0 0x306C
 #define DTS_PID_FALL_THRES_DTS1 0x3070
 #define DTS_PID_FALL_THRES_DTS2 0x3074
-#define THERM_SCALING_CNT 0x3078
 #define DTS_PID_MAX_INTEG_LIMIT 0x30AC
 #define DTS_PID_MIN_INTEG_LIMIT 0x30B0
 #define DTS_PID_MAX_ACCUM_LIMIT 0x30B4
 #define DTS_PID_MIN_ACCUM_LIMIT 0x30B8
 
+/* PID COMMON CONFIG */
+
+#define DTS_THD_SAR_PID_EN_ABORT_VALUE 0x71c0
+#define DTS_PID_RISE_THRES_DTS0_VALUE 0X0
+#define DTS_PID_RISE_THRES_DTS1_VALUE 0X0
+#define DTS_PID_RISE_THRES_DTS2_VALUE 0X0
+#define DTS_PID_FALL_THRES_DTS0_VALUE 0X0
+#define DTS_PID_FALL_THRES_DTS1_VALUE 0X0
+#define DTS_PID_FALL_THRES_DTS2_VALUE 0X0
+
+#define DTS_PID_KP_DTS0_VALUE 0X1
+#define DTS_PID_KP_DTS1_VALUE 0X1
+#define DTS_PID_KP_DTS2_VALUE 0X1
+#define DTS_PID_KD_DTS0_VALUE 0X0
+#define DTS_PID_KD_DTS1_VALUE 0X0
+#define DTS_PID_KD_DTS2_VALUE 0X0
+#define DTS_PID_KI_DTS0_VALUE 0X0
+#define DTS_PID_KI_DTS1_VALUE 0X0
+#define DTS_PID_KI_DTS2_VALUE 0X0
+
+#define THD_TO_BE_CONFIGURED 0XC0
+#define DTS_PID_CTRL_DTS0_VALUE (0X100 | THD_TO_BE_CONFIGURED)
+#define DTS_PID_CTRL_DTS1_VALUE (0X100 | THD_TO_BE_CONFIGURED)
+#define DTS_PID_CTRL_DTS2_VALUE (0X100 | THD_TO_BE_CONFIGURED)
+
+/* PID CPUSS CONFIG */
+#define DIV_THROT_CFG_CCU0_VALUE 0X85
+#define DIV_THROT_CFG_CCU1_VALUE 0X85
+#define DIV_THROT_CFG_CCU2_VALUE 0X85
+#define DIV_THROT_CFG_CCU3_VALUE  0X85
+
+#define HW_THROT_MODE_CCU0_VALUE 0X5
+#define HW_THROT_MODE_CCU1_VALUE 0X5
+#define HW_THROT_MODE_CCU2_VALUE 0X9
+#define HW_THROT_MODE_CCU3_VALUE 0X9
+ 
+/* PID COMPSS */
+
+#define CG_THROT_CFG1_CCU0_VALUE 0X10860
+#define CG_THROT_CFG1_CCU1_VALUE 0X10860
+#define COMPSS_HW_THROT_MODE_CCU0_VALUE 0X7
+#define COMPSS_HW_THROT_MODE_CCU1_VALUE 0XB
+
+#define REG_NAME_LENGTH 50
+
 /* temperature calculation lookup */
 
 #define THUNDERBAY_SENSOR_BASE_TEMP 27
@@ -171,6 +222,30 @@ static int raw_thb[] = {
 
 static int raw_thb_size = sizeof(raw_thb) / sizeof(int);
 
+char *thermal_throt[] = {
+"HW_THROT_MODE_CCU0", "HW_THROT_MODE_CCU1", "HW_THROT_MODE_CCU2",
+"HW_THROT_MODE_CCU3", "THRES_MASK_DTS0", "THRES_MASK_DTS1", "THRES_MASK_DTS2",
+"THRES_THROT_CNT_CFG", "THERM_SCALING_CNT", "DIV_THROT_CFG_CCU0", "DIV_THROT_CFG_CCU1",
+"DIV_THROT_CFG_CCU2", "DIV_THROT_CFG_CCU3", "CG_THROT_CFG1_CCU0", "CG_THROT_CFG1_CCU1",
+"CG_THROT_CFG1_CCU2", "CG_THROT_CFG1_CCU3", "DTS_THD_SAR_PID_EN_ABORT", "DTS_SAR_MODE_CFG",
+"DTS_PID_THROT_CFG", "DTS_PID_CTRL_DTS0", "DTS_PID_CTRL_DTS1", "DTS_PID_CTRL_DTS2",
+"DTS_PID_KP_DTS0", "DTS_PID_KP_DTS1", "DTS_PID_KP_DTS2", "DTS_PID_KD_DTS0",
+"DTS_PID_KD_DTS1", "DTS_PID_KD_DTS2", "DTS_PID_KI_DTS0", "DTS_PID_KI_DTS1",
+"DTS_PID_KI_DTS2", "DTS_PID_RISE_THRES_DTS0", "DTS_PID_RISE_THRES_DTS1",
+"DTS_PID_RISE_THRES_DTS2", "DTS_PID_FALL_THRES_DTS0", "DTS_PID_FALL_THRES_DTS1",
+"DTS_PID_FALL_THRES_DTS2", "DTS_PID_MAX_INTEG_LIMIT", "DTS_PID_MIN_INTEG_LIMIT",
+"DTS_PID_MAX_ACCUM_LIMIT", "DTS_PID_MIN_ACCUM_LIMIT"
+};
+
+int thermal_throt_offset[] = {
+0x308c, 0x3090, 0x3094, 0x3098, 0x4c4, 0x4c8, 0x4cc, 0x3020, 0x3078, 0x3000, 0x3004,
+0x3008, 0x300C, 0x3010, 0x3014, 0x3018, 0x301C, 0x3024, 0x3028, 0x302C, 0x3030, 0x3034,
+0x3038, 0x303C, 0x3040, 0x3044, 0x3048, 0x304C, 0x3050, 0x3054, 0x3058, 0x305C, 0x3060,
+0x3064, 0x3068, 0x306C, 0x3070, 0x3074, 0x30AC, 0x30B0, 0x30B4, 0x30B8
+};
+
+static int thb_thermal_size = sizeof(thermal_throt_offset) / sizeof(int);
+
 enum thb_thermal_sensor_en {
 	CPUSS_SOUTH_NOC,
 	CPUSS_NORTH_NOC,
diff --git a/include/linux/hddl_device.h b/include/linux/hddl_device.h
index 57b0dc2b5c41..0b5aff058d31 100644
--- a/include/linux/hddl_device.h
+++ b/include/linux/hddl_device.h
@@ -106,6 +106,7 @@ struct intel_tsens_data {
 	u32 passive_delay;
 	u32 polling_delay;
 	u32 sensor_type;
+	struct device_node *s_node;
 } __packed __aligned(HDDL_ALIGN);
 
 struct intel_hddl_i2c_devs_data {
-- 
2.27.0

