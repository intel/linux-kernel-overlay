From 0c1b324681b2a78475f4ab7369db1cf69fb6a303 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Mon, 12 Oct 2020 16:58:58 -0700
Subject: [PATCH 62/76] thermal: intel: hfi: Enable the Enhanced Hardware
 Feedback Interface

Enable the Enhanced Hardware Feedback Interface (EHFI)to classify threads.
EHFI provides functionality to classify a software thread running ona CPU.

Discover how many classification classes exist. Also, when enabling the
HFI, set the EHFI bit.

Lastly, on CPU hotplug, enable the IA32_HW_FEEDBACK_THREAD_CONFIG.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/include/asm/hfi.h        |  6 ++++++
 arch/x86/include/asm/msr-index.h  |  2 ++
 drivers/thermal/intel/intel_hfi.c | 30 ++++++++++++++++++++++--------
 3 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/arch/x86/include/asm/hfi.h b/arch/x86/include/asm/hfi.h
index 2a1ed3ac5c9a..d840270ce190 100644
--- a/arch/x86/include/asm/hfi.h
+++ b/arch/x86/include/asm/hfi.h
@@ -10,6 +10,8 @@
 #define CPUID_HFI_TABLE_SIZE_SHIFT	8
 #define CPUID_HFI_CPU_INDEX_MASK	0xffff0000
 #define CPUID_HFI_CPU_INDEX_SHIFT	16
+#define CPUID_EHFI_CLASSES_MASK		0xf00
+#define CPUID_EHFI_CLASSES_SHIFT	8
 
 /* Hardware Feedback Interface Pointer */
 #define HFI_PTR_VALID_BIT		BIT(0)
@@ -17,6 +19,10 @@
 
 /* Hardware Feedback Interface Configuration */
 #define HFI_CONFIG_ENABLE_BIT		BIT(0)
+#define EHFI_CONFIG_ENABLE_BIT		BIT(1)
+
+/* Thread classification Configuration */
+#define EHFI_THREAD_CONFIG_ENABLE	BIT(0)
 
 /* Hardware Feedback Interface Capabilities */
 #define HFI_CAPABILITIES_MASK		0xff
diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 2f808ee55bdb..9d2ae3d626e3 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -940,6 +940,8 @@
 /* Hardware Feedback Interface */
 #define MSR_IA32_HW_FEEDBACK_PTR        0x17d0
 #define MSR_IA32_HW_FEEDBACK_CONFIG     0x17d1
+#define MSR_IA32_HW_FEEDBACK_THREAD_CONFIG 0x17d4
+#define MSR_IA32_HW_FEEDBACK_CHAR	0x17d2
 
 /* History RESET */
 #define MSR_IA32_HW_HRESET_ENABLE	0x17da
diff --git a/drivers/thermal/intel/intel_hfi.c b/drivers/thermal/intel/intel_hfi.c
index c5678229debf..20f3db399cc4 100644
--- a/drivers/thermal/intel/intel_hfi.c
+++ b/drivers/thermal/intel/intel_hfi.c
@@ -757,6 +757,11 @@ int enable_hfi(unsigned int cpu)
 			return -ENXIO;
 	}
 
+	if (boot_cpu_has(X86_FEATURE_INTEL_EHFI)) {
+		msr_val = EHFI_THREAD_CONFIG_ENABLE;
+		wrmsrl(MSR_IA32_HW_FEEDBACK_THREAD_CONFIG, msr_val);
+	}
+
 	/*
 	 * Now check if the HFI parameters for the package/die of this CPU have
 	 * been initialized. In such case, all we have to do is add @cpu to the
@@ -887,6 +892,15 @@ int enable_hfi(unsigned int cpu)
 	params->die_id = die_id;
 	info->params = params;
 
+	/* Enable the hardware feedback interface. */
+	rdmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
+	msr_val |= HFI_CONFIG_ENABLE_BIT;
+
+	if (boot_cpu_has(X86_FEATURE_INTEL_EHFI))
+		msr_val |= EHFI_CONFIG_ENABLE_BIT;
+
+	wrmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
+
 #ifdef CONFIG_DEBUG_FS
 	if (hfi_debugfs_dir) {
 		char name[64];
@@ -896,12 +910,6 @@ int enable_hfi(unsigned int cpu)
 				    &hfi_state_ops);
 	}
 #endif
-
-	/* Enable the hardware feedback interface. */
-	rdmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
-	msr_val |= HFI_CONFIG_ENABLE_BIT;
-	wrmsrl(MSR_IA32_HW_FEEDBACK_CONFIG, msr_val);
-
 	return 0;
 
 free_hw_table:
@@ -1008,8 +1016,14 @@ static __init int hfi_parse_features(void)
 	 */
 	hfi_features.class_stride = nr_capabilities;
 
-	/* For now, use only one class of the HFI table */
-	hfi_features.nr_classes = 1;
+	if (boot_cpu_has(X86_FEATURE_INTEL_EHFI)) {
+		reg = cpuid_ecx(CPUID_HFI_LEAF);
+
+		hfi_features.nr_classes = (reg & CPUID_EHFI_CLASSES_MASK) >>
+					  CPUID_EHFI_CLASSES_SHIFT;
+	} else {
+		hfi_features.nr_classes = 1;
+	}
 
 	/*
 	 * The header contains change indications for each supported feature.
-- 
2.27.0

