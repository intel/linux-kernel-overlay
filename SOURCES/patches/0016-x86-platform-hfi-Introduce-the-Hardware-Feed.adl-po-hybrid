From 47359a31899e277fc6e1cf3c92745492ae6fc7fb Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Fri, 25 May 2018 13:20:46 +0800
Subject: [PATCH 16/68] x86/platform/hfi: Introduce the Hardware Feedback
 Interface for scheduling

Intel hardware can provide guidance to the OS scheduler to improve
workload balancing through a feedback interface. For each CPU in the
system, the hardware provides a performance capability and an energy
efficiency capability rating. These ratings are numbers between 0 and 255
where a higher number depicts a higher capability. Hardware continuously
computes these scores based on the operating conditions of the system such
as power and thermal limits, among others. These ratings are shared with
the operating system in a table resident in memory. Each logical CPU has
an entry. When the hardware updates the ratings, it generates a thermal
interrupt.

In this changeset, only implement the facilities needed to detect support
for the Hardware Feedback Interface, allocate memory for the HFI table.
Enable hardware updates in subsequent changeset.

Intel has defined both the Hardware Feedback Interface and the Enhanced
Feedback Interface. The former can be regarded as an instance of the
latter: one with a single class and two capabilities (i.e., performance
and energy efficiency). Implement the data structures needed to parse the
HFI table in a generic manner so that it can also handle the Enhanced HFI
when it features more than one class and multiple capabilities per class.
This work will be done in a subsequent changeset.

Cc: Andi Kleen <ak@linux.intel.com>
Cc: Aubrey Li <aubrey.li@linux.intel.com>
Cc: Len Brown <len.brown@intel.com>
Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Cc: Tim Chen <tim.c.chen@linux.intel.com>
Cc: "Ravi V. Shankar" <ravi.v.shankar@intel.com>
Co-developed by: Aubrey Li <aubrey.li@linux.intel.com>
Signed-off-by: Aubrey Li <aubrey.li@linux.intel.com>
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
Changes since v4:
  * Removed unnecessary CPU hotplug callback and logic to get the indexes
    of CPUs in the HFI table. Instead, a subsequent patch will initialize
    the index from identify_cpu() (in the CPU hotplug online path). (Len)
  * Reworded Kconfig option for accuracy. (Tim)
  * Add __packed attribute to HFI data structures. It is probably not
    necessary today but the structure my change in the future. (Len)
  * Remove struct hfi_info. Instead, use a per-CPU variable for a CPU's
    index in the HFI table. A value of -1 means the index is not
    initialized. (Len).
  * Renamed local variable edx of intel_hfi_init() to the more generic name
    reg.
  * Removed check (topology_max_packages() > 1) as such macro returns the
    number of *logical* packages, which can be larger than the number of
    physical packages if kernel command line arguments make the condition
    (maxcpus < nr_cpus) true, or some CPUs fail to come online.
  * Generalized data structures to accommodate the Enhanced Hardware
    Feedback Interface.
  * Added a new init_hfi_params() function to set parameters to navigate
    the table.
  * Removed per-CPU timestamp. All capacities will be updated when
    hardware updates the HFI table.

Changes since v3:
  * Removed unnecessary headers.
  * Use [alloc|free]_pages_exact() instead of __get_free_pages() to handle
    memory for the HFI table. Also, fix bug on the number of requested
    pages. (Dave)
  * Explain why memory for the HFI table must be page-aligned. (Dave)
  * Dropped pointless sanity check for CPUID with respect to the maximum
    number requested pages for the HFI table. (Dave)
  * Set CPUs' HFI indexes when initializing the HFI table. This removes the
    previous check for initialization when handling the thermal interrupt.
    (PeterZ)
  * Improved inline comments. (PeterZ)

Changes since v2:
  * None

Changes since v1:
  * Used __GFP_ZERO instead of memset(base, 0, size) to initialize the HFI
    memory page. (Peter Z)
  * Removed per-CPU printouts when initializing the HFI. (Peter Z)
  * Changed the size of hfi_table.cpu_cap from NR_CPUS to zero. Memory for
    this data structure is dynamically allocated based on CPUID info.
    (Peter Z)
  * Relocated the implementation of function x86_hfi_check_event() to the
    patch in which it is used. (Peter Z)
  * Divided HFI initialization into two sections: put basic initialization
    in a device initcall. Complete per-CPU initialization in a CPU hotplug
    online callback. (Ravi)
  * Removed useless overwrite of table_pages in every CPU. Instead, use the
    CPUID information from the CPU doing the HFI initialization. (Peter Z)
  * Removed per-CPU printouts during initialization. (Peter Z)
  * Renamed functions with the more appropriate prefix intel_hfi*. (Len)
  * Minor rewords in Kconfig option description. (Len)
  * Initialized package-level MSRs only once. (Srinivas)
  * Added a paragraph describing what the new hfi.c does. (Andi)
  * Sanity-check the number of pages requested by HFI in CPUID. (Andi)
  * Removed pointless check of the validity of the virtual base address of
    the HFI table. (Andi)
---
 arch/x86/Kconfig                   |  14 +++
 arch/x86/include/asm/cpufeatures.h |   1 +
 arch/x86/include/asm/hfi.h         |  27 +++++
 arch/x86/include/asm/msr-index.h   |   6 ++
 arch/x86/platform/intel/Makefile   |   1 +
 arch/x86/platform/intel/hfi.c      | 153 +++++++++++++++++++++++++++++
 6 files changed, 202 insertions(+)
 create mode 100644 arch/x86/include/asm/hfi.h
 create mode 100644 arch/x86/platform/intel/hfi.c

diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 2792879d398e..d292cc723c55 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -693,6 +693,20 @@ config IOSF_MBI_DEBUG
 
 	  If you don't require the option or are in doubt, say N.
 
+config INTEL_HFI
+	bool "Intel Hardware Feedback Interface"
+	depends on CPU_SUP_INTEL
+	depends on SCHED_MC && X86_INTEL_PSTATE && X86_THERMAL_VECTOR
+	help
+	  Select this option to enable the Hardware Feedback Interface in
+	  Intel hybrid processors. If selected, hardware provides guidance to
+	  the scheduler to enhance task placement. The feedback provided by the
+	  HFI feeds the scheduler to update the capacity of CPUs. Depending on
+	  the operating conditions of the system, the capacity of CPUs may
+	  change during runtime.
+
+	  Say Y to enable the Hardware Feedback Interface, say Y.
+
 config X86_RDC321X
 	bool "RDC R-321x SoC"
 	depends on X86_32
diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
index 1ba4a6e1690c..8cb88afa18a3 100644
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@ -321,6 +321,7 @@
 #define X86_FEATURE_HWP_ACT_WINDOW	(14*32+ 9) /* HWP Activity Window */
 #define X86_FEATURE_HWP_EPP		(14*32+10) /* HWP Energy Perf. Preference */
 #define X86_FEATURE_HWP_PKG_REQ		(14*32+11) /* HWP Package Level Request */
+#define X86_FEATURE_INTEL_HFI		(14*32+19) /* Hardware Feedback Interface */
 
 /* AMD SVM Feature Identification, CPUID level 0x8000000a (EDX), word 15 */
 #define X86_FEATURE_NPT			(15*32+ 0) /* Nested Page Table support */
diff --git a/arch/x86/include/asm/hfi.h b/arch/x86/include/asm/hfi.h
new file mode 100644
index 000000000000..3c76aac72741
--- /dev/null
+++ b/arch/x86/include/asm/hfi.h
@@ -0,0 +1,27 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef _ASM_X86_INTEL_HFI_H
+#define _ASM_X86_INTEL_HFI_H
+
+/* Hardware Feedback Interface Enumeration */
+#define CPUID_HFI_LEAF			6
+#define CPUID_HFI_CAP_MASK		0xff
+#define CPUID_HFI_TABLE_SIZE_MASK	0x0f00
+#define CPUID_HFI_TABLE_SIZE_SHIFT	8
+#define CPUID_HFI_CPU_INDEX_MASK	0xffff0000
+#define CPUID_HFI_CPU_INDEX_SHIFT	16
+
+/* Hardware Feedback Interface Pointer */
+#define HFI_PTR_VALID_BIT		BIT(0)
+#define HFI_PTR_ADDR_SHIFT		12
+
+/* Hardware Feedback Interface Configuration */
+#define HFI_CONFIG_ENABLE_BIT		BIT(0)
+
+/* Hardware Feedback Interface Capabilities */
+#define HFI_CAPABILITIES_MASK		0xff
+#define HFI_CAPABILITIES_NR		8
+#define HFI_CAPABILITIES_PERFORMANCE	BIT(0)
+#define HFI_CAPABILITIES_ENERGY_EFF	BIT(1)
+
+#endif /* _ASM_X86_INTEL_HFI_H */
diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index 546d6ecf0a35..614330508b33 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -683,12 +683,14 @@
 
 #define PACKAGE_THERM_STATUS_PROCHOT		(1 << 0)
 #define PACKAGE_THERM_STATUS_POWER_LIMIT	(1 << 10)
+#define PACKAGE_THERM_STATUS_HFI_UPDATED	(1 << 26)
 
 #define MSR_IA32_PACKAGE_THERM_INTERRUPT	0x000001b2
 
 #define PACKAGE_THERM_INT_HIGH_ENABLE		(1 << 0)
 #define PACKAGE_THERM_INT_LOW_ENABLE		(1 << 1)
 #define PACKAGE_THERM_INT_PLN_ENABLE		(1 << 24)
+#define PACKAGE_THERM_INT_HFI_ENABLE		(1 << 25)
 
 /* Thermal Thresholds Support */
 #define THERM_INT_THRESHOLD0_ENABLE    (1 << 15)
@@ -933,4 +935,8 @@
 #define MSR_VM_IGNNE                    0xc0010115
 #define MSR_VM_HSAVE_PA                 0xc0010117
 
+/* Hardware Feedback Interface */
+#define MSR_IA32_HW_FEEDBACK_PTR        0x17d0
+#define MSR_IA32_HW_FEEDBACK_CONFIG     0x17d1
+
 #endif /* _ASM_X86_MSR_INDEX_H */
diff --git a/arch/x86/platform/intel/Makefile b/arch/x86/platform/intel/Makefile
index dbee3b00f9d0..64a294717618 100644
--- a/arch/x86/platform/intel/Makefile
+++ b/arch/x86/platform/intel/Makefile
@@ -1,2 +1,3 @@
 # SPDX-License-Identifier: GPL-2.0-only
 obj-$(CONFIG_IOSF_MBI)			+= iosf_mbi.o
+obj-$(CONFIG_INTEL_HFI)		+= hfi.o
diff --git a/arch/x86/platform/intel/hfi.c b/arch/x86/platform/intel/hfi.c
new file mode 100644
index 000000000000..5542a92abba4
--- /dev/null
+++ b/arch/x86/platform/intel/hfi.c
@@ -0,0 +1,153 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Hardware Feedback Interface Driver
+ *
+ * Copyright (c) 2021, Intel Corporation.
+ *
+ * Authors: Aubrey Li <aubrey.li@linux.intel.com>
+ *          Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
+ *
+ *
+ * The Hardware Feedback Interface provides a performance and energy efficiency
+ * capability rating fo each logical processor in the system. Hardware
+ * continuously updates these ratings depending on the operating conditions
+ * of the system (e.g., power limits, thermal constraints, etc). This file
+ * provides functionality to use the HFI to update the capacities of CPUs as
+ * seen by the scheduler.
+ */
+
+#define pr_fmt(fmt)  "intel-hfi: " fmt
+
+#include <linux/io.h>
+#include <linux/gfp.h>
+
+#include <asm/hfi.h>
+
+#define THERM_STATUS_CLEAR_PKG_MASK (BIT(1) | BIT(3) | BIT(5) | BIT(7) | \
+				     BIT(9) | BIT(11) | BIT(26))
+
+/**
+ * struct hfi_cpu_data - Capabilities of a logical processor in the HFI table.
+ *			 These capabilities are unitless.
+ * @perf_cap:		Performance capability
+ * @ee_cap:		Energy efficiency capability
+ */
+struct hfi_cpu_data {
+	u8	perf_cap;
+	u8	ee_cap;
+} __packed;
+
+/**
+ * struct hfi_hdr - Header of the HFI table. Indicates if hardware updated
+ *		    data in the table.
+ * @perf_updated:	Hardware updated performance capabilities
+ * @ee_updated:		Hardware updated energy efficiency capabilities
+ */
+struct hfi_hdr {
+	u8 perf_updated;
+	u8 ee_updated;
+} __packed;
+
+/**
+ * struct hfi_params - Parameters needed to parse and navigate the HFI table
+ * @ts_counter:		Time stamp of the last update of the table
+ * @hdr:		Base address of the table header
+ * @data:		Base address of the table data
+ * @cpu_stride:		Stride size to locate capability data of a logical
+ *			processor within the table
+ */
+struct hfi_params {
+	u64		*ts_counter;
+	void		*hdr;
+	void		*data;
+	unsigned int	cpu_stride;
+};
+
+static struct hfi_params hfi_params;
+
+/*
+ * The format of the HFI table depends on the number of capabilities that the
+ * hardware supports. Keep a data structure to navigate the table.
+ */
+static void __init init_hfi_params(void *table_base, unsigned long capabilities)
+{
+	int nr_capabilities;
+	unsigned int size;
+
+	/*
+	 * The number of supported capabilities determines the number of
+	 * columns in the HFI table.
+	 */
+	nr_capabilities = bitmap_weight(&capabilities, HFI_CAPABILITIES_NR);
+
+	/* The HFI time-stamp is located at the base of the table. */
+	hfi_params.ts_counter = table_base;
+
+	/* The HFI header is below the time-stamp. */
+	hfi_params.hdr = table_base + sizeof(*hfi_params.ts_counter);
+
+	/*
+	 * The header contains change indications for each supported feature.
+	 * The size of the table header is rounded up to be a multiple of 8
+	 * bytes.
+	 */
+	size = DIV_ROUND_UP(nr_capabilities, 8) * 8;
+
+	/* The HFI data starts below the header. */
+	hfi_params.data = hfi_params.hdr + size;
+
+	/*
+	 * Data of each logical processor is also rounded up to be a multiple
+	 * of 8 bytes.
+	 */
+	hfi_params.cpu_stride = DIV_ROUND_UP(nr_capabilities, 8) * 8;
+}
+
+static void __init intel_hfi_init(void)
+{
+	unsigned int reg, table_pages;
+	unsigned long capabilities;
+	phys_addr_t table_base_pa;
+	void *table_base;
+	u64 msr_val;
+
+	if (!boot_cpu_has(X86_FEATURE_INTEL_HFI))
+		return;
+
+	/*
+	 * At this point we know that CPUID_HFI_LEAF exists since
+	 * X86_FEATURE_INTEL_HFI was detected. Parse the supported capabilities,
+	 * and the size of the HFI table.
+	 */
+	reg = cpuid_edx(CPUID_HFI_LEAF);
+
+	capabilities = reg & HFI_CAPABILITIES_MASK;
+	if (!(capabilities & HFI_CAPABILITIES_PERFORMANCE)) {
+		pr_err("Performance reporting not supported! Not using HFI\n");
+		return;
+	}
+
+	/* The number of 4KB pages required by the table */
+	table_pages = ((reg & CPUID_HFI_TABLE_SIZE_MASK) >>
+		       CPUID_HFI_TABLE_SIZE_SHIFT) + 1;
+
+	/*
+	 * Hardware needs to be programmed with the physical address of the
+	 * first page frame of the table. Hence, the allocated memory must be
+	 * page-aligned.
+	 */
+	table_base = alloc_pages_exact(table_pages, GFP_KERNEL | __GFP_ZERO);
+	if (!table_base) {
+		pr_err("Unable to allocate pages for table\n");
+		return;
+	}
+
+	table_base_pa = virt_to_phys(table_base);
+
+	/* Program address of the feedback table. */
+	msr_val = table_base_pa | HFI_PTR_VALID_BIT;
+	wrmsrl(MSR_IA32_HW_FEEDBACK_PTR, msr_val);
+
+	init_hfi_params(table_base, capabilities);
+}
+device_initcall(intel_hfi_init);
-- 
2.27.0

