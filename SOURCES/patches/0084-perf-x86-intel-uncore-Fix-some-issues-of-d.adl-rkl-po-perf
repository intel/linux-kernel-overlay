From 35c2c468576bdff1030cd2b28dfd8db297ba78a8 Mon Sep 17 00:00:00 2001
From: Kan Liang <kan.liang@linux.intel.com>
Date: Thu, 11 Mar 2021 15:05:37 -0800
Subject: [PATCH 84/88] perf/x86/intel/uncore: Fix some issues of discovery
 table

Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
---
 arch/x86/events/intel/uncore.c           |  4 +++-
 arch/x86/events/intel/uncore_discovery.c | 15 ++++++++++++---
 arch/x86/events/intel/uncore_discovery.h |  4 ++--
 3 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/arch/x86/events/intel/uncore.c b/arch/x86/events/intel/uncore.c
index c0b5c62c0129..2566ecd04fb7 100644
--- a/arch/x86/events/intel/uncore.c
+++ b/arch/x86/events/intel/uncore.c
@@ -1851,7 +1851,7 @@ static int __init intel_uncore_init(void)
 		mret = uncore_mmio_init();
 	}
 
-	intel_uncore_clear_discovery_tables();
+//	intel_uncore_clear_discovery_tables();
 
 	if (cret && pret && mret)
 		return -ENODEV;
@@ -1869,6 +1869,7 @@ static int __init intel_uncore_init(void)
 	uncore_types_exit(uncore_msr_uncores);
 	uncore_types_exit(uncore_mmio_uncores);
 	uncore_pci_exit();
+	intel_uncore_clear_discovery_tables();
 	return ret;
 }
 module_init(intel_uncore_init);
@@ -1879,5 +1880,6 @@ static void __exit intel_uncore_exit(void)
 	uncore_types_exit(uncore_msr_uncores);
 	uncore_types_exit(uncore_mmio_uncores);
 	uncore_pci_exit();
+	intel_uncore_clear_discovery_tables();
 }
 module_exit(intel_uncore_exit);
diff --git a/arch/x86/events/intel/uncore_discovery.c b/arch/x86/events/intel/uncore_discovery.c
index f2c1ec595f79..f3429dc09d70 100644
--- a/arch/x86/events/intel/uncore_discovery.c
+++ b/arch/x86/events/intel/uncore_discovery.c
@@ -212,6 +212,7 @@ static int parse_discovery_table(struct pci_dev *dev, int die,
 	struct uncore_global_discovery global;
 	struct uncore_unit_discovery unit;
 	void __iomem *io_addr;
+	resource_size_t addr;
 	u32 val;
 	int i;
 
@@ -219,8 +220,9 @@ static int parse_discovery_table(struct pci_dev *dev, int die,
 
 	if (val & UNCORE_DISCOVERY_MASK)
 		return -EINVAL;
-	io_addr = ioremap((resource_size_t)(val & ~UNCORE_DISCOVERY_MASK),
-			  UNCORE_DISCOVERY_MAP_SIZE);
+
+	addr = (resource_size_t)(val & ~UNCORE_DISCOVERY_MASK);
+	io_addr = ioremap(addr, UNCORE_DISCOVERY_GLOBAL_MAP_SIZE);
 	if (!io_addr)
 		return -ENOMEM;
 
@@ -232,10 +234,16 @@ static int parse_discovery_table(struct pci_dev *dev, int die,
 		iounmap(io_addr);
 		return -EINVAL;
 	}
+	iounmap(io_addr);
+
+	addr += UNCORE_DISCOVERY_GLOBAL_MAP_SIZE;
+	io_addr = ioremap(addr, global.max_units * global.stride * 8);
+	if (!io_addr)
+		return -ENOMEM;
 
 	/* Parsing Unit Discovery State */
 	for (i = 0; i < global.max_units; i++) {
-		memcpy_fromio(&unit, io_addr + (i + 1) * (global.stride * 8),
+		memcpy_fromio(&unit, io_addr + i * (global.stride * 8),
 			      sizeof(struct uncore_unit_discovery));
 
 		if (uncore_discovery_invalid_unit(unit))
@@ -553,6 +561,7 @@ static bool uncore_update_uncore_type(enum uncore_access_type type_id,
 		uncore->box_ctl = (unsigned int)type->box_ctrl;
 		uncore->box_ctls = type->box_ctrl_die;
 		uncore->mmio_offsets = type->box_offset;
+		uncore->mmio_map_size = UNCORE_GENERIC_MMIO_SIZE;
 		break;
 	default:
 		return false;
diff --git a/arch/x86/events/intel/uncore_discovery.h b/arch/x86/events/intel/uncore_discovery.h
index e78bf72e1730..84105b97868d 100644
--- a/arch/x86/events/intel/uncore_discovery.h
+++ b/arch/x86/events/intel/uncore_discovery.h
@@ -20,8 +20,8 @@
 #define UNCORE_DISCOVERY_BIR_STEP		0x4
 /* Mask of the discovery table offset */
 #define UNCORE_DISCOVERY_MASK			0xf
-/* Discovery table size */
-#define UNCORE_DISCOVERY_MAP_SIZE		0x40000
+/* Global discovery table size */
+#define UNCORE_DISCOVERY_GLOBAL_MAP_SIZE	0x20
 
 #define UNCORE_DISCOVERY_PCI_DOMAIN(data)	((data >> 28) & 0x7)
 #define UNCORE_DISCOVERY_PCI_BUS(data)		((data >> 20) & 0xff)
-- 
2.27.0

