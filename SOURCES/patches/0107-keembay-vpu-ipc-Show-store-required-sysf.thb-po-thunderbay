From 2fcc5758c74b51f28473d6857de6fd79ea82f915 Mon Sep 17 00:00:00 2001
From: Paul Murphy <paul.j.murphy@intel.com>
Date: Fri, 1 May 2020 18:57:24 +0100
Subject: [PATCH 107/223] keembay-vpu-ipc: Show/store required sysfs entries

Signed-off-by: Paul Murphy <paul.j.murphy@intel.com>
---
 drivers/firmware/keembay-vpu-ipc.c | 34 ++++++++++++++++++++++++------
 1 file changed, 28 insertions(+), 6 deletions(-)

diff --git a/drivers/firmware/keembay-vpu-ipc.c b/drivers/firmware/keembay-vpu-ipc.c
index 068bdbdb99b0..2cad659e3349 100644
--- a/drivers/firmware/keembay-vpu-ipc.c
+++ b/drivers/firmware/keembay-vpu-ipc.c
@@ -230,6 +230,9 @@ static struct vpu_ipc_dev *to_vpu_dev(struct device *dev);
 
 static struct kobject *vpu_ipc_kobj;
 
+static u64 device_id;
+static u64 feature_exclusion;
+
 /**
  * vpu_ipc_handle_event() - Handle events and optionally update state
  *
@@ -1471,18 +1474,37 @@ int intel_keembay_vpu_wait_for_ready(struct device *dev, u32 timeout)
 }
 EXPORT_SYMBOL(intel_keembay_vpu_wait_for_ready);
 
+static inline ssize_t show_attr_u64(char *buf, u64 val)
+{
+	return sprintf(buf, "0x%llx\n", val);
+}
+
+static inline ssize_t store_attr_u64(const char *buf, size_t n, u64 *dest)
+{
+	int rc;
+	u64 input;
+
+	rc = kstrtou64(buf, 0, &input);
+	if (rc)
+		return rc;
+
+	*dest = input;
+
+	return n;
+}
+
 static ssize_t device_id_show(struct device *dev,
 		struct device_attribute *attr,
 		char *buf)
 {
-	return 0;
+	return show_attr_u64(buf, device_id);
 }
 
 static ssize_t device_id_store(struct device *dev,
 		struct device_attribute *attr,
 		const char *buf, size_t n)
 {
-	return 0;
+	return store_attr_u64(buf, n, &device_id);
 }
 static DEVICE_ATTR_RW(device_id);
 
@@ -1490,14 +1512,14 @@ static ssize_t feature_exclusion_show(struct device *dev,
 		struct device_attribute *attr,
 		char *buf)
 {
-	return 0;
+	return show_attr_u64(buf, feature_exclusion);
 }
 
 static ssize_t feature_exclusion_store(struct device *dev,
-		struct device_attribute *attr,
-		const char *buf, size_t n)
+	struct device_attribute *attr,
+	const char *buf, size_t n)
 {
-	return 0;
+	return store_attr_u64(buf, n, &feature_exclusion);
 }
 static DEVICE_ATTR_RW(feature_exclusion);
 
-- 
2.27.0

