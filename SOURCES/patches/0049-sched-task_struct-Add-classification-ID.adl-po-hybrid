From bf6a7d1d564efde50ebd207d1d62123dde4212e2 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Mon, 5 Oct 2020 04:41:59 -0700
Subject: [PATCH 49/68] sched/task_struct: Add classification ID

There exist hardware capable of statistically identifying special classes
tasks (e.g., tasks executing certain specific groups of instructions).
Such information can be used to implove task placement. Since such
classification has per-task granularity, add a new member to task_struct.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/kernel/process.c | 2 ++
 include/linux/sched.h     | 4 ++++
 2 files changed, 6 insertions(+)

diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
index 9c214d7085a4..d7f943cad1f7 100644
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@ -177,6 +177,8 @@ int copy_thread(unsigned long clone_flags, unsigned long sp, unsigned long arg,
 	task_user_gs(p) = get_user_gs(current_pt_regs());
 #endif
 
+	p->classid = TASK_CLASS_UNCLASSIFIED;
+
 	/* Set a new TLS for the child thread? */
 	if (clone_flags & CLONE_SETTLS)
 		ret = set_new_tls(p, tls);
diff --git a/include/linux/sched.h b/include/linux/sched.h
index ef00bb22164c..43184ed18c90 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -113,6 +113,8 @@ struct task_group;
 					 __TASK_TRACED | EXIT_DEAD | EXIT_ZOMBIE | \
 					 TASK_PARKED)
 
+#define TASK_CLASS_UNCLASSIFIED		-1
+
 #define task_is_traced(task)		((task->state & __TASK_TRACED) != 0)
 
 #define task_is_stopped(task)		((task->state & __TASK_STOPPED) != 0)
@@ -848,6 +850,8 @@ struct task_struct {
 
 	pid_t				pid;
 	pid_t				tgid;
+	/* Type of task */
+	int				classid;
 
 #ifdef CONFIG_STACKPROTECTOR
 	/* Canary value for the -fstack-protector GCC feature: */
-- 
2.27.0

