From 929d4a8e6c3062dff49b19456e7d86f869cb1d01 Mon Sep 17 00:00:00 2001
From: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
Date: Tue, 3 Dec 2019 18:03:50 +0000
Subject: [PATCH 086/223] keembay-vpu-ipc: Add temporary support for
 single-slice xLink

The current version of xLink does not support multiple slices, so it
won't be able to pass a VPU device reference to the VPU driver API.

So, for now, we allow it to pass a NULL pointer; when that happen, we
use the VPU device from slice 0.

Signed-off-by: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
---
 drivers/firmware/keembay-vpu-ipc.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/drivers/firmware/keembay-vpu-ipc.c b/drivers/firmware/keembay-vpu-ipc.c
index ce1134fd39c1..5caeecdbad89 100644
--- a/drivers/firmware/keembay-vpu-ipc.c
+++ b/drivers/firmware/keembay-vpu-ipc.c
@@ -230,6 +230,8 @@ enum keembay_vpu_event {
 
 static struct vpu_ipc_dev *to_vpu_dev(struct device *dev);
 
+static struct vpu_ipc_dev *vpu0_dev;
+
 /**
  * vpu_ipc_handle_event() - Handle events and optionally update state
  *
@@ -1561,6 +1563,19 @@ static int keembay_vpu_ipc_probe(struct platform_device *pdev)
 	/* Set platform data reference. */
 	platform_set_drvdata(pdev, vpu_dev);
 
+	/*
+	 * To avoid xLink without multi-slice support to fail, we keep track of
+	 * VPU with ID 0 for now.
+	 * TODO: remove this once xLink is supported.
+	 */
+	if (vpu_dev->vpu_id == 0) {
+		if (vpu0_dev) {
+			dev_err(dev, "VPU device with ID 0 already probed\n");
+			goto probe_fail_post_resmem_setup;
+		}
+		vpu0_dev = vpu_dev;
+	}
+
 	return 0;
 
 probe_fail_post_resmem_setup:
@@ -1574,6 +1589,9 @@ static int keembay_vpu_ipc_remove(struct platform_device *pdev)
 	struct vpu_ipc_dev *vpu_dev = platform_get_drvdata(pdev);
 	struct device *dev = &pdev->dev;
 
+	if (vpu_dev->vpu_id == 0)
+		vpu0_dev = NULL;
+
 	if (vpu_dev->ready_message_task) {
 		kthread_stop(vpu_dev->ready_message_task);
 		vpu_dev->ready_message_task = NULL;
@@ -1612,6 +1630,14 @@ static struct vpu_ipc_dev *to_vpu_dev(struct device *dev)
 {
 	struct platform_device *pdev;
 
+	/*
+	 * For temporary compatibility with xLink, if dev is NULL, we return
+	 * the VPU with ID 0.
+	 * TODO: remove this once xLink is updated.
+	 */
+	if (!dev && vpu0_dev)
+		return vpu0_dev;
+
 	if (!dev || dev->driver != &keem_bay_vpu_ipc_driver.driver)
 		return ERR_PTR(-EINVAL);
 	pdev = to_platform_device(dev);
-- 
2.27.0

