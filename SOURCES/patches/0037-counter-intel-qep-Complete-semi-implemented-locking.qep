From a7cc258506dd13b6158696324a41475069f711ef Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Mon, 11 Jan 2021 17:08:04 +0200
Subject: [PATCH 37/81] counter: intel-qep: Complete semi-implemented locking

Driver has a mutex, initialized but used only intel_qep_irq_thread()
leaving a lot of QEPCON register read, modify, write cases unprotected.
Add locking to those cases.

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 drivers/counter/intel-qep.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/drivers/counter/intel-qep.c b/drivers/counter/intel-qep.c
index e002da4b1224..d339b79f1a9e 100644
--- a/drivers/counter/intel-qep.c
+++ b/drivers/counter/intel-qep.c
@@ -124,6 +124,7 @@ static void intel_qep_init(struct intel_qep *qep, bool reset)
 {
 	u32 reg;
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 	reg &= ~INTEL_QEPCON_EN;
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
@@ -141,6 +142,7 @@ static void intel_qep_init(struct intel_qep *qep, bool reset)
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
 
 	intel_qep_writel(qep, INTEL_QEPINT_MASK, INTEL_QEPINT_MASK_DEFAULT);
+	mutex_unlock(&qep->lock);
 }
 
 static irqreturn_t intel_qep_irq_thread(int irq, void *_qep)
@@ -258,12 +260,14 @@ static int intel_qep_function_set(struct counter_device *counter,
 
 	pm_runtime_get_sync(qep->dev);
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 	if (function == INTEL_QEP_ENCODER_MODE_SWAPPED)
 		reg |= INTEL_QEPCON_SWPAB;
 	else
 		reg &= ~INTEL_QEPCON_SWPAB;
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
+	mutex_unlock(&qep->lock);
 
 	pm_runtime_put(qep->dev);
 
@@ -297,6 +301,7 @@ static int intel_qep_action_set(struct counter_device *counter,
 
 	pm_runtime_get_sync(qep->dev);
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 
 	if (action == INTEL_QEP_SYNAPSE_ACTION_RISING_EDGE)
@@ -305,6 +310,7 @@ static int intel_qep_action_set(struct counter_device *counter,
 		reg &= ~synapse->signal->id;
 
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
+	mutex_unlock(&qep->lock);
 
 	pm_runtime_put(qep->dev);
 
@@ -413,15 +419,19 @@ static ssize_t enable_write(struct counter_device *counter,
 	if (val && !qep->enabled) {
 		pm_runtime_get_sync(qep->dev);
 
+		mutex_lock(&qep->lock);
 		reg = intel_qep_readl(qep, INTEL_QEPCON);
 		reg |= INTEL_QEPCON_EN;
 		intel_qep_writel(qep, INTEL_QEPCON, reg);
 		qep->enabled = true;
+		mutex_unlock(&qep->lock);
 	} else if (!val && qep->enabled) {
+		mutex_lock(&qep->lock);
 		reg = intel_qep_readl(qep, INTEL_QEPCON);
 		reg &= ~INTEL_QEPCON_EN;
 		intel_qep_writel(qep, INTEL_QEPCON, reg);
 		qep->enabled = false;
+		mutex_unlock(&qep->lock);
 
 		pm_runtime_mark_last_busy(qep->dev);
 		pm_runtime_put_autosuspend(qep->dev);
@@ -462,6 +472,7 @@ static ssize_t operating_mode_write(struct counter_device *counter,
 
 	pm_runtime_get_sync(qep->dev);
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 
 	if (sysfs_streq(buf, "capture")) {
@@ -473,6 +484,7 @@ static ssize_t operating_mode_write(struct counter_device *counter,
 	}
 
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
+	mutex_unlock(&qep->lock);
 
 	pm_runtime_put(qep->dev);
 
@@ -513,6 +525,7 @@ static ssize_t capture_mode_write(struct counter_device *counter,
 
 	pm_runtime_get_sync(qep->dev);
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 
 	if (sysfs_streq(buf, "both")) {
@@ -524,6 +537,7 @@ static ssize_t capture_mode_write(struct counter_device *counter,
 	}
 
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
+	mutex_unlock(&qep->lock);
 
 	pm_runtime_put(qep->dev);
 
@@ -585,6 +599,7 @@ static ssize_t noise_write(struct counter_device *counter,
 	if (max > 0x1fffff)
 		max = 0x1ffff;
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 
 	if (max == 0) {
@@ -595,6 +610,7 @@ static ssize_t noise_write(struct counter_device *counter,
 	}
 
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
+	mutex_unlock(&qep->lock);
 
 	pm_runtime_put(qep->dev);
 
@@ -632,6 +648,7 @@ static ssize_t preset_enable_write(struct counter_device *counter,
 
 	pm_runtime_get_sync(qep->dev);
 
+	mutex_lock(&qep->lock);
 	reg = intel_qep_readl(qep, INTEL_QEPCON);
 
 	if (val)
@@ -640,6 +657,7 @@ static ssize_t preset_enable_write(struct counter_device *counter,
 		reg |= INTEL_QEPCON_COUNT_RST_MODE;
 
 	intel_qep_writel(qep, INTEL_QEPCON, reg);
+	mutex_unlock(&qep->lock);
 
 	pm_runtime_put(qep->dev);
 
-- 
2.27.0

