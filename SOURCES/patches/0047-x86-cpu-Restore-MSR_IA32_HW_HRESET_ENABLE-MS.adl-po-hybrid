From 072a4967957c8f41e421cf5820c57b9317c7dff0 Mon Sep 17 00:00:00 2001
From: Chen Yu <yu.c.chen@intel.com>
Date: Sat, 13 Mar 2021 00:29:23 +0800
Subject: [PATCH 47/68] x86/cpu: Restore MSR_IA32_HW_HRESET_ENABLE MSR on BSP
 during wakeup

The value of MSR_IA32_HW_HRESET_ENABLE is lost when suspending. Given that
HRESET is executed when switching to kernel mode and viceversa, a general
protection fault occurs when HRESET is executed for the first time after
waking up. Thus, restore such MSR when waking up. There is no need to
restore this MSR for APs because it will be restored during CPU hotplug
online.

[Ricardo edited the commit message for clarity.]

Reported-by: Wendy Wang <wendy.wang@intel.com>
Co-developed-by: Archana Patni <archana.patni@intel.com>
Signed-off-by: Chen Yu <yu.c.chen@intel.com>
Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/include/asm/suspend.h | 1 +
 arch/x86/kernel/cpu/common.c   | 6 ++++++
 arch/x86/power/cpu.c           | 1 +
 3 files changed, 8 insertions(+)

diff --git a/arch/x86/include/asm/suspend.h b/arch/x86/include/asm/suspend.h
index a892494ca5e4..ae44bd9f500a 100644
--- a/arch/x86/include/asm/suspend.h
+++ b/arch/x86/include/asm/suspend.h
@@ -12,3 +12,4 @@ extern unsigned long relocated_restore_code __visible;
 extern int relocate_restore_code(void);
 /* Defined in hibernate_asm_32/64.S */
 extern asmlinkage __visible int restore_image(void);
+extern void hreset_reload(void);
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index e163f79d2c47..eb9e9dfeec49 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -363,6 +363,12 @@ static __always_inline void setup_hreset(struct cpuinfo_x86 *c)
 	pr_info_once("x86/cpu: Intel History Reset (HRESET) activated\n");
 }
 
+void hreset_reload(void)
+{
+	if (hreset_features)
+		wrmsrl(MSR_IA32_HW_HRESET_ENABLE, hreset_features);
+}
+
 /* These bits should not change their value after CPU init is finished. */
 static const unsigned long cr4_pinned_mask =
 	X86_CR4_SMEP | X86_CR4_SMAP | X86_CR4_UMIP | X86_CR4_FSGSBASE;
diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c
index db1378c6ff26..ebe5d8aaa9f6 100644
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@ -263,6 +263,7 @@ static void notrace __restore_processor_state(struct saved_context *ctxt)
 	tsc_verify_tsc_adjust(true);
 	x86_platform.restore_sched_clock_state();
 	mtrr_bp_restore();
+	hreset_reload();
 	perf_restore_debug_store();
 	msr_restore_context(ctxt);
 
-- 
2.27.0

