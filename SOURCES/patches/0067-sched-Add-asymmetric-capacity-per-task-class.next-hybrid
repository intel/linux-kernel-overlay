From 1604b6dc7a245dafec7650b17f1947ac6a291788 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Sun, 1 Nov 2020 13:48:44 -0800
Subject: [PATCH 67/76] sched: Add asymmetric capacity per task class

On asymmetric computer topologies, performance differences are not
only among CPUs but also among types of tasks. That is, a task of
type A may have a bigger bost of performance by running on a the
same CPU as a task of type B.

Add infrastructure to detect and enable such asymmetric capacity.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 include/linux/sched/topology.h |  8 ++++++++
 kernel/sched/sched.h           |  1 +
 kernel/sched/topology.c        | 10 ++++++++--
 3 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/include/linux/sched/topology.h b/include/linux/sched/topology.h
index b3b796e3abdf..55a2c441eb7d 100644
--- a/include/linux/sched/topology.h
+++ b/include/linux/sched/topology.h
@@ -282,6 +282,14 @@ bool arch_has_hw_sched_feedback(void)
 }
 #endif
 
+#ifndef arch_capacity_max_classes
+static __always_inline
+unsigned int arch_capacity_max_classes(void)
+{
+	return 1;
+}
+#endif
+
 static inline int task_node(const struct task_struct *p)
 {
 	return cpu_to_node(task_cpu(p));
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index cd38bb67e67b..e25bd075d0d0 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -1497,6 +1497,7 @@ DECLARE_PER_CPU(struct sched_domain __rcu *, sd_numa);
 DECLARE_PER_CPU(struct sched_domain __rcu *, sd_asym_packing);
 DECLARE_PER_CPU(struct sched_domain __rcu *, sd_asym_cpucapacity);
 extern struct static_key_false sched_asym_cpucapacity;
+DECLARE_STATIC_KEY_FALSE(sched_asym_classcpucapacity);
 
 struct sched_group_capacity {
 	atomic_t		ref;
diff --git a/kernel/sched/topology.c b/kernel/sched/topology.c
index 403e612edc16..fe72fcd92382 100644
--- a/kernel/sched/topology.c
+++ b/kernel/sched/topology.c
@@ -652,6 +652,7 @@ DEFINE_PER_CPU(struct sched_domain __rcu *, sd_numa);
 DEFINE_PER_CPU(struct sched_domain __rcu *, sd_asym_packing);
 DEFINE_PER_CPU(struct sched_domain __rcu *, sd_asym_cpucapacity);
 DEFINE_STATIC_KEY_FALSE(sched_asym_cpucapacity);
+DEFINE_STATIC_KEY_FALSE(sched_asym_classcpucapacity);
 
 static void update_top_cache_domain(int cpu)
 {
@@ -2151,8 +2152,11 @@ build_sched_domains(const struct cpumask *cpu_map, struct sched_domain_attr *att
 	}
 	rcu_read_unlock();
 
-	if (has_asym)
+	if (has_asym) {
 		static_branch_inc_cpuslocked(&sched_asym_cpucapacity);
+		if (arch_capacity_max_classes() > 1)
+			static_branch_enable_cpuslocked(&sched_asym_classcpucapacity);
+	}
 
 	if (rq && sched_debug_verbose) {
 		pr_info("root domain span: %*pbl (max cpu_capacity = %lu)\n",
@@ -2249,8 +2253,10 @@ static void detach_destroy_domains(const struct cpumask *cpu_map)
 	unsigned int cpu = cpumask_any(cpu_map);
 	int i;
 
-	if (rcu_access_pointer(per_cpu(sd_asym_cpucapacity, cpu)))
+	if (rcu_access_pointer(per_cpu(sd_asym_cpucapacity, cpu))) {
 		static_branch_dec_cpuslocked(&sched_asym_cpucapacity);
+		static_branch_disable_cpuslocked(&sched_asym_classcpucapacity);
+	}
 
 	rcu_read_lock();
 	for_each_cpu(i, cpu_map)
-- 
2.27.0

