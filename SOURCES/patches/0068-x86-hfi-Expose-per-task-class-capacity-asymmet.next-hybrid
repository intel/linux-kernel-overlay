From e9fd0ef08c191c82bb0b586fd152df2e116db920 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Sun, 1 Nov 2020 14:04:18 -0800
Subject: [PATCH 68/76] x86/hfi: Expose per-task-class capacity asymmetry

Popolate the scheduler interfaces to enable per-task-class
asymmetric capacity.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/include/asm/hfi.h        | 2 ++
 arch/x86/include/asm/topology.h   | 1 +
 drivers/thermal/intel/intel_hfi.c | 5 +++++
 3 files changed, 8 insertions(+)

diff --git a/arch/x86/include/asm/hfi.h b/arch/x86/include/asm/hfi.h
index b6418aaed072..c126454ac205 100644
--- a/arch/x86/include/asm/hfi.h
+++ b/arch/x86/include/asm/hfi.h
@@ -40,12 +40,14 @@ int disable_hfi(unsigned int cpu);
 void intel_hfi_check_event(__u64 pkg_therm_status_msr_val);
 unsigned long hfi_scale_cpu_capacity(int cpu);
 bool hfi_has_hw_sched_feedback(void);
+unsigned int hfi_capacity_max_classes(void);
 #else
 static inline void intel_hfi_init(void) { }
 static inline int enable_hfi(unsigned int cpu) { return 0; }
 static inline int disable_hfi(unsigned int cpu) { return 0; }
 static inline void intel_hfi_check_event(__u64 pkg_therm_status_msr_val) { }
 static inline bool hfi_has_hw_sched_feedback(void) { return false; }
+static inline unsigned int hfi_capacity_max_classes(void) { return 1; }
 #endif
 
 #else /* __ASSEMBLY__ */
diff --git a/arch/x86/include/asm/topology.h b/arch/x86/include/asm/topology.h
index 9f8f44ca444c..1c6ebd7988dc 100644
--- a/arch/x86/include/asm/topology.h
+++ b/arch/x86/include/asm/topology.h
@@ -233,6 +233,7 @@ void init_freq_invariance_cppc(void);
 #ifdef CONFIG_INTEL_HFI
 #define arch_scale_cpu_capacity hfi_scale_cpu_capacity
 #define arch_has_hw_sched_feedback hfi_has_hw_sched_feedback
+#define arch_capacity_max_classes hfi_capacity_max_classes
 #endif
 
 #endif /* _ASM_X86_TOPOLOGY_H */
diff --git a/drivers/thermal/intel/intel_hfi.c b/drivers/thermal/intel/intel_hfi.c
index 20f3db399cc4..408adbfc861f 100644
--- a/drivers/thermal/intel/intel_hfi.c
+++ b/drivers/thermal/intel/intel_hfi.c
@@ -296,6 +296,11 @@ bool hfi_has_hw_sched_feedback(void)
 	return boot_cpu_has(X86_FEATURE_INTEL_HFI);
 }
 
+unsigned int hfi_capacity_max_classes(void)
+{
+	return hfi_features.nr_classes;
+}
+
 unsigned long hfi_scale_cpu_capacity(int cpu)
 {
 	return per_cpu(cpu_scale, cpu);
-- 
2.27.0

