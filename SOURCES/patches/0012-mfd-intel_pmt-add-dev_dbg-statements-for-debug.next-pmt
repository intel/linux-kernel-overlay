From e62f0cfebd09ef5dc2896ca3832764d33daefa8c Mon Sep 17 00:00:00 2001
From: "David E. Box" <david.e.box@linux.intel.com>
Date: Mon, 3 Aug 2020 21:47:01 -0700
Subject: [PATCH 12/16] mfd: intel_pmt: add dev_dbg statements for debug

---
 drivers/mfd/intel_pmt.c | 28 +++++++++++++++++++++++++++-
 1 file changed, 27 insertions(+), 1 deletion(-)

diff --git a/drivers/mfd/intel_pmt.c b/drivers/mfd/intel_pmt.c
index e1f4dd0ea98e..12ca767e3292 100644
--- a/drivers/mfd/intel_pmt.c
+++ b/drivers/mfd/intel_pmt.c
@@ -172,8 +172,13 @@ static int pmt_add_dev(struct pci_dev *pdev, struct intel_ext_header *header,
 	if (!res)
 		return -ENOMEM;
 
-	if (quirks & PMT_QUIRK_TABLE_SHIFT)
+	if (quirks & PMT_QUIRK_TABLE_SHIFT) {
+		dev_dbg(dev, "Table shift quirk applied\n");
 		header->offset >>= 3;
+		dev_dbg(&pdev->dev, "header disc offset = 0x%x\n", header->offset);
+	}
+
+	dev_dbg(dev, "Entry count: %d, size: %d\n", count, size);
 
 	/*
 	 * The PMT DVSEC contains the starting offset and count for a block of
@@ -186,6 +191,8 @@ static int pmt_add_dev(struct pci_dev *pdev, struct intel_ext_header *header,
 			     header->offset + i * (size << 2);
 		tmp->end = tmp->start + (size << 2) - 1;
 		tmp->flags = IORESOURCE_MEM;
+
+		dev_dbg(dev, "Entry %d, %pr", i, tmp);
 	}
 
 	cell->resources = res;
@@ -215,8 +222,15 @@ static int pmt_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (info && (info->quirks & PMT_QUIRK_NO_DVSEC)) {
 		struct intel_ext_header **header;
 
+		dev_dbg(&pdev->dev, "No DVSEC quirk, using hardcoded capabilities\n");
+
 		header = info->capabilities;
 		while (*header) {
+			dev_dbg(&pdev->dev, "header num_entries = %d\n", (*header)->num_entries);
+			dev_dbg(&pdev->dev, "header entry_size = %d\n", (*header)->entry_size);
+			dev_dbg(&pdev->dev, "header bar = %d\n", (*header)->tbir);
+			dev_dbg(&pdev->dev, "header disc offset = 0x%x\n", (*header)->offset);
+
 			ret = pmt_add_dev(pdev, *header, quirks);
 			if (ret)
 				dev_warn(&pdev->dev,
@@ -267,6 +281,12 @@ static int pmt_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 			header.tbir = INTEL_DVSEC_TABLE_BAR(table);
 			header.offset = INTEL_DVSEC_TABLE_OFFSET(table);
 
+			dev_dbg(&pdev->dev, "header id = %d\n", header.id);
+			dev_dbg(&pdev->dev, "header num_entries = %d\n", header.num_entries);
+			dev_dbg(&pdev->dev, "header entry_size = %d\n", header.entry_size);
+			dev_dbg(&pdev->dev, "header bar = %d\n", header.tbir);
+			dev_dbg(&pdev->dev, "header disc offset = 0x%x\n", header.offset);
+
 			ret = pmt_add_dev(pdev, &header, quirks);
 			if (ret)
 				continue;
@@ -309,6 +329,12 @@ static int pmt_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 			header.tbir = INTEL_DVSEC_TABLE_BAR(table);
 			header.offset = INTEL_DVSEC_TABLE_OFFSET(table);
 
+			dev_dbg(&pdev->dev, "header id = %d\n", header.id);
+			dev_dbg(&pdev->dev, "header num_entries = %d\n", header.num_entries);
+			dev_dbg(&pdev->dev, "header entry_size = %d\n", header.entry_size);
+			dev_dbg(&pdev->dev, "header bar = %d\n", header.tbir);
+			dev_dbg(&pdev->dev, "header disc offset = 0x%x\n", header.offset);
+
 			ret = pmt_add_dev(pdev, &header, quirks);
 			if (ret)
 				continue;
-- 
2.27.0

