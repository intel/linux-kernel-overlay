From fe7f25a13b116673e8e925288773490f82806f67 Mon Sep 17 00:00:00 2001
From: Jin Yao <yao.jin@linux.intel.com>
Date: Mon, 22 Feb 2021 09:15:03 -0800
Subject: [PATCH 54/88] perf stat: Filter out unmatched aggregation for hybrid
 event

perf-stat has supported some aggregation modes, such as --per-core,
--per-socket and etc. While for hybrid event, it may only available
on part of cpus. So for --per-core, we need to filter out the
unavailable cores, for --per-socket, filter out the unavailable
sockets, and so on.

Before:

  root@ssp-pwrt-002:~/0-jinyao/acme-adl-v2/tools/perf# ./perf stat --per-core -e cpu_core/cycles/ -a -- sleep 1

   Performance counter stats for 'system wide':

  S0-D0-C0           2      1,604,426,524      cpu_core/cycles/
  S0-D0-C4           2      1,604,408,224      cpu_core/cycles/
  S0-D0-C8           2      1,605,995,644      cpu_core/cycles/
  S0-D0-C12          2      1,628,056,554      cpu_core/cycles/
  S0-D0-C16          2      1,611,488,734      cpu_core/cycles/
  S0-D0-C20          2      1,616,314,761      cpu_core/cycles/
  S0-D0-C24          2      1,603,558,295      cpu_core/cycles/
  S0-D0-C28          2      1,603,541,128      cpu_core/cycles/
  S0-D0-C32          0      <not counted>      cpu_core/cycles/
  S0-D0-C33          0      <not counted>      cpu_core/cycles/
  S0-D0-C34          0      <not counted>      cpu_core/cycles/
  S0-D0-C35          0      <not counted>      cpu_core/cycles/
  S0-D0-C36          0      <not counted>      cpu_core/cycles/
  S0-D0-C37          0      <not counted>      cpu_core/cycles/
  S0-D0-C38          0      <not counted>      cpu_core/cycles/
  S0-D0-C39          0      <not counted>      cpu_core/cycles/

After:

  root@ssp-pwrt-002:~# ./perf stat --per-core -e cpu_core/cycles/ -a -- sleep 1

   Performance counter stats for 'system wide':

  S0-D0-C0           2      1,621,781,943      cpu_core/cycles/
  S0-D0-C4           2      1,621,755,088      cpu_core/cycles/
  S0-D0-C8           2      1,604,276,920      cpu_core/cycles/
  S0-D0-C12          2      1,603,446,963      cpu_core/cycles/
  S0-D0-C16          2      1,604,231,725      cpu_core/cycles/
  S0-D0-C20          2      1,603,435,286      cpu_core/cycles/
  S0-D0-C24          2      1,603,387,250      cpu_core/cycles/
  S0-D0-C28          2      1,604,173,183      cpu_core/cycles/

Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
---
 tools/perf/util/stat-display.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/tools/perf/util/stat-display.c b/tools/perf/util/stat-display.c
index ed37d8e7ea1a..2db7c36a03ad 100644
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@ -634,6 +634,20 @@ static void aggr_cb(struct perf_stat_config *config,
 	}
 }
 
+static bool aggr_id_hybrid_matched(struct perf_stat_config *config,
+				   struct evsel *counter, struct aggr_cpu_id id)
+{
+	struct aggr_cpu_id s;
+
+	for (int i = 0; i < evsel__nr_cpus(counter); i++) {
+		s = config->aggr_get_id(config, evsel__cpus(counter), i);
+		if (cpu_map__compare_aggr_cpu_id(s, id))
+			return true;
+	}
+
+	return false;
+}
+
 static void print_counter_aggrdata(struct perf_stat_config *config,
 				   struct evsel *counter, int s,
 				   char *prefix, bool metric_only,
@@ -647,6 +661,12 @@ static void print_counter_aggrdata(struct perf_stat_config *config,
 	double uval;
 
 	ad.id = id = config->aggr_map->map[s];
+
+	if (perf_pmu__hybrid_exist() &&
+	    !aggr_id_hybrid_matched(config, counter, id)) {
+		return;
+	}
+
 	ad.val = ad.ena = ad.run = 0;
 	ad.nr = 0;
 	if (!collect_data(config, counter, aggr_cb, &ad))
-- 
2.27.0

