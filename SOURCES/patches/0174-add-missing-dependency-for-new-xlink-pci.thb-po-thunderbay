From 9cb9f55fd91d1621f4870c2c3aa3f30d7e7d061b Mon Sep 17 00:00:00 2001
From: "Pan, Kris" <kris.pan@intel.com>
Date: Mon, 22 Feb 2021 12:31:57 +0800
Subject: [PATCH 174/223] add missing dependency for new xlink-pcie

Signed-off-by: Pan, Kris <kris.pan@intel.com>
---
 drivers/misc/xlink-pcie/local_host/epf.c  |  4 +-
 drivers/pci/controller/dwc/pcie-keembay.h | 77 +++++++++++++++++++++++
 2 files changed, 79 insertions(+), 2 deletions(-)
 create mode 100644 drivers/pci/controller/dwc/pcie-keembay.h

diff --git a/drivers/misc/xlink-pcie/local_host/epf.c b/drivers/misc/xlink-pcie/local_host/epf.c
index f4f89f1310b0..e8b3b57453a7 100644
--- a/drivers/misc/xlink-pcie/local_host/epf.c
+++ b/drivers/misc/xlink-pcie/local_host/epf.c
@@ -295,7 +295,7 @@ static int intel_xpcie_setup_bar(struct pci_epf *epf, enum pci_barno barno,
 
 	if (barno == 0) {
 		bar->phys_addr =
-			thunderbay->doorbell->start + (epf->func_no * 0x1000);
+			thunderbay->doorbell_base->start + (epf->func_no * 0x1000);
 		vaddr = ioremap(bar->phys_addr, size);
 	}
 
@@ -418,7 +418,7 @@ static void intel_xpcie_enable_multi_functions(struct pci_epf *epf)
 	xpcie_epf->irq_doorbell = thunderbay->irq_doorbell[epf->func_no];
 	xpcie_epf->irq_rdma = thunderbay->irq_rdma[epf->func_no];
 	xpcie_epf->irq_wdma = thunderbay->irq_wdma[epf->func_no];
-	xpcie_epf->apb_base = thunderbay->slv_apb_base;
+	xpcie_epf->apb_base = thunderbay->base;
 
 	switch (epf->func_no) {
 	case 0:
diff --git a/drivers/pci/controller/dwc/pcie-keembay.h b/drivers/pci/controller/dwc/pcie-keembay.h
new file mode 100644
index 000000000000..5cb8b120ca22
--- /dev/null
+++ b/drivers/pci/controller/dwc/pcie-keembay.h
@@ -0,0 +1,77 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * pcie-keembay - PCIe controller driver for Intel Keem Bay
+ *
+ * Copyright (C) 2019 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2, as published
+ * by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef _PCIE_KEEMBAY_H
+#define _PCIE_KEEMBAY_H
+
+#include <linux/clk.h>
+#include <linux/gpio/consumer.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/platform_device.h>
+
+#include "pcie-designware.h"
+
+#define KEEMBAY_PCIE_STEPPING_MAXLEN 8
+
+struct keembay_pcie {
+	struct dw_pcie		*pci;
+	void __iomem		*base;
+	enum dw_pcie_device_mode mode;
+	char			stepping[KEEMBAY_PCIE_STEPPING_MAXLEN];
+	int			irq;
+	int			ev_irq;
+	int			err_irq;
+	int			mem_access_irq;
+
+	struct clk		*clk_master;
+	struct clk		*clk_aux;
+	struct gpio_desc	*reset;
+};
+
+#define to_keembay_pcie(x)	dev_get_drvdata((x)->dev)
+
+struct thunderbay_pcie {
+	struct dw_pcie          *pci;
+	void __iomem            *base;
+	enum dw_pcie_device_mode mode;
+	struct resource         *doorbell_base;
+	struct resource         *doorbell_clear;
+	struct resource         *mmr2[8];
+	struct resource         *mmr4[8];
+	bool                    setup_bar[8];
+	int                     irq;
+	int                     irq_doorbell[8];
+	int                     irq_rdma[8];
+	int                     irq_wdma[8];
+
+	bool                    tbh_half;
+
+	void __iomem            *cpr_base;
+	struct dma_pool         *rc_dma_pool;
+	dma_addr_t              rc_dma_mem_pa;
+	void                    *rc_dma_mem_va;
+	struct dma_chan         *rd_dma_chan;
+	bool                    rc_dma;
+};
+
+#define to_thunderbay_pcie(x)				dev_get_drvdata((x)->dev)
+
+#endif /* _PCIE_KEEMBAY_H */
-- 
2.27.0

