From 284b14f674226130a3b986a044f571819ccabf19 Mon Sep 17 00:00:00 2001
From: kadarlax <raghuveerx.kadarla@intel.com>
Date: Thu, 18 Feb 2021 23:31:34 +0530
Subject: [PATCH 172/223] xlink-pcie: fix build and data path issues

Fixed issues related to build & data path validation.

Signed-off-by: kadarlax <raghuveerx.kadarla@intel.com>
---
 drivers/misc/xlink-pcie/common/util.c      |  2 +-
 drivers/misc/xlink-pcie/common/xpcie.h     |  2 +-
 drivers/misc/xlink-pcie/local_host/dma.c   |  9 +++-
 drivers/misc/xlink-pcie/local_host/epf.c   |  7 ++-
 drivers/misc/xlink-pcie/remote_host/boot.c | 56 +++++-----------------
 drivers/misc/xlink-pcie/remote_host/main.c |  3 +-
 drivers/misc/xlink-pcie/remote_host/pci.c  | 13 ++---
 7 files changed, 32 insertions(+), 60 deletions(-)

diff --git a/drivers/misc/xlink-pcie/common/util.c b/drivers/misc/xlink-pcie/common/util.c
index 51cb318e6bc9..f3c6bda2db64 100644
--- a/drivers/misc/xlink-pcie/common/util.c
+++ b/drivers/misc/xlink-pcie/common/util.c
@@ -162,7 +162,7 @@ void intel_xpcie_set_physical_device_id(struct xpcie *xpcie, u16 phys_id)
 
 u16 intel_xpcie_get_physical_device_id(struct xpcie *xpcie)
 {
-	return intel_xpcie_ioread8(xpcie->mmio + XPCIE_MMIO_PHY_DEV_ID);
+	return intel_xpcie_ioread16(xpcie->mmio + XPCIE_MMIO_PHY_DEV_ID);
 }
 #endif
 
diff --git a/drivers/misc/xlink-pcie/common/xpcie.h b/drivers/misc/xlink-pcie/common/xpcie.h
index d7f0773358ad..69dadde66175 100644
--- a/drivers/misc/xlink-pcie/common/xpcie.h
+++ b/drivers/misc/xlink-pcie/common/xpcie.h
@@ -63,7 +63,7 @@ struct xpcie_mmio {
 #endif
 	u8 reserved;
 	u32 cap_offset;
-} __packed __aligned(8);
+} __packed;
 
 #define XPCIE_MMIO_LEGACY_A0	(offsetof(struct xpcie_mmio, legacy_a0))
 #define XPCIE_MMIO_DEV_STATUS	(offsetof(struct xpcie_mmio, device_status))
diff --git a/drivers/misc/xlink-pcie/local_host/dma.c b/drivers/misc/xlink-pcie/local_host/dma.c
index 8c89bd9ebb46..e872f789a48e 100644
--- a/drivers/misc/xlink-pcie/local_host/dma.c
+++ b/drivers/misc/xlink-pcie/local_host/dma.c
@@ -165,8 +165,15 @@ static void __iomem *intel_xpcie_ep_get_dma_base(struct pci_epf *epf)
 {
 	struct device *dev = &epf->dev;
 	struct xpcie_epf *xpcie_epf = (struct xpcie_epf *)dev->driver_data;
+#if (IS_ENABLED(CONFIG_PCIE_TBH_EP))
+	struct pci_epc *epc = epf->epc;
+	struct dw_pcie_ep *ep = epc_get_drvdata(epc);
+	struct dw_pcie *pci = to_dw_pcie_from_ep(ep);
+
+	xpcie_epf->dbi_base = pci->dbi_base;
+#endif
 
-	return xpcie_epf->dbi_base + DMA_DBI_OFFSET;
+	return pci->dbi_base + DMA_DBI_OFFSET;
 }
 
 static int intel_xpcie_ep_dma_disable(void __iomem *dma_base,
diff --git a/drivers/misc/xlink-pcie/local_host/epf.c b/drivers/misc/xlink-pcie/local_host/epf.c
index df3e377dddd9..f4f89f1310b0 100644
--- a/drivers/misc/xlink-pcie/local_host/epf.c
+++ b/drivers/misc/xlink-pcie/local_host/epf.c
@@ -173,13 +173,13 @@ static irqreturn_t intel_xpcie_err_interrupt(int irq, void *args)
 
 static irqreturn_t intel_xpcie_host_interrupt(int irq, void *args)
 {
-	struct xpcie_epf *xpcie_epf;
 	struct xpcie *xpcie = args;
+	struct xpcie_epf *xpcie_epf = container_of(xpcie,
+						   struct xpcie_epf, xpcie);
 	u8 event;
 #if (!IS_ENABLED(CONFIG_PCIE_TBH_EP))
 	u32 val;
 
-	xpcie_epf = container_of(xpcie, struct xpcie_epf, xpcie);
 	val = ioread32(xpcie_epf->apb_base + PCIE_REGS_PCIE_INTR_FLAGS);
 	if (val & LBC_CII_EVENT_FLAG) {
 		iowrite32(LBC_CII_EVENT_FLAG,
@@ -550,7 +550,6 @@ static void intel_xpcie_enable_multi_functions(struct pci_epf *epf)
 	list_add_tail(&xpcie_epf->list, &dev_list);
 	snprintf(xpcie_epf->name, MXLK_MAX_NAME_LEN, "%s_func%x", epf->name,
 		 epf->func_no);
-
 	ret = request_irq(xpcie_epf->irq_doorbell,
 			  &intel_xpcie_host_interrupt, 0, XPCIE_DRIVER_NAME,
 			  &xpcie_epf->xpcie);
@@ -624,7 +623,7 @@ static int intel_xpcie_epf_bind(struct pci_epf *epf)
 	const struct pci_epc_features *features;
 	struct pci_epc *epc = epf->epc;
 #if (!IS_ENABLED(CONFIG_PCIE_TBH_EP))
-	u32 bus_num, dev_num;
+	u32 bus_num = 0, dev_num = 0;
 #endif
 	struct device *dev;
 	size_t align = SZ_16K;
diff --git a/drivers/misc/xlink-pcie/remote_host/boot.c b/drivers/misc/xlink-pcie/remote_host/boot.c
index f481a72e6a61..36086f6d4d7d 100644
--- a/drivers/misc/xlink-pcie/remote_host/boot.c
+++ b/drivers/misc/xlink-pcie/remote_host/boot.c
@@ -12,41 +12,7 @@
 
 #include "pci.h"
 #include "../common/boot.h"
-#if 0
-static struct intel_xpcie *intel_xpcie_get_device_by_name(const char *name)
-{
-	struct intel_xpcie *p;
-	bool found = false;
-
-	mutex_lock(&dev_list_mutex);
-	list_for_each_entry(p, &dev_list, list) {
-		if (!strncmp(p->name, name, MXLK_MAX_NAME_LEN)) {
-			found = true;
-			break;
-		}
-	}
-	mutex_unlock(&dev_list_mutex);
-
-	if (!found)
-		p = NULL;
 
-	return p;
-}
-
-static struct intel_xpcie *intel_xpcie_get_device_by_phys_id(u32 phys_id)
-{
-	struct intel_xpcie *xdev;
-
-	mutex_lock(&dev_list_mutex);
-	list_for_each_entry(xdev, &dev_list, list) {
-		if (xdev->devid == phys_id)
-			break;
-	}
-	mutex_unlock(&dev_list_mutex);
-
-	return xdev;
-}
-#endif
 #define STR_EQUAL(a, b) !strncmp(a, b, strlen(b))
 
 enum xpcie_stage intel_xpcie_check_magic(struct xpcie_dev *xdev)
@@ -90,8 +56,8 @@ void xpcie_device_irq(struct work_struct *work)
 		xdev->boot_notif_fn(xdev->devid);
 };
 
-int intel_xpcie_connect_boot_device(const char *dev_name, u32 *phys_dev_id,
-				    mxlk_pcie_boot_event notif_fn)
+int mxlk_pcie_connect_boot_device(const char *dev_name, u32 *phys_dev_id,
+				  mxlk_pcie_boot_event notif_fn)
 {
 	struct xpcie_dev *xdev = intel_xpcie_get_device_by_name(dev_name);
 
@@ -122,9 +88,9 @@ int intel_xpcie_connect_boot_device(const char *dev_name, u32 *phys_dev_id,
 		 *phys_dev_id, xdev->boot_dev_link);
 	return 0;
 }
-EXPORT_SYMBOL(intel_xpcie_connect_boot_device);
-int intel_xpcie_boot_mmio_write(u32 phys_dev_id, u32 offset, void *data,
-				size_t size)
+EXPORT_SYMBOL(mxlk_pcie_connect_boot_device);
+int mxlk_pcie_boot_mmio_write(u32 phys_dev_id, u32 offset, void *data,
+			      size_t size)
 {
 	struct xpcie_dev *xdev =
 			intel_xpcie_get_device_by_phys_id(phys_dev_id);
@@ -147,10 +113,10 @@ int intel_xpcie_boot_mmio_write(u32 phys_dev_id, u32 offset, void *data,
 
 	return size;
 }
-EXPORT_SYMBOL(intel_xpcie_boot_mmio_write);
+EXPORT_SYMBOL(mxlk_pcie_boot_mmio_write);
 
-int intel_xpcie_boot_mmio_read(u32 phys_dev_id, u32 offset, void *status,
-			       size_t size)
+int mxlk_pcie_boot_mmio_read(u32 phys_dev_id, u32 offset, void *status,
+			     size_t size)
 {
 	struct xpcie_dev *xdev =
 			intel_xpcie_get_device_by_phys_id(phys_dev_id);
@@ -172,9 +138,9 @@ int intel_xpcie_boot_mmio_read(u32 phys_dev_id, u32 offset, void *status,
 
 	return size;
 }
-EXPORT_SYMBOL(intel_xpcie_boot_mmio_read);
+EXPORT_SYMBOL(mxlk_pcie_boot_mmio_read);
 
-int intel_xpcie_disconnect_boot_device(u32 phys_dev_id)
+int mxlk_pcie_disconnect_boot_device(u32 phys_dev_id)
 {
 	struct xpcie_dev *xdev =
 			intel_xpcie_get_device_by_phys_id(phys_dev_id);
@@ -203,5 +169,5 @@ int intel_xpcie_disconnect_boot_device(u32 phys_dev_id)
 		 xdev->boot_dev_link);
 	return 0;
 }
-EXPORT_SYMBOL(intel_xpcie_disconnect_boot_device);
+EXPORT_SYMBOL(mxlk_pcie_disconnect_boot_device);
 #endif
diff --git a/drivers/misc/xlink-pcie/remote_host/main.c b/drivers/misc/xlink-pcie/remote_host/main.c
index e7ec6efbb77a..7658e368f1ac 100644
--- a/drivers/misc/xlink-pcie/remote_host/main.c
+++ b/drivers/misc/xlink-pcie/remote_host/main.c
@@ -39,7 +39,7 @@ static int intel_xpcie_probe(struct pci_dev *pdev,
 	hw_id = FIELD_PREP(HW_ID_HI_MASK, pdev->bus->number) |
 		FIELD_PREP(HW_ID_LO_MASK, PCI_SLOT(pdev->devfn));
 
-#if (IS_ENABLED(CONFIG_PCIE_TBH_EP))
+#if (!IS_ENABLED(CONFIG_PCIE_TBH_EP))
 	sw_devid = FIELD_PREP(XLINK_DEV_INF_TYPE_MASK, XLINK_DEV_INF_PCIE) |
 		FIELD_PREP(XLINK_DEV_PHYS_ID_MASK, hw_id) |
 		FIELD_PREP(XLINK_DEV_TYPE_MASK, XLINK_DEV_TYPE_KMB) |
@@ -48,7 +48,6 @@ static int intel_xpcie_probe(struct pci_dev *pdev,
 #else
 	sw_devid = hw_id;
 #endif
-
 	xdev = intel_xpcie_get_device_by_id(sw_devid);
 	if (!xdev) {
 		xdev = intel_xpcie_create_device(sw_devid, pdev);
diff --git a/drivers/misc/xlink-pcie/remote_host/pci.c b/drivers/misc/xlink-pcie/remote_host/pci.c
index 70f15c2a3058..c68e1e64ecab 100644
--- a/drivers/misc/xlink-pcie/remote_host/pci.c
+++ b/drivers/misc/xlink-pcie/remote_host/pci.c
@@ -65,7 +65,6 @@ struct xpcie_dev *intel_xpcie_create_device(u32 sw_device_id,
 		 PCI_FUNC(pdev->devfn));
 
 	mutex_init(&xdev->lock);
-
 	return xdev;
 }
 
@@ -258,13 +257,14 @@ static void xpcie_device_poll(struct work_struct *work)
 {
 	struct xpcie_dev *xdev = container_of(work, struct xpcie_dev,
 					      wait_event.work);
+	enum xpcie_stage stage = intel_xpcie_check_magic(xdev);
 #if (IS_ENABLED(CONFIG_PCIE_TBH_EP))
 	u8 max_functions;
 #endif
-	if (intel_xpcie_get_device_status(&xdev->xpcie) < XPCIE_STATUS_RUN) {
-		schedule_delayed_work(&xdev->wait_event,
-				      msecs_to_jiffies(100));
-	} else {
+	if (stage == STAGE_RECOV) {
+		if (xdev->xpcie.status != XPCIE_STATUS_RECOVERY)
+			xdev->xpcie.status = XPCIE_STATUS_RECOVERY;
+	} else if (stage == STAGE_OS) {
 		xdev->xpcie.status = XPCIE_STATUS_READY;
 #if (IS_ENABLED(CONFIG_PCIE_TBH_EP))
 		intel_xpcie_set_physical_device_id(&xdev->xpcie, xdev->devid);
@@ -281,8 +281,10 @@ static void xpcie_device_poll(struct work_struct *work)
 		intel_xpcie_set_doorbell(&xdev->xpcie, TO_DEVICE,
 					 PHY_ID_UPDATED, 1);
 		iowrite32(1, xdev->xpcie.doorbell_base);
+		return;
 #endif
 	}
+	schedule_delayed_work(&xdev->wait_event, msecs_to_jiffies(100));
 }
 
 static int intel_xpcie_pci_prepare_dev_reset(struct xpcie_dev *xdev,
@@ -594,7 +596,6 @@ void intel_xpcie_pci_notify_event(struct xpcie_dev *xdev,
 		xdev->event_fn(xdev->devid, event_type);
 }
 
-
 #if (IS_ENABLED(CONFIG_PCIE_TBH_EP))
 struct xpcie_dev *intel_xpcie_get_device_by_name(const char *name)
 {
-- 
2.27.0

