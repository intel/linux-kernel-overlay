From 87024c0ab441713c1990b540c9f914b65568ee19 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Sat, 31 Oct 2020 15:01:17 -0700
Subject: [PATCH 61/72] drivers base/topology: Introduce per-CPU,per-class
 capacities

Introduce variables to represent CPU capacities per class of task. This
reflects the fact that in some CPU architectures, CPU capacity depends
on the type of instructions a particular task executes.

Keep the existing per-CPU cpu_scale for architectures that don't provide
such level of capacity granularity. Also, continue using cpu_scale as the
default CPU capacity for task classes that hardware has not identified.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 drivers/base/topology.c  | 26 ++++++++++++++++++++++++++
 include/linux/topology.h |  6 ++++++
 2 files changed, 32 insertions(+)

diff --git a/drivers/base/topology.c b/drivers/base/topology.c
index c6cf3c1d06da..0d2b71aaecf8 100644
--- a/drivers/base/topology.c
+++ b/drivers/base/topology.c
@@ -142,6 +142,32 @@ static int __init topology_sysfs_init(void)
 
 device_initcall(topology_sysfs_init);
 
+DEFINE_PER_CPU(unsigned long, class_cpu_scale[TOPOLOGY_MAX_CPU_SCALE_CLASSES]);
+
+unsigned long topology_get_class_cpu_scale(unsigned int cpu,
+					   unsigned int classid)
+{
+	if (classid >= TOPOLOGY_MAX_CPU_SCALE_CLASSES) {
+		pr_err("invalid classid %u\n", classid);
+		/* Return minimum possible capacity value. */
+		return 1;
+	}
+
+	return per_cpu(class_cpu_scale, cpu)[classid];
+}
+
+void topology_set_class_cpu_scale(unsigned int cpu, unsigned int classid,
+				  unsigned long capacity)
+{
+	if (classid >= TOPOLOGY_MAX_CPU_SCALE_CLASSES) {
+		pr_err("invalid classid %u\n", classid);
+		/* Return minimum possible capacity value. */
+		return;
+	}
+
+	per_cpu(class_cpu_scale, cpu)[classid] = capacity;
+}
+
 DEFINE_PER_CPU(unsigned long, cpu_scale) = SCHED_CAPACITY_SCALE;
 
 void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity)
diff --git a/include/linux/topology.h b/include/linux/topology.h
index 76f154a9dfd1..9ac53ae29482 100644
--- a/include/linux/topology.h
+++ b/include/linux/topology.h
@@ -220,6 +220,12 @@ static inline unsigned long topology_get_cpu_scale(int cpu)
 
 void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);
 
+#define TOPOLOGY_MAX_CPU_SCALE_CLASSES 64
+DECLARE_PER_CPU(unsigned long, class_cpu_scale[TOPOLOGY_MAX_CPU_SCALE_CLASSES]);
+unsigned long topology_get_class_cpu_scale(unsigned int cpu, unsigned int classid);
+void topology_set_class_cpu_scale(unsigned int cpu, unsigned int classid,
+				  unsigned long capacity);
+
 u32 arch_topology_get_factor(int cpu);
 void do_topology_normalize_cpu_scale(u32 *raw_capacity);
 #endif /* _LINUX_TOPOLOGY_H */
-- 
2.27.0

