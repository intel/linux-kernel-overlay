From 5ffc4be0bb6f282f96300280e4eb0a7271156f60 Mon Sep 17 00:00:00 2001
From: Pavitra <PavitraX.S@intel.com>
Date: Wed, 3 Feb 2021 18:30:01 +0530
Subject: [PATCH 014/223] THB:GPIO changes to support THB PO board requirements

THB PO board requirements

Signed-off-by: Pavitra <PavitraX.S@intel.com>
---
 drivers/pinctrl/pinctrl-thunderbay.c | 313 +++++++++++++++++----------
 drivers/pinctrl/pinctrl-thunderbay.h | 291 +++++++++++++++++++------
 2 files changed, 415 insertions(+), 189 deletions(-)

diff --git a/drivers/pinctrl/pinctrl-thunderbay.c b/drivers/pinctrl/pinctrl-thunderbay.c
index a056d3658285..22980a8df6a2 100644
--- a/drivers/pinctrl/pinctrl-thunderbay.c
+++ b/drivers/pinctrl/pinctrl-thunderbay.c
@@ -472,28 +472,20 @@ static const struct thunderbay_pin_soc thunderbay_data = {
 
 /*******************************************************************************/
 
-/* TODO : do remap for complete address range in probe function else do unmap */
+/* GPIO register read */
 static u32 thb_gpio_read_reg(struct gpio_chip *chip, unsigned int pinnr)
 {
-	struct thunderbay_pinctrl *kpc = gpiochip_get_data(chip);
+	struct thunderbay_pinctrl *tpc = gpiochip_get_data(chip);
 
-/*	void __iomem *regs = ioremap((kpc->base0 + THB_GPIO_PIN_OFFSET(pinnr)), 4);
- *
- *	return (readl(regs));
- */
-
-	return readl(kpc->base0 + THB_GPIO_PIN_OFFSET(pinnr));
+	return readl(tpc->base0 + THB_GPIO_REG_OFFSET(pinnr));
 }
 
+/* GPIO register write */
 static u32 thb_gpio_write_reg(struct gpio_chip *chip, unsigned int pinnr, u32 value)
 {
-	struct thunderbay_pinctrl *kpc = gpiochip_get_data(chip);
+	struct thunderbay_pinctrl *tpc = gpiochip_get_data(chip);
 
-/*	void __iomem *regs = ioremap((kpc->base0 + THB_GPIO_PIN_OFFSET(pinnr)), 4);
- *
- *	writel(value, regs);
- */
-	writel(value, (kpc->base0 + THB_GPIO_PIN_OFFSET(pinnr)));
+	writel(value, (tpc->base0 + THB_GPIO_REG_OFFSET(pinnr)));
 
 	return 0;
 }
@@ -510,7 +502,9 @@ static int thb_read_gpio_data(struct gpio_chip *chip, unsigned int offset, unsig
 	int data_offset = 0x2000u;
 	u32 data_reg;
 
-	data_offset = (pad_dir > 0) ? (data_offset + 10 + (offset/32)):(data_offset + (offset/32));
+	/* as per GPIO Spec = pad_dir 0:input, 1:output */
+	data_offset = ((pad_dir == 0u) ? (data_offset + 0x4 + (offset/32))
+							: (data_offset + (offset/32)));
 
 	data_reg = thb_gpio_read_reg(chip, data_offset);
 
@@ -520,7 +514,7 @@ static int thb_read_gpio_data(struct gpio_chip *chip, unsigned int offset, unsig
 }
 
 /* Write GPIO DATA Registers:
- * GPIO_DATA_OUT, GPIO_DATA_IN,
+ * GPIO_DATA_OUT,
  * GPIO_DATA_LOW, GPIO_DATA_HIGH,
  */
 
@@ -536,7 +530,7 @@ static int thb_write_gpio_data(struct gpio_chip *chip, unsigned int offset, unsi
 
 	data_reg = thb_gpio_read_reg(chip, data_offset);
 
-	data_reg = ((value == 1) ? (data_reg|BIT(offset % 32))
+	data_reg = ((value > 0u) ? (data_reg|BIT(offset % 32))
 							: (data_reg & (~(BIT(offset % 32)))));
 
 	ret_val = thb_gpio_write_reg(chip, data_offset, data_reg);
@@ -549,28 +543,70 @@ static int thb_write_gpio_data(struct gpio_chip *chip, unsigned int offset, unsi
 
 
 /*
- * Enable GPIO request for a pin if it is in default GPIO mode (1).
- * Request fails if the pin has been muxed into any other modes (0).
+ * Update PIN configuration from PORT to GPIO
  */
 static int thunderbay_request_gpio(struct pinctrl_dev *pctldev,
 				struct pinctrl_gpio_range *range,
 				unsigned int pin)
 {
-	return 0;
+
+	/* TODO: Proper usecase to be verified for conditions check
+	 * Low poer mode setup
+	 */
+	int ret_val = -EINVAL;
+	u32 reg = 0;
+
+	struct thunderbay_pinctrl *tpc = pinctrl_dev_get_drvdata(pctldev);
+
+	struct gpio_chip *chip = &tpc->chip;
+
+	reg = thb_gpio_read_reg(chip, pin);
+
+	/* Updates PIN configuration from PORT to GPIO */
+	reg |= (THB_GPIO_PORT_SELECT_MASK);
+
+	ret_val = thb_gpio_write_reg(chip, pin, reg);
+
+	return ret_val;
+
 }
 
+/*
+ * Updates PIN configuration from GPIO to PORT/default mode
+ */
+static void thunderbay_free_gpio(struct pinctrl_dev *pctldev,
+				struct pinctrl_gpio_range *range,
+				unsigned int pin)
+{
+	/* TODO: Proper usecase to be verified for conditions check */
+	int ret_val = -EINVAL;
+
+	u32 reg = 0;
+
+	struct thunderbay_pinctrl *tpc = pinctrl_dev_get_drvdata(pctldev);
+
+	struct gpio_chip *chip = &tpc->chip;
+
+	reg = thb_gpio_read_reg(chip, pin);
+
+	/* Updates PIN configuration from GPIO to PORT */
+	reg &= (~THB_GPIO_PORT_SELECT_MASK);
+
+	ret_val = thb_gpio_write_reg(chip, pin, reg);
+
+}
 
 /*******************************************************************************************/
 
-static int thunderbay_pinconf_set_tristate(struct thunderbay_pinctrl *kpc,
-						unsigned int pin, u32 config)
+static int thunderbay_pinconf_set_tristate(struct thunderbay_pinctrl *tpc,
+				unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
 	 * How/when to disable Tri-state
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -583,13 +619,13 @@ static int thunderbay_pinconf_set_tristate(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_tristate(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_tristate(struct thunderbay_pinctrl *tpc,
 							unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -602,7 +638,7 @@ static int thunderbay_pinconf_get_tristate(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_set_pulldown(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_pulldown(struct thunderbay_pinctrl *tpc,
 							unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -610,7 +646,7 @@ static int thunderbay_pinconf_set_pulldown(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -623,13 +659,13 @@ static int thunderbay_pinconf_set_pulldown(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_pulldown(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_pulldown(struct thunderbay_pinctrl *tpc,
 					unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -642,7 +678,7 @@ static int thunderbay_pinconf_get_pulldown(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_set_pullup(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_pullup(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -650,7 +686,7 @@ static int thunderbay_pinconf_set_pullup(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -663,13 +699,13 @@ static int thunderbay_pinconf_set_pullup(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_pullup(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_pullup(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -682,7 +718,7 @@ static int thunderbay_pinconf_get_pullup(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_set_opendrain(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_opendrain(struct thunderbay_pinctrl *tpc,
 								unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -690,7 +726,7 @@ static int thunderbay_pinconf_set_opendrain(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -704,13 +740,13 @@ static int thunderbay_pinconf_set_opendrain(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_opendrain(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_opendrain(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -724,7 +760,7 @@ static int thunderbay_pinconf_get_opendrain(struct thunderbay_pinctrl *kpc,
 }
 
 
-static int thunderbay_pinconf_set_pushpull(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_pushpull(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -732,7 +768,7 @@ static int thunderbay_pinconf_set_pushpull(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -746,13 +782,13 @@ static int thunderbay_pinconf_set_pushpull(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_pushpull(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_pushpull(struct thunderbay_pinctrl *tpc,
 							unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -765,7 +801,7 @@ static int thunderbay_pinconf_get_pushpull(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_set_drivestrength(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_drivestrength(struct thunderbay_pinctrl *tpc,
 							unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -773,7 +809,7 @@ static int thunderbay_pinconf_set_drivestrength(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -788,13 +824,13 @@ static int thunderbay_pinconf_set_drivestrength(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_drivestrength(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_drivestrength(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -809,7 +845,7 @@ static int thunderbay_pinconf_get_drivestrength(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_set_schmitt(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_schmitt(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -817,7 +853,7 @@ static int thunderbay_pinconf_set_schmitt(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -831,13 +867,13 @@ static int thunderbay_pinconf_set_schmitt(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_schmitt(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_schmitt(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -851,7 +887,7 @@ static int thunderbay_pinconf_get_schmitt(struct thunderbay_pinctrl *kpc,
 }
 
 
-static int thunderbay_pinconf_set_slew_rate(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_set_slew_rate(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 config)
 {
 	/* TODO: update with pre-Conditions to be checked
@@ -859,7 +895,7 @@ static int thunderbay_pinconf_set_slew_rate(struct thunderbay_pinctrl *kpc,
 	 */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -873,13 +909,13 @@ static int thunderbay_pinconf_set_slew_rate(struct thunderbay_pinctrl *kpc,
 	return ret_val;
 }
 
-static int thunderbay_pinconf_get_slew_rate(struct thunderbay_pinctrl *kpc,
+static int thunderbay_pinconf_get_slew_rate(struct thunderbay_pinctrl *tpc,
 						unsigned int pin, u32 *config)
 {
 	/* TODO: update with pre-Conditions to be checked */
 	int ret_val = -EINVAL;
 
-	struct gpio_chip *chip = &kpc->chip;
+	struct gpio_chip *chip = &tpc->chip;
 
 	u32 reg = 0;
 
@@ -898,40 +934,40 @@ static int thunderbay_pinconf_get(struct pinctrl_dev *pctldev, unsigned int pin,
 {
 	u32 arg;
 	int ret;
-	struct thunderbay_pinctrl *kpc = pinctrl_dev_get_drvdata(pctldev);
+	struct thunderbay_pinctrl *tpc = pinctrl_dev_get_drvdata(pctldev);
 	enum pin_config_param param = pinconf_to_config_param(*config);
 
 	switch (param) {
 	case PIN_CONFIG_BIAS_HIGH_IMPEDANCE:
-		ret = thunderbay_pinconf_get_tristate(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_tristate(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_BIAS_PULL_DOWN:
-		ret = thunderbay_pinconf_get_pulldown(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_pulldown(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_BIAS_PULL_UP:
-		ret = thunderbay_pinconf_get_pullup(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_pullup(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_DRIVE_OPEN_DRAIN:
-		ret = thunderbay_pinconf_get_opendrain(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_opendrain(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_DRIVE_PUSH_PULL:
-		ret = thunderbay_pinconf_get_pushpull(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_pushpull(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_DRIVE_STRENGTH:
-		ret = thunderbay_pinconf_get_drivestrength(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_drivestrength(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_INPUT_SCHMITT_ENABLE:
-		ret = thunderbay_pinconf_get_schmitt(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_schmitt(tpc, pin, &arg);
 		break;
 
 	case PIN_CONFIG_SLEW_RATE:
-		ret = thunderbay_pinconf_get_slew_rate(kpc, pin, &arg);
+		ret = thunderbay_pinconf_get_slew_rate(tpc, pin, &arg);
 		break;
 
 	default:
@@ -952,7 +988,7 @@ static int thunderbay_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin,
 	enum pin_config_param param;
 	unsigned int pinconf;
 	int ret = 0;
-	struct thunderbay_pinctrl *kpc = pinctrl_dev_get_drvdata(pctldev);
+	struct thunderbay_pinctrl *tpc = pinctrl_dev_get_drvdata(pctldev);
 
 	for (pinconf = 0; pinconf < num_configs; pinconf++) {
 		param = pinconf_to_config_param(configs[pinconf]);
@@ -960,35 +996,35 @@ static int thunderbay_pinconf_set(struct pinctrl_dev *pctldev, unsigned int pin,
 
 		switch (param) {
 		case PIN_CONFIG_BIAS_HIGH_IMPEDANCE:
-			ret = thunderbay_pinconf_set_tristate(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_tristate(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_BIAS_PULL_DOWN:
-			ret = thunderbay_pinconf_set_pulldown(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_pulldown(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_BIAS_PULL_UP:
-			ret = thunderbay_pinconf_set_pullup(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_pullup(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_DRIVE_OPEN_DRAIN:
-			ret = thunderbay_pinconf_set_opendrain(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_opendrain(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_DRIVE_PUSH_PULL:
-			ret = thunderbay_pinconf_set_pushpull(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_pushpull(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_DRIVE_STRENGTH:
-			ret = thunderbay_pinconf_set_drivestrength(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_drivestrength(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_INPUT_SCHMITT_ENABLE:
-			ret = thunderbay_pinconf_set_schmitt(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_schmitt(tpc, pin, arg);
 			break;
 
 		case PIN_CONFIG_SLEW_RATE:
-			ret = thunderbay_pinconf_set_slew_rate(kpc, pin, arg);
+			ret = thunderbay_pinconf_set_slew_rate(tpc, pin, arg);
 			break;
 
 		default:
@@ -1017,15 +1053,20 @@ static const unsigned int ethernet_0_pins[] = { 26, 27, 28, 29, 30, 31, 32, 33,
 static const unsigned int ethernet_1_pins[] = { 42, 43, 44, 45, 46, 47, 48, 49,
 				50, 51, 52, 53, 54, 55, 56 };
 
-static const unsigned int power_interrupt_0_pins[] = { 41, 57, 66 };
+static const unsigned int power_interrupt_max_platform_power_pins[] = { 41 };
+static const unsigned int power_interrupt_iccmax_vpu_pins[] = { 57 };
+static const unsigned int power_interrupt_iccmax_media_pins[] = { 66 };
 
-static const unsigned int thermtrip_0_pins[] = { 58, 59 };
+static const unsigned int thermtrip_in_pins[] = { 58 };
+static const unsigned int thermtrip_out_pins[] = { 59 };
 
 static const unsigned int smbus_0_pins[] = { 60, 61 };
 
-static const unsigned int reset_0_pins[] = { 62, 63 };
+static const unsigned int platform_reset_in_pins[] = { 62 };
+static const unsigned int platform_reset_out_pins[] = { 63 };
 
-static const unsigned int shutdown_0_pins[] = { 64, 65 };
+static const unsigned int platform_shutdown_in_pins[] = { 64 };
+static const unsigned int platform_shutdown_out_pins[] = { 65 };
 
 
 #define DEFINE_THB_PINCTRL_GRP(gname) \
@@ -1048,11 +1089,16 @@ static const struct thb_pinctrl_group thb_pinctrl_groups[] = {
 	DEFINE_THB_PINCTRL_GRP(spi_1),
 	DEFINE_THB_PINCTRL_GRP(ethernet_0),
 	DEFINE_THB_PINCTRL_GRP(ethernet_1),
-	DEFINE_THB_PINCTRL_GRP(power_interrupt_0),
-	DEFINE_THB_PINCTRL_GRP(thermtrip_0),
+	DEFINE_THB_PINCTRL_GRP(power_interrupt_max_platform_power),
+	DEFINE_THB_PINCTRL_GRP(power_interrupt_iccmax_vpu),
+	DEFINE_THB_PINCTRL_GRP(power_interrupt_iccmax_media),
+	DEFINE_THB_PINCTRL_GRP(thermtrip_in),
+	DEFINE_THB_PINCTRL_GRP(thermtrip_out),
 	DEFINE_THB_PINCTRL_GRP(smbus_0),
-	DEFINE_THB_PINCTRL_GRP(reset_0),
-	DEFINE_THB_PINCTRL_GRP(shutdown_0),
+	DEFINE_THB_PINCTRL_GRP(platform_reset_in),
+	DEFINE_THB_PINCTRL_GRP(platform_reset_out),
+	DEFINE_THB_PINCTRL_GRP(platform_shutdown_in),
+	DEFINE_THB_PINCTRL_GRP(platform_shutdown_out),
 };
 
 /* function groups */
@@ -1061,11 +1107,19 @@ static const char * const i2c_groups[] = { "i2c_0_grp", "i2c_1_grp", "i2c_2_grp"
 static const char * const uart_groups[] = { "uart_0_grp", "uart_1_grp" };
 static const char * const spi_groups[] = { "spi_0_grp", "spi_1_grp" };
 static const char * const ethernet_groups[] = { "ethernet_0_grp", "ethernet_1_grp" };
-static const char * const power_interrupt_groups[] = { "power_interrupt_0_grp" };
-static const char * const thermtrip_groups[] = { "thermtrip_0_grp" };
+static const char * const power_interrupt_max_platform_power_groups[] = {
+							"power_interrupt_max_platform_power_grp" };
+static const char * const power_interrupt_iccmax_vpu_groups[] = {
+							"power_interrupt_iccmax_vpu_grp" };
+static const char * const power_interrupt_iccmax_media_groups[] = {
+							"power_interrupt_iccmax_media" };
+static const char * const thermtrip_in_groups[] = { "thermtrip_in_grp" };
+static const char * const thermtrip_out_groups[] = { "thermtrip_out_grp" };
 static const char * const smbus_groups[] = { "smbus_0_grp" };
-static const char * const shutdown_groups[] = { "shutdown_0_grp" };
-
+static const char * const platform_reset_in_groups[] = { "platform_reset_in_grp" };
+static const char * const platform_reset_out_groups[] = { "platform_reset_out_grp" };
+static const char * const platform_shutdown_in_groups[] = { "platform_shutdown_in_grp" };
+static const char * const platform_shutdown_out_groups[] = { "platform_shutdown_out_grp" };
 
 
 static int thb_pinctrl_get_groups_count(struct pinctrl_dev *pctldev)
@@ -1106,10 +1160,16 @@ static const struct thb_pinmux_function thb_pinctrl_pmx_funcs[] = {
 	DEFINE_THB_PINMUX_FUNCTION(uart),
 	DEFINE_THB_PINMUX_FUNCTION(spi),
 	DEFINE_THB_PINMUX_FUNCTION(ethernet),
-	DEFINE_THB_PINMUX_FUNCTION(power_interrupt),
-	DEFINE_THB_PINMUX_FUNCTION(thermtrip),
+	DEFINE_THB_PINMUX_FUNCTION(power_interrupt_max_platform_power),
+	DEFINE_THB_PINMUX_FUNCTION(power_interrupt_iccmax_vpu),
+	DEFINE_THB_PINMUX_FUNCTION(power_interrupt_iccmax_media),
+	DEFINE_THB_PINMUX_FUNCTION(thermtrip_in),
+	DEFINE_THB_PINMUX_FUNCTION(thermtrip_out),
 	DEFINE_THB_PINMUX_FUNCTION(smbus),
-	DEFINE_THB_PINMUX_FUNCTION(shutdown),
+	DEFINE_THB_PINMUX_FUNCTION(platform_reset_in),
+	DEFINE_THB_PINMUX_FUNCTION(platform_reset_out),
+	DEFINE_THB_PINMUX_FUNCTION(platform_shutdown_in),
+	DEFINE_THB_PINMUX_FUNCTION(platform_shutdown_out),
 };
 
 static int thb_pinctrl_get_functions_count(struct pinctrl_dev *pctldev)
@@ -1182,6 +1242,7 @@ const struct pinmux_ops thunderbay_pmxops = {
 	.get_function_groups = thb_pinctrl_get_groups,
 	.set_mux			 = thb_pinctrl_set_mux,
 	.gpio_request_enable = thunderbay_request_gpio,
+	.gpio_disable_free   = thunderbay_free_gpio,
 };
 
 static const struct pinconf_ops thunderbay_confops = {
@@ -1210,7 +1271,7 @@ static int thunderbay_gpio_get_direction(struct gpio_chip *chip, unsigned int of
 
 	/* Return direction only if configured as GPIO else negative error */
 	if (reg & THB_GPIO_PORT_SELECT_MASK)
-		ret_val = ((reg & THB_GPIO_PAD_DIRECTION_MASK) > 0) ? 1 : 0;
+		ret_val = ((reg & THB_GPIO_PAD_DIRECTION_MASK) == 0) ? 1 : 0;
 
 
 	return ret_val;
@@ -1225,7 +1286,7 @@ static int thunderbay_gpio_set_direction_input(struct gpio_chip *chip, unsigned
 
 	/* set pin as input only if it is GPIO else error */
 	if (reg & THB_GPIO_PORT_SELECT_MASK) {
-		reg |= THB_GPIO_PAD_DIRECTION_MASK;
+		reg &= (~THB_GPIO_PAD_DIRECTION_MASK);
 
 		thb_gpio_write_reg(chip, offset, reg);
 
@@ -1243,9 +1304,11 @@ static void thunderbay_gpio_set_value(struct gpio_chip *chip, unsigned int offse
 	u32 reg = thb_gpio_read_reg(chip, offset);
 
 	/* update pin value only if it is GPIO-output else error */
-	if ((reg & THB_GPIO_PORT_SELECT_MASK) && ((reg & THB_GPIO_PAD_DIRECTION_MASK) == 0))
+	if ((reg & THB_GPIO_PORT_SELECT_MASK) && (reg & THB_GPIO_PAD_DIRECTION_MASK))
 		ret_val = thb_write_gpio_data(chip, offset, value);
 
+	return;
+
 }
 
 
@@ -1259,13 +1322,13 @@ static int thunderbay_gpio_set_direction_output(struct gpio_chip *chip,
 
 	/* set pin as output only if it is GPIO else error */
 	if (reg & THB_GPIO_PORT_SELECT_MASK) {
-		reg &= (~(THB_GPIO_PAD_DIRECTION_MASK));
+		reg |= THB_GPIO_PAD_DIRECTION_MASK;
 
 		thb_gpio_write_reg(chip, offset, reg);
 
 		thunderbay_gpio_set_value(chip, offset, value);
 
-		ret_val = 0;
+		ret_val = 0u;
 	}
 
 	return ret_val;
@@ -1301,13 +1364,14 @@ static int thunderbay_gpio_get_value(struct gpio_chip *chip, unsigned int offset
  *
  * Return: 0 on success, negative error otherwise.
  ******************************************************************************************/
-static int thunderbay_gpiochip_probe(struct thunderbay_pinctrl *kpc)
+static int thunderbay_gpiochip_probe(struct thunderbay_pinctrl *tpc)
 {
-	struct gpio_chip *chip = &kpc->chip;
-	int ret, i, temp;
+	struct gpio_chip *chip = &tpc->chip;
+	int ret, i, offset;
+	u32 reg = 0;
 
-	chip->label		= dev_name(kpc->dev);
-	chip->parent		= kpc->dev;
+	chip->label		= dev_name(tpc->dev);
+	chip->parent		= tpc->dev;
 	chip->request		= gpiochip_generic_request;
 	chip->free		= gpiochip_generic_free;
 	chip->get_direction	= thunderbay_gpio_get_direction;
@@ -1324,27 +1388,38 @@ static int thunderbay_gpiochip_probe(struct thunderbay_pinctrl *kpc)
  */
 	chip->base		= -1;
 /* the number of GPIOs handled by this controller; the last GPIO handled is (base + ngpio - 1). */
-	chip->ngpio		= kpc->soc->npins;
+	chip->ngpio		= tpc->soc->npins;
 
-	ret = gpiochip_add_data(chip, kpc);
+	ret = gpiochip_add_data(chip, tpc);
 	if (ret) {
-		dev_err(kpc->dev, "Failed to add gpiochip\n");
+		dev_err(tpc->dev, "Failed to add gpiochip\n");
 		return ret;
 	}
 
-	ret = gpiochip_add_pin_range(chip, dev_name(kpc->dev), 0, 0,
+	ret = gpiochip_add_pin_range(chip, dev_name(tpc->dev), 0, 0,
 					chip->ngpio);
 	if (ret) {
-		dev_err(kpc->dev, "Failed to add gpiochip pin range\n");
+		dev_err(tpc->dev, "Failed to add gpiochip pin range\n");
 		return ret;
 	}
 
 	for (i = 0; i < 67; i++) {
-		temp = thb_gpio_read_reg(chip, i);
-		temp = (temp | THB_GPIO_PORT_SELECT_MASK);
-		thb_gpio_write_reg(chip, i, temp);
+	/* TODO: Remove after THB-PO
+	 * THB GPIO Default configuration as per THB-VV/CRB board
+	 */
+		reg = thb_vv_cfg_modex_regval[i][0];
+		thb_gpio_write_reg(chip, i, reg);
 	}
 
+	/* TODO: Remove after THB-PO
+	 * 0x43 = Offset for gpio_power_int_setup/4
+	 */
+	offset = 0x43;
+	reg = thb_gpio_read_reg(chip, offset);
+	/* Keeping all power interrupts to Level-High triggered as suggested by HW team */
+	reg |= 0x1E;
+	thb_gpio_write_reg(chip, offset, reg);
+
 	return 0;
 }
 
@@ -1362,7 +1437,7 @@ static const struct of_device_id thunderbay_pinctrl_match[] = {
 int thunderbay_pinctrl_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
-	struct thunderbay_pinctrl *kpc;
+	struct thunderbay_pinctrl *tpc;
 	struct resource *iomem;
 	const struct of_device_id *of_id;
 	int ret;
@@ -1371,35 +1446,35 @@ int thunderbay_pinctrl_probe(struct platform_device *pdev)
 	if (!of_id)
 		return -ENODEV;
 
-	kpc = devm_kzalloc(dev, sizeof(*kpc), GFP_KERNEL);
-	if (!kpc)
+	tpc = devm_kzalloc(dev, sizeof(*tpc), GFP_KERNEL);
+	if (!tpc)
 		return -ENOMEM;
 
-	kpc->dev = dev;
-	kpc->soc = of_id->data;
+	tpc->dev = dev;
+	tpc->soc = of_id->data;
 
 	iomem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!iomem)
 		return -ENXIO;
 
-	kpc->base0 =  devm_ioremap_resource(dev, iomem);
-	if (IS_ERR(kpc->base0))
-		return PTR_ERR(kpc->base0);
+	tpc->base0 =  devm_ioremap_resource(dev, iomem);
+	if (IS_ERR(tpc->base0))
+		return PTR_ERR(tpc->base0);
 
-	thunderbay_pinctrl_desc.pins = kpc->soc->pins;
-	thunderbay_pinctrl_desc.npins = kpc->soc->npins;
+	thunderbay_pinctrl_desc.pins = tpc->soc->pins;
+	thunderbay_pinctrl_desc.npins = tpc->soc->npins;
 
 	/* Register pinctrl */
-	kpc->pctrl = devm_pinctrl_register(dev, &thunderbay_pinctrl_desc, kpc);
-	if (IS_ERR(kpc->pctrl))
-		return PTR_ERR(kpc->pctrl);
+	tpc->pctrl = devm_pinctrl_register(dev, &thunderbay_pinctrl_desc, tpc);
+	if (IS_ERR(tpc->pctrl))
+		return PTR_ERR(tpc->pctrl);
 
 	/* Setup GPIO */
-	ret = thunderbay_gpiochip_probe(kpc);
+	ret = thunderbay_gpiochip_probe(tpc);
 	if (ret < 0)
 		return ret;
 
-	platform_set_drvdata(pdev, kpc);
+	platform_set_drvdata(pdev, tpc);
 
 	return 0;
 }
diff --git a/drivers/pinctrl/pinctrl-thunderbay.h b/drivers/pinctrl/pinctrl-thunderbay.h
index b42cf970fff9..c01ff6b84237 100644
--- a/drivers/pinctrl/pinctrl-thunderbay.h
+++ b/drivers/pinctrl/pinctrl-thunderbay.h
@@ -20,7 +20,7 @@
 
 #define THB_GPIO_DATA_IN (0x1)
 
-#define THB_GPIO_PIN_OFFSET(pin_num) (pin_num * (0x4))
+#define THB_GPIO_REG_OFFSET(pin_num) (pin_num * (0x4))
 
 /* bit 0:2 - IS: Input Selection.*/
 #define THB_GPIO_INPUT_SELECTION_MASK (0x7)
@@ -78,79 +78,230 @@
 #define THB_GPIO_CTRL_REG_x(pinnr) ((((pinnr >= 10) && (pinnr < 60)) \
 				|| ((pinnr >= 62) && (pinnr <= 66))) ? 1 : 0)
 
-/* TODO: Update below table for mode:0-4
- * now only mode 0 values are updated
+/* THB each PIN support different modes (0-4)
+ * for each mode corresponding register value/pin is listed below
+ * list is updated based on THB_Pinlist.xlsx (1.0)
+ * @column 0: Pin number (0-66)
+ * @column 1: mode number (0-4)
+ * TODO: Update table for mode-4
  */
 static const u32 thb_modex_pinval[67][5] = {
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x00000811, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x00370011, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00170000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x0, 0x0, 0x0, 0x0 },
-	{0x00000800, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
-	{0x00370000, 0x0, 0x0, 0x0, 0x0 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00170000, 0x00170011, 0x00170022, 0x00170033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00000800, 0x00000811, 0x00000822, 0x00000833 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
+	{ 0x00370000, 0x00370011, 0x00370022, 0x00370033 },
 };
 
+/* Keeping all power interrupts to Level-High triggered as suggested by HW team
+ *
+ * static u32 thb_gpio_power_int_setup = 0x1E;
+ * THB-VV board default configuration
+ */
+
+static const u32 thb_vv_cfg_modex_regval[67][1] = {
+	{ 0x00000800 }, /* GPIO - 0   */
+	{ 0x00000800 }, /* GPIO - 1   */
+	{ 0x00000800 }, /* GPIO - 2   */
+	{ 0x00000800 }, /* GPIO - 3   */
+	{ 0x00000800 }, /* GPIO - 4   */
+	{ 0x00000800 }, /* GPIO - 5   */
+	{ 0x00000800 }, /* GPIO - 6   */
+	{ 0x00000800 }, /* GPIO - 7   */
+	{ 0x00000900 }, /* GPIO - 8   */
+	{ 0x00000900 }, /* GPIO - 9   */
+	{ 0x00370000 }, /* GPIO - 10  */
+	{ 0x00370000 }, /* GPIO - 11  */
+	{ 0x00370000 }, /* GPIO - 12  */
+	{ 0x00370000 }, /* GPIO - 13  */
+	{ 0x00370100 }, /* GPIO - 14  */
+	{ 0x00370100 }, /* GPIO - 15  */
+	{ 0x00370100 }, /* GPIO - 16  */
+	{ 0x00370100 }, /* GPIO - 17  */
+	{ 0x00170000 }, /* GPIO - 18  */
+	{ 0x00170000 }, /* GPIO - 19  */
+	{ 0x00170000 }, /* GPIO - 20  */
+	{ 0x00170000 }, /* GPIO - 21  */
+	{ 0x00170000 }, /* GPIO - 22  */
+	{ 0x00170000 }, /* GPIO - 23  */
+	{ 0x00170000 }, /* GPIO - 24  */
+	{ 0x00170000 }, /* GPIO - 25  */
+	{ 0x00170000 }, /* GPIO - 26  */
+	{ 0x00170000 }, /* GPIO - 27  */
+	{ 0x00170000 }, /* GPIO - 28  */
+	{ 0x00170000 }, /* GPIO - 29  */
+	{ 0x00170000 }, /* GPIO - 30  */
+	{ 0x00170000 }, /* GPIO - 31  */
+	{ 0x00170000 }, /* GPIO - 32  */
+	{ 0x00170000 }, /* GPIO - 33  */
+	{ 0x00170000 }, /* GPIO - 34  */
+	{ 0x00170000 }, /* GPIO - 35  */
+	{ 0x00170000 }, /* GPIO - 36  */
+	{ 0x00170000 }, /* GPIO - 37  */
+	{ 0x00170000 }, /* GPIO - 38  */
+	{ 0x00170000 }, /* GPIO - 39  */
+	{ 0x00170000 }, /* GPIO - 40  */
+	{ 0x00170000 }, /* GPIO - 41  */
+	{ 0x00170000 }, /* GPIO - 42  */
+	{ 0x00170000 }, /* GPIO - 43  */
+	{ 0x00170000 }, /* GPIO - 44  */
+	{ 0x00170000 }, /* GPIO - 45  */
+	{ 0x00170000 }, /* GPIO - 46  */
+	{ 0x00170000 }, /* GPIO - 47  */
+	{ 0x00170000 }, /* GPIO - 48  */
+	{ 0x00170000 }, /* GPIO - 49  */
+	{ 0x00170000 }, /* GPIO - 50  */
+	{ 0x00170000 }, /* GPIO - 51  */
+	{ 0x00170000 }, /* GPIO - 52  */
+	{ 0x00170000 }, /* GPIO - 53  */
+	{ 0x00170000 }, /* GPIO - 54  */
+	{ 0x00170000 }, /* GPIO - 55  */
+	{ 0x00170000 }, /* GPIO - 56  */
+	{ 0x00170000 }, /* GPIO - 57  */
+	{ 0x00370000 }, /* GPIO - 58  */
+	{ 0x00370000 }, /* GPIO - 59  */
+	{ 0x00000800 }, /* GPIO - 60  */
+	{ 0x00000833 }, /* GPIO - 61  */
+	{ 0x00370000 }, /* GPIO - 62  */
+	{ 0x00370000 }, /* GPIO - 63  */
+	{ 0x00370000 }, /* GPIO - 64  */
+	{ 0x00370000 }, /* GPIO - 65  */
+	{ 0x00370000 }, /* GPIO - 66  */
+};
+
+/* THB-CRB board default configuration */
+
+static const u32 thb_crb_cfg_modex_regval[67][1] = {
+	{ 0x00000800 },	/* GPIO - 0   */
+	{ 0x00000800 }, /* GPIO - 1   */
+	{ 0x00000800 }, /* GPIO - 2   */
+	{ 0x00000800 }, /* GPIO - 3   */
+	{ 0x00000800 }, /* GPIO - 4   */
+	{ 0x00000800 }, /* GPIO - 5   */
+	{ 0x00000800 }, /* GPIO - 6   */
+	{ 0x00000800 }, /* GPIO - 7   */
+	{ 0x00000900 }, /* GPIO - 8   */
+	{ 0x00000900 }, /* GPIO - 9   */
+	{ 0x00370000 }, /* GPIO - 10  */
+	{ 0x00370000 }, /* GPIO - 11  */
+	{ 0x00370000 }, /* GPIO - 12  */
+	{ 0x00370000 }, /* GPIO - 13  */
+	{ 0x00370100 }, /* GPIO - 14  */
+	{ 0x00370100 }, /* GPIO - 15  */
+	{ 0x00370100 }, /* GPIO - 16  */
+	{ 0x00370100 }, /* GPIO - 17  */
+	{ 0x00170000 }, /* GPIO - 18  */
+	{ 0x00170000 }, /* GPIO - 19  */
+	{ 0x00170000 }, /* GPIO - 20  */
+	{ 0x00170000 }, /* GPIO - 21  */
+	{ 0x00170000 }, /* GPIO - 22  */
+	{ 0x00170000 }, /* GPIO - 23  */
+	{ 0x00170000 }, /* GPIO - 24  */
+	{ 0x00170000 }, /* GPIO - 25  */
+	{ 0x00170000 }, /* GPIO - 26  */
+	{ 0x00170000 }, /* GPIO - 27  */
+	{ 0x00170000 }, /* GPIO - 28  */
+	{ 0x00170000 }, /* GPIO - 29  */
+	{ 0x00170000 }, /* GPIO - 30  */
+	{ 0x00170000 }, /* GPIO - 31  */
+	{ 0x00170000 }, /* GPIO - 32  */
+	{ 0x00170000 }, /* GPIO - 33  */
+	{ 0x00170000 }, /* GPIO - 34  */
+	{ 0x00170000 }, /* GPIO - 35  */
+	{ 0x00170000 }, /* GPIO - 36  */
+	{ 0x00170000 }, /* GPIO - 37  */
+	{ 0x00170000 }, /* GPIO - 38  */
+	{ 0x00170000 }, /* GPIO - 39  */
+	{ 0x00170000 }, /* GPIO - 40  */
+	{ 0x00170000 }, /* GPIO - 41  */
+	{ 0x00170000 }, /* GPIO - 42  */
+	{ 0x00170000 }, /* GPIO - 43  */
+	{ 0x00170000 }, /* GPIO - 44  */
+	{ 0x00170000 }, /* GPIO - 45  */
+	{ 0x00170000 }, /* GPIO - 46  */
+	{ 0x00170000 }, /* GPIO - 47  */
+	{ 0x00170000 }, /* GPIO - 48  */
+	{ 0x00170000 }, /* GPIO - 49  */
+	{ 0x00170000 }, /* GPIO - 50  */
+	{ 0x00170000 }, /* GPIO - 51  */
+	{ 0x00170000 }, /* GPIO - 52  */
+	{ 0x00170000 }, /* GPIO - 53  */
+	{ 0x00170000 }, /* GPIO - 54  */
+	{ 0x00170000 }, /* GPIO - 55  */
+	{ 0x00170000 }, /* GPIO - 56  */
+	{ 0x00170000 }, /* GPIO - 57  */
+	{ 0x00370000 }, /* GPIO - 58  */
+	{ 0x00370000 }, /* GPIO - 59  */
+	{ 0x00000800 }, /* GPIO - 60  */
+	{ 0x00000833 }, /* GPIO - 61  */
+	{ 0x00370000 }, /* GPIO - 62  */
+	{ 0x00370000 }, /* GPIO - 63  */
+	{ 0x00370000 }, /* GPIO - 64  */
+	{ 0x00370000 }, /* GPIO - 65  */
+	{ 0x00370000 }, /* GPIO - 66  */
+};
 
 struct thunderbay_mux_desc {
 	u8 mode;
-- 
2.27.0

