From b1ef0e26fb2faca974cb14529ac17b65ecb02df4 Mon Sep 17 00:00:00 2001
From: Ravikumar PM <ravikumar.pm@intel.com>
Date: Thu, 4 Feb 2021 16:22:32 +0530
Subject: [PATCH 189/223] xlink-core: XLink packet optimization.

Reduce the Xlink protocol over head by avoiding the response packets where no
action is required.
---
 drivers/misc/xlink-core/xlink-multiplexer.c | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/drivers/misc/xlink-core/xlink-multiplexer.c b/drivers/misc/xlink-core/xlink-multiplexer.c
index 62e30c9f1081..e0edc537e7ec 100644
--- a/drivers/misc/xlink-core/xlink-multiplexer.c
+++ b/drivers/misc/xlink-core/xlink-multiplexer.c
@@ -816,8 +816,6 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 					release_channel(opchan);
 					break;
 				}
-				event->header.type = XLINK_WRITE_VOLATILE_RESP;
-				xlink_dispatcher_event_add(EVENT_RX, event);
 				//complete regardless of mode/timeout
 				complete(&opchan->pkt_available);
 				// run callback
@@ -833,6 +831,8 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 				rc = X_LINK_ERROR;
 			}
 		}
+		if (rc == 0)
+			xlink_destroy_event(event);
 		release_channel(opchan);
 		break;
 	case XLINK_WRITE_CONTROL_REQ:
@@ -864,8 +864,6 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 					release_channel(opchan);
 					break;
 				}
-				event->header.type = XLINK_WRITE_CONTROL_RESP;
-				xlink_dispatcher_event_add(EVENT_RX, event);
 				// channel blocking, notify waiting threads of available packet
 				complete(&opchan->pkt_available);
 			} else {
@@ -873,6 +871,8 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 				rc = X_LINK_ERROR;
 			}
 		}
+		if (rc == 0)
+			xlink_destroy_event(event);
 		release_channel(opchan);
 		break;
 	case XLINK_READ_REQ:
@@ -882,9 +882,6 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 			rc = X_LINK_COMMUNICATION_FAIL;
 			break;
 		}
-		event->header.timeout = opchan->chan->timeout;
-		event->header.type = XLINK_READ_TO_BUFFER_RESP;
-		xlink_dispatcher_event_add(EVENT_RX, event);
 		//complete regardless of mode/timeout
 		complete(&opchan->pkt_consumed);
 		// run callback
@@ -894,6 +891,8 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 			rc = run_callback(opchan, opchan->consumed_callback,
 					  opchan->consumed_calling_pid);
 		}
+		if (rc == 0)
+			xlink_destroy_event(event);
 		release_channel(opchan);
 		break;
 	case XLINK_RELEASE_REQ:
@@ -904,11 +903,11 @@ enum xlink_error xlink_multiplexer_rx(struct xlink_event *event)
 			event->header.timeout = opchan->chan->timeout;
 			opchan->tx_fill_level -= event->header.size;
 			opchan->tx_packet_level--;
-			event->header.type = XLINK_RELEASE_RESP;
-			xlink_dispatcher_event_add(EVENT_RX, event);
 			//complete regardless of mode/timeout
 			complete(&opchan->pkt_released);
 		}
+		if (rc == 0)
+			xlink_destroy_event(event);
 		release_channel(opchan);
 		break;
 	case XLINK_OPEN_CHANNEL_REQ:
-- 
2.27.0

