From ff8e08fec595565834a40bfd0c0c912da8635b22 Mon Sep 17 00:00:00 2001
From: sbhusare <sayali.bhusare@intel.com>
Date: Tue, 21 Jul 2020 10:50:41 +0530
Subject: [PATCH 212/223] tcrypt kernel tests enable

enable ocs kernel driver tests during insertion

Signed-off-by: sbhusare <sayali.bhusare@intel.com>
---
 crypto/tcrypt.c        |  34 +--
 crypto/testmgr.c       |  18 +-
 crypto/testmgr.h       | 654 +++++++++++++++++++++++------------------
 include/linux/crypto.h |  13 +
 4 files changed, 419 insertions(+), 300 deletions(-)

diff --git a/crypto/tcrypt.c b/crypto/tcrypt.c
index 6b7c158dc508..ff2dc4bc259d 100644
--- a/crypto/tcrypt.c
+++ b/crypto/tcrypt.c
@@ -1753,7 +1753,7 @@ static int do_test(const char *alg, u32 type, u32 mask, int m, u32 num_mb)
 		break;
 
 	case 13:
-		ret += tcrypt_test("deflate");
+		ret += tcrypt_test("ctr(aes)"); //deflate");
 		break;
 
 	case 14:
@@ -1880,7 +1880,7 @@ static int do_test(const char *alg, u32 type, u32 mask, int m, u32 num_mb)
 		break;
 
 	case 51:
-		ret += tcrypt_test("sha3-512");
+		ret += tcrypt_test("hmac(sm3)"); //sha3-512");
 		break;
 
 	case 52:
@@ -1888,7 +1888,7 @@ static int do_test(const char *alg, u32 type, u32 mask, int m, u32 num_mb)
 		break;
 
 	case 53:
-		ret += tcrypt_test("streebog256");
+		ret += tcrypt_test("ecdh"); //streebog256");
 		break;
 
 	case 54:
@@ -1999,27 +1999,27 @@ static int do_test(const char *alg, u32 type, u32 mask, int m, u32 num_mb)
 		ret += tcrypt_test("authenc(hmac(sha224),cbc(des3_ede))");
 		break;
 	case 185:
-		ret += tcrypt_test("authenc(hmac(sha256),cbc(des))");
+		ret += tcrypt_test("cts(cbc(aes))"); //authenc(hmac(sha256),cbc(des))");
 		break;
 	case 186:
-		ret += tcrypt_test("authenc(hmac(sha256),cbc(des3_ede))");
+		ret += tcrypt_test("ccm(aes)"); //authenc(hmac(sha256),cbc(des3_ede))");
 		break;
 	case 187:
-		ret += tcrypt_test("authenc(hmac(sha384),cbc(des))");
+		ret += tcrypt_test("ccm(sm4)");//authenc(hmac(sha384),cbc(des))");
 		break;
 	case 188:
-		ret += tcrypt_test("authenc(hmac(sha384),cbc(des3_ede))");
+		ret += tcrypt_test("cts(cbc(sm4))");//authenc(hmac(sha384),cbc(des3_ede))");
 		break;
 	case 189:
-		ret += tcrypt_test("authenc(hmac(sha512),cbc(des))");
+		ret += tcrypt_test("ctr(sm4)");//authenc(hmac(sha512),cbc(des))");
 		break;
 	case 190:
-		ret += tcrypt_test("authenc(hmac(sha512),cbc(des3_ede))");
+		ret += tcrypt_test("cbc(sm4)");//authenc(hmac(sha512),cbc(des3_ede))");
 		break;
 	case 191:
 		ret += tcrypt_test("ecb(sm4)");
-		ret += tcrypt_test("cbc(sm4)");
-		ret += tcrypt_test("ctr(sm4)");
+		//ret += tcrypt_test("cbc(sm4)");
+		//ret += tcrypt_test("ctr(sm4)");
 		break;
 	case 200:
 		test_cipher_speed("ecb(aes)", ENCRYPT, sec, NULL, 0,
@@ -2269,17 +2269,17 @@ static int do_test(const char *alg, u32 type, u32 mask, int m, u32 num_mb)
 		break;
 
 	case 218:
-		test_cipher_speed("ecb(sm4)", ENCRYPT, sec, NULL, 0,
+		test_acipher_speed("ecb(sm4)", ENCRYPT, sec, NULL, 0,
 				speed_template_16);
-		test_cipher_speed("ecb(sm4)", DECRYPT, sec, NULL, 0,
+		test_acipher_speed("ecb(sm4)", DECRYPT, sec, NULL, 0,
 				speed_template_16);
-		test_cipher_speed("cbc(sm4)", ENCRYPT, sec, NULL, 0,
+		test_acipher_speed("cbc(sm4)", ENCRYPT, sec, NULL, 0,
 				speed_template_16);
-		test_cipher_speed("cbc(sm4)", DECRYPT, sec, NULL, 0,
+		test_acipher_speed("cbc(sm4)", DECRYPT, sec, NULL, 0,
 				speed_template_16);
-		test_cipher_speed("ctr(sm4)", ENCRYPT, sec, NULL, 0,
+		test_acipher_speed("ctr(sm4)", ENCRYPT, sec, NULL, 0,
 				speed_template_16);
-		test_cipher_speed("ctr(sm4)", DECRYPT, sec, NULL, 0,
+		test_acipher_speed("ctr(sm4)", DECRYPT, sec, NULL, 0,
 				speed_template_16);
 		break;
 
diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 93359999c94b..186ea173ffd7 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -4616,6 +4616,11 @@ static const struct alg_test_desc alg_test_descs[] = {
 			.cipher = __VECS(cts_mode_tv_template)
 		}
 	}, {
+#ifdef THB_OCS_tests_enable
+                .alg = "cts(cbc(sm4))",
+                .test = alg_test_null,
+       },{
+#endif
 		/* Same as cts(cbc((aes)) except the key is stored in
 		 * hardware secure memory which we reference by index
 		 */
@@ -4868,7 +4873,7 @@ static const struct alg_test_desc alg_test_descs[] = {
 		.alg = "ecb(sm4)",
 		.test = alg_test_skcipher,
 		.suite = {
-			.cipher = __VECS(sm4_tv_template)
+			.cipher = __VECS(sm4_ecb_tv_template)
 		}
 	}, {
 		.alg = "ecb(tea)",
@@ -5570,10 +5575,12 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 	int j;
 	int rc;
 
-	if (!fips_enabled && notests) {
+#ifndef THB_OCS_tests_enable // fips disabled for CCA algorithms	
+if (!fips_enabled && notests) {
 		printk_once(KERN_INFO "alg: self-tests disabled\n");
 		return 0;
 	}
+#endif
 
 	DO_ONCE(testmgr_onetime_init);
 
@@ -5588,9 +5595,10 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 		if (i < 0)
 			goto notest;
 
+#ifndef  THB_OCS_tests_enable
 		if (fips_enabled && !alg_test_descs[i].fips_allowed)
 			goto non_fips_alg;
-
+#endif
 		rc = alg_test_cipher(alg_test_descs + i, driver, type, mask);
 		goto test_done;
 	}
@@ -5600,9 +5608,11 @@ int alg_test(const char *driver, const char *alg, u32 type, u32 mask)
 	if (i < 0 && j < 0)
 		goto notest;
 
-	if (fips_enabled && ((i >= 0 && !alg_test_descs[i].fips_allowed) ||
+#ifndef  THB_OCS_tests_enable
+ 	if (fips_enabled && ((i >= 0 && !alg_test_descs[i].fips_allowed) ||
 			     (j >= 0 && !alg_test_descs[j].fips_allowed)))
 		goto non_fips_alg;
+#endif
 
 	rc = 0;
 	if (i >= 0)
diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index ced56ea0c9b4..3c1af4367964 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -24,6 +24,9 @@
 
 #define MAX_IVLEN		32
 
+/* flag to test thb ocs kernel drivers with tcrypt on required tests vectors only  
+// #define THB_OCS_tests_enable */
+
 /*
  * hash_testvec:	structure to describe a hash (message digest) test
  * @key:	Pointer to key (NULL if none)
@@ -2261,20 +2264,22 @@ static const struct kpp_testvec curve25519_tv_template[] = {
 }
 };
 
+/*
 static const struct kpp_testvec ecdh_tv_template[] = {
 	{
+	
 #ifndef CONFIG_CRYPTO_FIPS
 	.secret =
 #ifdef __LITTLE_ENDIAN
-	"\x02\x00" /* type */
-	"\x20\x00" /* len */
-	"\x01\x00" /* curve_id */
-	"\x18\x00" /* key_size */
+	"\x02\x00"  
+	"\x20\x00"  
+	"\x01\x00"  
+	"\x18\x00"  
 #else
-	"\x00\x02" /* type */
-	"\x00\x20" /* len */
-	"\x00\x01" /* curve_id */
-	"\x00\x18" /* key_size */
+	"\x00\x02"  
+	"\x00\x20"  
+	"\x00\x01"  
+	"\x00\x18"
 #endif
 	"\xb5\x05\xb1\x71\x1e\xbf\x8c\xda"
 	"\x4e\x19\x1e\x62\x1f\x23\x23\x31"
@@ -2303,73 +2308,30 @@ static const struct kpp_testvec ecdh_tv_template[] = {
 	.expected_ss_size = 24
 	}, {
 #endif
+
 	.secret =
 #ifdef __LITTLE_ENDIAN
-	"\x02\x00" /* type */
-	"\x28\x00" /* len */
-	"\x02\x00" /* curve_id */
-	"\x20\x00" /* key_size */
-#else
-	"\x00\x02" /* type */
-	"\x00\x28" /* len */
-	"\x00\x02" /* curve_id */
-	"\x00\x20" /* key_size */
-#endif
-	"\x24\xd1\x21\xeb\xe5\xcf\x2d\x83"
-	"\xf6\x62\x1b\x6e\x43\x84\x3a\xa3"
-	"\x8b\xe0\x86\xc3\x20\x19\xda\x92"
-	"\x50\x53\x03\xe1\xc0\xea\xb8\x82",
-	.expected_a_public =
-	"\x1a\x7f\xeb\x52\x00\xbd\x3c\x31"
-	"\x7d\xb6\x70\xc1\x86\xa6\xc7\xc4"
-	"\x3b\xc5\x5f\x6c\x6f\x58\x3c\xf5"
-	"\xb6\x63\x82\x77\x33\x24\xa1\x5f"
-	"\x6a\xca\x43\x6f\xf7\x7e\xff\x02"
-	"\x37\x08\xcc\x40\x5e\x7a\xfd\x6a"
-	"\x6a\x02\x6e\x41\x87\x68\x38\x77"
-	"\xfa\xa9\x44\x43\x2d\xef\x09\xdf",
-	.expected_ss =
-	"\xea\x17\x6f\x7e\x6e\x57\x26\x38"
-	"\x8b\xfb\x41\xeb\xba\xc8\x6d\xa5"
-	"\xa8\x72\xd1\xff\xc9\x47\x3d\xaa"
-	"\x58\x43\x9f\x34\x0f\x8c\xf3\xc9",
-	.b_public =
-	"\xcc\xb4\xda\x74\xb1\x47\x3f\xea"
-	"\x6c\x70\x9e\x38\x2d\xc7\xaa\xb7"
-	"\x29\xb2\x47\x03\x19\xab\xdd\x34"
-	"\xbd\xa8\x2c\x93\xe1\xa4\x74\xd9"
-	"\x64\x63\xf7\x70\x20\x2f\xa4\xe6"
-	"\x9f\x4a\x38\xcc\xc0\x2c\x49\x2f"
-	"\xb1\x32\xbb\xaf\x22\x61\xda\xcb"
-	"\x6f\xdb\xa9\xaa\xfc\x77\x81\xf3",
-	.secret_size = 40,
-	.b_public_size = 64,
-	.expected_a_public_size = 64,
-	.expected_ss_size = 32
-	}, {
-	.secret =
-#ifdef __LITTLE_ENDIAN
-	"\x02\x00" /* type */
-	"\x08\x00" /* len */
-	"\x02\x00" /* curve_id */
-	"\x00\x00", /* key_size */
+	"\x02\x00" 
+	"\x08\x00" 
+	"\x02\x00" 
+	"\x00\x00", 
 #else
-	"\x00\x02" /* type */
-	"\x00\x08" /* len */
-	"\x00\x02" /* curve_id */
-	"\x00\x00", /* key_size */
+	"\x00\x02" 
+	"\x00\x08" 
+	"\x00\x02" 
+	"\x00\x00", 
 #endif
 	.b_secret =
 #ifdef __LITTLE_ENDIAN
-	"\x02\x00" /* type */
-	"\x28\x00" /* len */
-	"\x02\x00" /* curve_id */
-	"\x20\x00" /* key_size */
+	"\x02\x00" 
+	"\x28\x00" 
+	"\x02\x00" 
+	"\x20\x00" 
 #else
-	"\x00\x02" /* type */
-	"\x00\x28" /* len */
-	"\x00\x02" /* curve_id */
-	"\x00\x20" /* key_size */
+	"\x00\x02" 
+	"\x00\x28" 
+	"\x00\x02" 
+	"\x00\x20" 
 #endif
 	"\x24\xd1\x21\xeb\xe5\xcf\x2d\x83"
 	"\xf6\x62\x1b\x6e\x43\x84\x3a\xa3"
@@ -2390,7 +2352,119 @@ static const struct kpp_testvec ecdh_tv_template[] = {
 	.expected_a_public_size = 64,
 	.expected_ss_size = 32,
 	.genkey = true,
-	}
+	},{
+*/
+
+static const struct kpp_testvec ecdh_tv_template[] = {
+        {
+	        .secret =
+#ifdef __LITTLE_ENDIAN
+		        "\x02\x00" /* type */
+		        "\x28\x00" /* len */
+		        "\x02\x00" /* curve_id */
+		        "\x20\x00" /* key_size */
+#else
+		        "\x00\x02" /* type */
+		        "\x00\x28" /* len */
+		        "\x00\x02" /* curve_id */
+		        "\x00\x20" /* key_size */
+#endif
+		        "\x24\xd1\x21\xeb\xe5\xcf\x2d\x83"
+		        "\xf6\x62\x1b\x6e\x43\x84\x3a\xa3"
+		        "\x8b\xe0\x86\xc3\x20\x19\xda\x92"
+		        "\x50\x53\x03\xe1\xc0\xea\xb8\x82",
+	        .expected_a_public =
+		        "\x1a\x7f\xeb\x52\x00\xbd\x3c\x31"
+		        "\x7d\xb6\x70\xc1\x86\xa6\xc7\xc4"
+		        "\x3b\xc5\x5f\x6c\x6f\x58\x3c\xf5"
+		        "\xb6\x63\x82\x77\x33\x24\xa1\x5f"
+		        "\x6a\xca\x43\x6f\xf7\x7e\xff\x02"
+		        "\x37\x08\xcc\x40\x5e\x7a\xfd\x6a"
+		        "\x6a\x02\x6e\x41\x87\x68\x38\x77"
+		        "\xfa\xa9\x44\x43\x2d\xef\x09\xdf",
+	        .expected_ss =
+		        "\xea\x17\x6f\x7e\x6e\x57\x26\x38"
+		        "\x8b\xfb\x41\xeb\xba\xc8\x6d\xa5"
+		        "\xa8\x72\xd1\xff\xc9\x47\x3d\xaa"
+		        "\x58\x43\x9f\x34\x0f\x8c\xf3\xc9",
+	        .b_public =
+		        "\xcc\xb4\xda\x74\xb1\x47\x3f\xea"
+		        "\x6c\x70\x9e\x38\x2d\xc7\xaa\xb7"
+		        "\x29\xb2\x47\x03\x19\xab\xdd\x34"
+		        "\xbd\xa8\x2c\x93\xe1\xa4\x74\xd9"
+		        "\x64\x63\xf7\x70\x20\x2f\xa4\xe6"
+		        "\x9f\x4a\x38\xcc\xc0\x2c\x49\x2f"
+		        "\xb1\x32\xbb\xaf\x22\x61\xda\xcb"
+		        "\x6f\xdb\xa9\xaa\xfc\x77\x81\xf3",
+	        .secret_size = 40,
+	        .b_public_size = 64,
+	        .expected_a_public_size = 64,
+	        .expected_ss_size = 32
+	}, {
+
+	.secret = 
+#ifdef __LITTLE_ENDIAN
+		"\x02\x00" /* type */
+		"\x38\x00" /* len */
+		"\x03\x00" /* curve_id */
+		"\x30\x00" /* key_size */
+#else
+		"\x00\x02" /* type */
+		"\x00\x38" /* len */
+		"\x00\x03" /* curve_id */
+		"\x00\x30" /* key_size */
+#endif
+		"\x09\x9f\x3c\x70\x34\xd4\xa2\xc6"
+		"\x99\x88\x4d\x73\xa3\x75\xa6\x7f"
+		"\x76\x24\xef\x7c\x6b\x3c\x0f\x16"
+		"\x06\x47\xb6\x74\x14\xdc\xe6\x55"
+		"\xe3\x5b\x53\x80\x41\xe6\x49\xee"
+		"\x3f\xae\xf8\x96\x78\x3a\xb1\x94",
+		.expected_a_public =
+		"\x66\x78\x42\xd7\xd1\x80\xac\x2c"
+		"\xde\x6f\x74\xf3\x75\x51\xf5\x57"
+		"\x55\xc7\x64\x5c\x20\xef\x73\xe3"
+		"\x16\x34\xfe\x72\xb4\xc5\x5e\xe6"
+		"\xde\x3a\xc8\x08\xac\xb4\xbd\xb4"
+		"\xc8\x87\x32\xae\xe9\x5f\x41\xaa"
+		"\x94\x82\xed\x1f\xc0\xee\xb9\xca"
+		"\xfc\x49\x84\x62\x5c\xcf\xc2\x3f"
+		"\x65\x03\x21\x49\xe0\xe1\x44\xad"
+		"\xa0\x24\x18\x15\x35\xa0\xf3\x8e"
+		"\xeb\x9f\xcf\xf3\xc2\xc9\x47\xda"
+		"\xe6\x9b\x4c\x63\x45\x73\xa8\x1c",
+		.expected_ss =
+		"\x11\x18\x73\x31\xc2\x79\x96\x2d"
+		"\x93\xd6\x04\x24\x3f\xd5\x92\xcb"
+		"\x9d\x0a\x92\x6f\x42\x2e\x47\x18"
+		"\x75\x21\x28\x7e\x71\x56\xc5\xc4"
+		"\xd6\x03\x13\x55\x69\xb9\xe9\xd0"
+		"\x9c\xf5\xd4\xa2\x70\xf5\x97\x46"
+		"\xa2\xa9\xf3\x8e\xf5\xca\xfb\xe2"
+		"\x34\x7c\xf7\xec\x24\xbd\xd5\xe6"
+		"\x24\xbc\x93\xbf\xa8\x27\x71\xf4"
+		"\x0d\x1b\x65\xd0\x62\x56\xa8\x52"
+		"\xc9\x83\x13\x5d\x46\x69\xf8\x79"
+		"\x2f\x2c\x1d\x55\x71\x8a\xfb\xb4",
+		.b_public =
+		"\xe5\x58\xdb\xef\x53\xee\xcd\xe3"
+		"\xd3\xfc\xcf\xc1\xae\xa0\x8a\x89"
+		"\xa9\x87\x47\x5d\x12\xfd\x95\x0d"
+		"\x83\xcf\xa4\x17\x32\xbc\x50\x9d"
+		"\x0d\x1a\xc4\x3a\x03\x36\xde\xf9"
+		"\x6f\xda\x41\xd0\x77\x4a\x35\x71"
+		"\xdc\xfb\xec\x7a\xac\xf3\x19\x64"
+		"\x72\x16\x9e\x83\x84\x30\x36\x7f"
+		"\x66\xee\xbe\x3c\x6e\x70\xc4\x16"
+		"\xdd\x5f\x0c\x68\x75\x9d\xd1\xff"
+		"\xf8\x3f\xa4\x01\x42\x20\x9d\xff"
+		"\x5e\xaa\xd9\x6d\xb9\xe6\x38\x6c",
+		.secret_size = 56,
+		.b_public_size = 96,
+		.expected_a_public_size = 96,
+		.expected_ss_size = 48
+}	
+	
 };
 
 /*
@@ -12601,7 +12675,10 @@ static const struct cipher_testvec sm4_tv_template[] = {
 			  "\x59\x52\x98\xc7\xc6\xfd\x27\x1f"
 			  "\x4\x2\xf8\x4\xc3\x3d\x3f\x66",
 		.len	= 160
-	}, { /* A.2.1.1 SM4-ECB Example 1 */
+	}
+};
+static const struct cipher_testvec sm4_ecb_tv_template[] = {
+	{ /* A.2.1.1 SM4-ECB Example 1 */
 		.key	= "\x01\x23\x45\x67\x89\xAB\xCD\xEF"
 			  "\xFE\xDC\xBA\x98\x76\x54\x32\x10",
 		.klen	= 16,
@@ -13600,8 +13677,21 @@ static const struct cipher_testvec cast6_xts_tv_template[] = {
 /*
  * AES test vectors.
  */
+
+/* static const struct cipher_testvec aes_tv_template[] = {
+	/*		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
+			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
+			  "\x10\x11\x12\x13\x14\x15\x16\x17",
+		.klen	= 24,
+		.ptext	= "\x00\x11\x22\x33\x44\x55\x66\x77"
+			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
+		.ctext	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
+			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
+		.len	= 16,
+	}, {
+*/
 static const struct cipher_testvec aes_tv_template[] = {
-	{ /* From FIPS-197 */
+	{ // From FIPS-197 
 		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
 			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
 		.klen	= 16,
@@ -13610,16 +13700,6 @@ static const struct cipher_testvec aes_tv_template[] = {
 		.ctext	= "\x69\xc4\xe0\xd8\x6a\x7b\x04\x30"
 			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
 		.len	= 16,
-	}, {
-		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
-			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
-			  "\x10\x11\x12\x13\x14\x15\x16\x17",
-		.klen	= 24,
-		.ptext	= "\x00\x11\x22\x33\x44\x55\x66\x77"
-			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
-		.ctext	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
-			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
-		.len	= 16,
 	}, {
 		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
 			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
@@ -13765,8 +13845,37 @@ static const struct cipher_testvec aes_tv_template[] = {
 	},
 };
 
+/* static const struct cipher_testvec aes_cbc_tv_template[] = {
+	{ / From NIST SP800-38A /
+		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
+			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
+			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
+		.klen	= 24,
+		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
+			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
+		.iv_out	= "\x08\xb0\xe2\x79\x88\x59\x88\x81"
+			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
+		.ptext	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
+			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
+			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
+			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
+			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
+			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
+			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
+			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
+		.ctext	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
+			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
+			  "\xb4\xd9\xad\xa9\xad\x7d\xed\xf4"
+			  "\xe5\xe7\x38\x76\x3f\x69\x14\x5a"
+			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
+			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
+			  "\x08\xb0\xe2\x79\x88\x59\x88\x81"
+			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
+		.len	= 64,
+	}, {
+*/
 static const struct cipher_testvec aes_cbc_tv_template[] = {
-	{ /* From RFC 3602 */
+	{ // From RFC 3602 /
 		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
 			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
 		.klen   = 16,
@@ -13795,32 +13904,6 @@ static const struct cipher_testvec aes_cbc_tv_template[] = {
 			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
 			  "\x1b\x82\x66\xbe\xa6\xd6\x1a\xb1",
 		.len	= 32,
-	}, { /* From NIST SP800-38A */
-		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
-			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
-			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
-		.klen	= 24,
-		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
-			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
-		.iv_out	= "\x08\xb0\xe2\x79\x88\x59\x88\x81"
-			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
-		.ptext	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
-			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
-			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
-			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
-			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
-			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
-			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
-			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
-		.ctext	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
-			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
-			  "\xb4\xd9\xad\xa9\xad\x7d\xed\xf4"
-			  "\xe5\xe7\x38\x76\x3f\x69\x14\x5a"
-			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
-			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
-			  "\x08\xb0\xe2\x79\x88\x59\x88\x81"
-			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
-		.len	= 64,
 	}, {
 		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
 			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
@@ -16297,11 +16380,12 @@ static const struct cipher_testvec aes_xts_tv_template[] = {
 	}
 };
 
-static const struct cipher_testvec aes_ctr_tv_template[] = {
-	{ /* From NIST Special Publication 800-38A, Appendix F.5 */
-		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
-			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
-		.klen	= 16,
+/* static const struct cipher_testvec aes_ctr_tv_template[] = {
+	 {
+		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
+			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
+			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
+		.klen	= 24,
 		.iv	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
 			  "\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
 		.iv_out	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
@@ -16314,20 +16398,24 @@ static const struct cipher_testvec aes_ctr_tv_template[] = {
 			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
 			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
 			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
-		.ctext	= "\x87\x4d\x61\x91\xb6\x20\xe3\x26"
-			  "\x1b\xef\x68\x64\x99\x0d\xb6\xce"
-			  "\x98\x06\xf6\x6b\x79\x70\xfd\xff"
-			  "\x86\x17\x18\x7b\xb9\xff\xfd\xff"
-			  "\x5a\xe4\xdf\x3e\xdb\xd5\xd3\x5e"
-			  "\x5b\x4f\x09\x02\x0d\xb0\x3e\xab"
-			  "\x1e\x03\x1d\xda\x2f\xbe\x03\xd1"
-			  "\x79\x21\x70\xa0\xf3\x00\x9c\xee",
+		.ctext	= "\x1a\xbc\x93\x24\x17\x52\x1c\xa2"
+			  "\x4f\x2b\x04\x59\xfe\x7e\x6e\x0b"
+			  "\x09\x03\x39\xec\x0a\xa6\xfa\xef"
+			  "\xd5\xcc\xc2\xc6\xf4\xce\x8e\x94"
+			  "\x1e\x36\xb2\x6b\xd1\xeb\xc6\x70"
+			  "\xd1\xbd\x1d\x66\x56\x20\xab\xf7"
+			  "\x4f\x78\xa7\xf6\xd2\x98\x09\x58"
+			  "\x5a\x97\xda\xec\x58\xc6\xb0\x50",
 		.len	= 64,
 	}, {
-		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
-			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
-			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
-		.klen	= 24,
+
+*/
+
+static const struct cipher_testvec aes_ctr_tv_template[] = {
+	{ // From NIST Special Publication 800-38A, Appendix F.5 /
+		.key	= "\x2b\x7e\x15\x16\x28\xae\xd2\xa6"
+			  "\xab\xf7\x15\x88\x09\xcf\x4f\x3c",
+		.klen	= 16,
 		.iv	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
 			  "\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff",
 		.iv_out	= "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
@@ -16340,16 +16428,16 @@ static const struct cipher_testvec aes_ctr_tv_template[] = {
 			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
 			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
 			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
-		.ctext	= "\x1a\xbc\x93\x24\x17\x52\x1c\xa2"
-			  "\x4f\x2b\x04\x59\xfe\x7e\x6e\x0b"
-			  "\x09\x03\x39\xec\x0a\xa6\xfa\xef"
-			  "\xd5\xcc\xc2\xc6\xf4\xce\x8e\x94"
-			  "\x1e\x36\xb2\x6b\xd1\xeb\xc6\x70"
-			  "\xd1\xbd\x1d\x66\x56\x20\xab\xf7"
-			  "\x4f\x78\xa7\xf6\xd2\x98\x09\x58"
-			  "\x5a\x97\xda\xec\x58\xc6\xb0\x50",
+		.ctext	= "\x87\x4d\x61\x91\xb6\x20\xe3\x26"
+			  "\x1b\xef\x68\x64\x99\x0d\xb6\xce"
+			  "\x98\x06\xf6\x6b\x79\x70\xfd\xff"
+			  "\x86\x17\x18\x7b\xb9\xff\xfd\xff"
+			  "\x5a\xe4\xdf\x3e\xdb\xd5\xd3\x5e"
+			  "\x5b\x4f\x09\x02\x0d\xb0\x3e\xab"
+			  "\x1e\x03\x1d\xda\x2f\xbe\x03\xd1"
+			  "\x79\x21\x70\xa0\xf3\x00\x9c\xee",
 		.len	= 64,
-	}, {
+	}, 	{
 		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
 			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
 			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
@@ -17896,7 +17984,9 @@ static const struct aead_testvec aes_gcm_tv_template[] = {
 			  "\x5b\xc9\x4f\xbc\x32\x21\xa5\xdb"
 			  "\x94\xfa\xe9\x5a\xe7\x12\x1a\x47",
 		.clen	= 76,
-	}, {
+	}
+};
+		/*	}, {
 		.key    = zeroed_string,
 		.klen	= 24,
 		.ctext	= "\xcd\x33\xb2\x8a\xc7\x73\xf7\x4b"
@@ -18240,6 +18330,7 @@ static const struct aead_testvec aes_gcm_tv_template[] = {
 		.clen	= 735,
 	}
 };
+*/
 
 static const struct aead_testvec aes_gcm_rfc4106_tv_template[] = {
 	{ /* Generated using Crypto++ */
@@ -18913,8 +19004,152 @@ static const struct aead_testvec aes_gcm_rfc4543_tv_template[] = {
 	},
 };
 
-static const struct aead_testvec aes_ccm_tv_template[] = {
-	{ /* From RFC 3610 */
+/* static const struct aead_testvec aes_ccm_tv_template[] = {
+	 {
+		.key	= "\xf4\x6b\xc2\x75\x62\xfe\xb4\xe1"
+			  "\xa3\xf0\xff\xdd\x4e\x4b\x12\x75"
+			  "\x53\x14\x73\x66\x8d\x88\xf6\x80",
+		.klen	= 24,
+		.iv	= "\x03\xa0\x20\x35\x26\xf2\x21\x8d"
+			  "\x50\x20\xda\xe2\x00\x00\x00\x00",
+		.assoc	= "\x5b\x9e\x13\x67\x02\x5e\xef\xc1"
+			  "\x6c\xf9\xd7\x1e\x52\x8f\x7a\x47"
+			  "\xe9\xd4\xcf\x20\x14\x6e\xf0\x2d"
+			  "\xd8\x9e\x2b\x56\x10\x23\x56\xe7",
+		.alen	= 32,
+		.ctext	= "\x36\xea\x7a\x70\x08\xdc\x6a\xbc"
+			  "\xad\x0c\x7a\x63\xf6\x61\xfd\x9b",
+		.clen	= 16,
+	}, {
+		.key	= "\x56\xdf\x5c\x8f\x26\x3f\x0e\x42"
+			  "\xef\x7a\xd3\xce\xfc\x84\x60\x62"
+			  "\xca\xb4\x40\xaf\x5f\xc9\xc9\x01",
+		.klen	= 24,
+		.iv	= "\x03\xd6\x3c\x8c\x86\x84\xb6\xcd"
+			  "\xef\x09\x2e\x94\x00\x00\x00\x00",
+		.assoc	= "\x02\x65\x78\x3c\xe9\x21\x30\x91"
+			  "\xb1\xb9\xda\x76\x9a\x78\x6d\x95"
+			  "\xf2\x88\x32\xa3\xf2\x50\xcb\x4c"
+			  "\xe3\x00\x73\x69\x84\x69\x87\x79",
+		.alen	= 32,
+		.ptext	= "\x9f\xd2\x02\x4b\x52\x49\x31\x3c"
+			  "\x43\x69\x3a\x2d\x8e\x70\xad\x7e"
+			  "\xe0\xe5\x46\x09\x80\x89\x13\xb2"
+			  "\x8c\x8b\xd9\x3f\x86\xfb\xb5\x6b",
+		.plen	= 32,
+		.ctext	= "\x39\xdf\x7c\x3c\x5a\x29\xb9\x62"
+			  "\x5d\x51\xc2\x16\xd8\xbd\x06\x9f"
+			  "\x9b\x6a\x09\x70\xc1\x51\x83\xc2"
+			  "\x66\x88\x1d\x4f\x9a\xda\xe0\x1e"
+			  "\xc7\x79\x11\x58\xe5\x6b\x20\x40"
+			  "\x7a\xea\x46\x42\x8b\xe4\x6f\xe1",
+		.clen	= 48,
+	}, {
+		/*		// This is taken from FIPS CAVS. /
+		.key	= "\xab\x2f\x8a\x74\xb7\x1c\xd2\xb1"
+			  "\xff\x80\x2e\x48\x7d\x82\xf8\xb9",
+		.klen	= 16,
+		.iv	= "\x03\xc6\xfb\x7d\x80\x0d\x13\xab"
+			  "\xd8\xa6\xb2\xd8\x00\x00\x00\x00",
+		.alen	= 0,
+		.ptext	= "\x00",
+		.plen	= 0,
+		.ctext	= "\xd5\xe8\x93\x9f\xc7\x89\x2e\x2b",
+		.clen	= 8,
+		.novrfy	= 1,
+	}, {
+		.key	= "\xab\x2f\x8a\x74\xb7\x1c\xd2\xb1"
+			  "\xff\x80\x2e\x48\x7d\x82\xf8\xb9",
+		.klen	= 16,
+		.iv	= "\x03\xaf\x94\x87\x78\x35\x82\x81"
+			  "\x7f\x88\x94\x68\x00\x00\x00\x00",
+		.alen	= 0,
+		.ptext	= "\x00",
+		.plen	= 0,
+		.ctext	= "\x41\x3c\xb8\x87\x73\xcb\xf3\xf3",
+		.clen	= 8,
+	}, {
+		.key	= "\x39\xbb\xa7\xbe\x59\x97\x9e\x73"
+			  "\xa2\xbc\x6b\x98\xd7\x75\x7f\xe3"
+			  "\xa4\x48\x93\x39\x26\x71\x4a\xc6",
+		.klen	= 24,
+		.iv	= "\x03\xee\x49\x83\xe9\xa9\xff\xe9"
+			  "\x57\xba\xfd\x9e\x00\x00\x00\x00",
+		.assoc	= "\x44\xa6\x2c\x05\xe9\xe1\x43\xb1"
+			  "\x58\x7c\xf2\x5c\x6d\x39\x0a\x64"
+			  "\xa4\xf0\x13\x05\xd1\x77\x99\x67"
+			  "\x11\xc4\xc6\xdb\x00\x56\x36\x61",
+		.alen	= 32,
+		.ptext	= "\x00",
+		.plen	= 0,
+		.ctext	= "\x71\x99\xfa\xf4\x44\x12\x68\x9b",
+		.clen	= 8,
+	}, {
+		.key	= "\x58\x5d\xa0\x96\x65\x1a\x04\xd7"
+			  "\x96\xe5\xc5\x68\xaa\x95\x35\xe0"
+			  "\x29\xa0\xba\x9e\x48\x78\xd1\xba",
+		.klen	= 24,
+		.iv	= "\x03\xee\x49\x83\xe9\xa9\xff\xe9"
+			  "\x57\xba\xfd\x9e\x00\x00\x00\x00",
+		.assoc	= "\x44\xa6\x2c\x05\xe9\xe1\x43\xb1"
+			  "\x58\x7c\xf2\x5c\x6d\x39\x0a\x64"
+			  "\xa4\xf0\x13\x05\xd1\x77\x99\x67"
+			  "\x11\xc4\xc6\xdb\x00\x56\x36\x61",
+		.alen	= 32,
+		.ptext	= "\x85\x34\x66\x42\xc8\x92\x0f\x36"
+			  "\x58\xe0\x6b\x91\x3c\x98\x5c\xbb"
+			  "\x0a\x85\xcc\x02\xad\x7a\x96\xe9"
+			  "\x65\x43\xa4\xc3\x0f\xdc\x55\x81",
+		.plen	= 32,
+		.ctext	= "\xfb\xe5\x5d\x34\xbe\xe5\xe8\xe7"
+			  "\x5a\xef\x2f\xbf\x1f\x7f\xd4\xb2"
+			  "\x66\xca\x61\x1e\x96\x7a\x61\xb3"
+			  "\x1c\x16\x45\x52\xba\x04\x9c\x9f"
+			  "\xb1\xd2\x40\xbc\x52\x7c\x6f\xb1",
+		.clen	= 40,
+	}, {
+		.key	= "\x58\x5d\xa0\x96\x65\x1a\x04\xd7"
+			  "\x96\xe5\xc5\x68\xaa\x95\x35\xe0"
+			  "\x29\xa0\xba\x9e\x48\x78\xd1\xba",
+		.klen	= 24,
+		.iv	= "\x03\xd1\xfc\x57\x9c\xfe\xb8\x9c"
+			  "\xad\x71\xaa\x1f\x00\x00\x00\x00",
+		.assoc	= "\x86\x67\xa5\xa9\x14\x5f\x0d\xc6"
+			  "\xff\x14\xc7\x44\xbf\x6c\x3a\xc3"
+			  "\xff\xb6\x81\xbd\xe2\xd5\x06\xc7"
+			  "\x3c\xa1\x52\x13\x03\x8a\x23\x3a",
+		.alen	= 32,
+		.ptext	= "\x02\x87\x4d\x28\x80\x6e\xb2\xed"
+			  "\x99\x2a\xa8\xca\x04\x25\x45\x90"
+			  "\x1d\xdd\x5a\xd9\xe4\xdb\x9c\x9c"
+			  "\x49\xe9\x01\xfe\xa7\x80\x6d\x6b",
+		.plen	= 32,
+		.ctext	= "\x3f\x66\xb0\x9d\xe5\x4b\x38\x00"
+			  "\xc6\x0e\x6e\xe5\xd6\x98\xa6\x37"
+			  "\x8c\x26\x33\xc6\xb2\xa2\x17\xfa"
+			  "\x64\x19\xc0\x30\xd7\xfc\x14\x6b"
+			  "\xe3\x33\xc2\x04\xb0\x37\xbe\x3f"
+			  "\xa9\xb4\x2d\x68\x03\xa3\x44\xef",
+		.clen	= 48,
+		.novrfy	= 1,
+	}, {		
+		.key	= "\xa4\x4b\x54\x29\x0a\xb8\x6d\x01"
+			  "\x5b\x80\x2a\xcf\x25\xc4\xb7\x5c"
+			  "\x20\x2c\xad\x30\xc2\x2b\x41\xfb"
+			  "\x0e\x85\xbc\x33\xad\x0f\x2b\xff",
+		.klen	= 32,
+		.iv	= "\x03\xee\x49\x83\xe9\xa9\xff\xe9"
+			  "\x57\xba\xfd\x9e\x00\x00\x00\x00",
+		.alen	= 0,
+		.ptext	= "\x00",
+		.plen	= 0,
+		.ctext	= "\x1f\xb8\x8f\xa3\xdd\x54\x00\xf2",
+		.clen	= 8,
+	}, {
+};
+*/
+ static const struct aead_testvec aes_ccm_tv_template[] = {
+	{ // From RFC 3610 //
 		.key	= "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7"
 			  "\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf",
 		.klen	= 16,
@@ -18931,7 +19166,7 @@ static const struct aead_testvec aes_ccm_tv_template[] = {
 			  "\x6d\x5f\x6b\x61\xda\xc3\x84\x17"
 			  "\xe8\xd1\x2c\xfd\xf9\x26\xe0",
 		.clen	= 31,
-	}, {
+ 	}, {
 		.key	= "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7"
 			  "\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf",
 		.klen	= 16,
@@ -19040,7 +19275,7 @@ static const struct aead_testvec aes_ccm_tv_template[] = {
 			  "\xba",
 		.clen	= 33,
 	}, {
-		/* This is taken from FIPS CAVS. */
+		// This is taken from FIPS CAVS. //
 		.key	= "\x83\xac\x54\x66\xc2\xeb\xe5\x05"
 			  "\x2e\x01\xd1\xfc\x5d\x82\x66\x2e",
 		.klen	= 16,
@@ -19081,45 +19316,7 @@ static const struct aead_testvec aes_ccm_tv_template[] = {
 			  "\xa9\x86\x15\x6c\x13\xfe\xda\x0a"
 			  "\x22\xb8\x29\x3d\xd8\x39\x9a\x23",
 		.clen	= 48,
-	}, {
-		.key	= "\xf4\x6b\xc2\x75\x62\xfe\xb4\xe1"
-			  "\xa3\xf0\xff\xdd\x4e\x4b\x12\x75"
-			  "\x53\x14\x73\x66\x8d\x88\xf6\x80",
-		.klen	= 24,
-		.iv	= "\x03\xa0\x20\x35\x26\xf2\x21\x8d"
-			  "\x50\x20\xda\xe2\x00\x00\x00\x00",
-		.assoc	= "\x5b\x9e\x13\x67\x02\x5e\xef\xc1"
-			  "\x6c\xf9\xd7\x1e\x52\x8f\x7a\x47"
-			  "\xe9\xd4\xcf\x20\x14\x6e\xf0\x2d"
-			  "\xd8\x9e\x2b\x56\x10\x23\x56\xe7",
-		.alen	= 32,
-		.ctext	= "\x36\xea\x7a\x70\x08\xdc\x6a\xbc"
-			  "\xad\x0c\x7a\x63\xf6\x61\xfd\x9b",
-		.clen	= 16,
-	}, {
-		.key	= "\x56\xdf\x5c\x8f\x26\x3f\x0e\x42"
-			  "\xef\x7a\xd3\xce\xfc\x84\x60\x62"
-			  "\xca\xb4\x40\xaf\x5f\xc9\xc9\x01",
-		.klen	= 24,
-		.iv	= "\x03\xd6\x3c\x8c\x86\x84\xb6\xcd"
-			  "\xef\x09\x2e\x94\x00\x00\x00\x00",
-		.assoc	= "\x02\x65\x78\x3c\xe9\x21\x30\x91"
-			  "\xb1\xb9\xda\x76\x9a\x78\x6d\x95"
-			  "\xf2\x88\x32\xa3\xf2\x50\xcb\x4c"
-			  "\xe3\x00\x73\x69\x84\x69\x87\x79",
-		.alen	= 32,
-		.ptext	= "\x9f\xd2\x02\x4b\x52\x49\x31\x3c"
-			  "\x43\x69\x3a\x2d\x8e\x70\xad\x7e"
-			  "\xe0\xe5\x46\x09\x80\x89\x13\xb2"
-			  "\x8c\x8b\xd9\x3f\x86\xfb\xb5\x6b",
-		.plen	= 32,
-		.ctext	= "\x39\xdf\x7c\x3c\x5a\x29\xb9\x62"
-			  "\x5d\x51\xc2\x16\xd8\xbd\x06\x9f"
-			  "\x9b\x6a\x09\x70\xc1\x51\x83\xc2"
-			  "\x66\x88\x1d\x4f\x9a\xda\xe0\x1e"
-			  "\xc7\x79\x11\x58\xe5\x6b\x20\x40"
-			  "\x7a\xea\x46\x42\x8b\xe4\x6f\xe1",
-		.clen	= 48,
+
 	}, {
 		.key	= "\xe0\x8d\x99\x71\x60\xd7\x97\x1a"
 			  "\xbd\x01\x99\xd5\x8a\xdf\x71\x3a"
@@ -19194,30 +19391,6 @@ static const struct aead_testvec aes_ccm_tv_template[] = {
 			  "\x5c\xda\xb2\x33\xe5\x13\xe2\x0d"
 			  "\x74\xd1\xef\xb5\x0f\x3a\xb5\xf8",
 		.clen	= 48,
-	}, {
-		/* This is taken from FIPS CAVS. */
-		.key	= "\xab\x2f\x8a\x74\xb7\x1c\xd2\xb1"
-			  "\xff\x80\x2e\x48\x7d\x82\xf8\xb9",
-		.klen	= 16,
-		.iv	= "\x03\xc6\xfb\x7d\x80\x0d\x13\xab"
-			  "\xd8\xa6\xb2\xd8\x00\x00\x00\x00",
-		.alen	= 0,
-		.ptext	= "\x00",
-		.plen	= 0,
-		.ctext	= "\xd5\xe8\x93\x9f\xc7\x89\x2e\x2b",
-		.clen	= 8,
-		.novrfy	= 1,
-	}, {
-		.key	= "\xab\x2f\x8a\x74\xb7\x1c\xd2\xb1"
-			  "\xff\x80\x2e\x48\x7d\x82\xf8\xb9",
-		.klen	= 16,
-		.iv	= "\x03\xaf\x94\x87\x78\x35\x82\x81"
-			  "\x7f\x88\x94\x68\x00\x00\x00\x00",
-		.alen	= 0,
-		.ptext	= "\x00",
-		.plen	= 0,
-		.ctext	= "\x41\x3c\xb8\x87\x73\xcb\xf3\xf3",
-		.clen	= 8,
 	}, {
 		.key	= "\x61\x0e\x8c\xae\xe3\x23\xb6\x38"
 			  "\x76\x1c\xf6\x3a\x67\xa3\x9c\xd8",
@@ -19265,83 +19438,6 @@ static const struct aead_testvec aes_ccm_tv_template[] = {
 			  "\xb7\x14\x30\x00\x32\x9e\xa0\xa6"
 			  "\x9e\x5a\x18\xa1\xb8\xfe\xdb\xd3",
 		.clen	= 48,
-	}, {
-		.key	= "\x39\xbb\xa7\xbe\x59\x97\x9e\x73"
-			  "\xa2\xbc\x6b\x98\xd7\x75\x7f\xe3"
-			  "\xa4\x48\x93\x39\x26\x71\x4a\xc6",
-		.klen	= 24,
-		.iv	= "\x03\xee\x49\x83\xe9\xa9\xff\xe9"
-			  "\x57\xba\xfd\x9e\x00\x00\x00\x00",
-		.assoc	= "\x44\xa6\x2c\x05\xe9\xe1\x43\xb1"
-			  "\x58\x7c\xf2\x5c\x6d\x39\x0a\x64"
-			  "\xa4\xf0\x13\x05\xd1\x77\x99\x67"
-			  "\x11\xc4\xc6\xdb\x00\x56\x36\x61",
-		.alen	= 32,
-		.ptext	= "\x00",
-		.plen	= 0,
-		.ctext	= "\x71\x99\xfa\xf4\x44\x12\x68\x9b",
-		.clen	= 8,
-	}, {
-		.key	= "\x58\x5d\xa0\x96\x65\x1a\x04\xd7"
-			  "\x96\xe5\xc5\x68\xaa\x95\x35\xe0"
-			  "\x29\xa0\xba\x9e\x48\x78\xd1\xba",
-		.klen	= 24,
-		.iv	= "\x03\xee\x49\x83\xe9\xa9\xff\xe9"
-			  "\x57\xba\xfd\x9e\x00\x00\x00\x00",
-		.assoc	= "\x44\xa6\x2c\x05\xe9\xe1\x43\xb1"
-			  "\x58\x7c\xf2\x5c\x6d\x39\x0a\x64"
-			  "\xa4\xf0\x13\x05\xd1\x77\x99\x67"
-			  "\x11\xc4\xc6\xdb\x00\x56\x36\x61",
-		.alen	= 32,
-		.ptext	= "\x85\x34\x66\x42\xc8\x92\x0f\x36"
-			  "\x58\xe0\x6b\x91\x3c\x98\x5c\xbb"
-			  "\x0a\x85\xcc\x02\xad\x7a\x96\xe9"
-			  "\x65\x43\xa4\xc3\x0f\xdc\x55\x81",
-		.plen	= 32,
-		.ctext	= "\xfb\xe5\x5d\x34\xbe\xe5\xe8\xe7"
-			  "\x5a\xef\x2f\xbf\x1f\x7f\xd4\xb2"
-			  "\x66\xca\x61\x1e\x96\x7a\x61\xb3"
-			  "\x1c\x16\x45\x52\xba\x04\x9c\x9f"
-			  "\xb1\xd2\x40\xbc\x52\x7c\x6f\xb1",
-		.clen	= 40,
-	}, {
-		.key	= "\x58\x5d\xa0\x96\x65\x1a\x04\xd7"
-			  "\x96\xe5\xc5\x68\xaa\x95\x35\xe0"
-			  "\x29\xa0\xba\x9e\x48\x78\xd1\xba",
-		.klen	= 24,
-		.iv	= "\x03\xd1\xfc\x57\x9c\xfe\xb8\x9c"
-			  "\xad\x71\xaa\x1f\x00\x00\x00\x00",
-		.assoc	= "\x86\x67\xa5\xa9\x14\x5f\x0d\xc6"
-			  "\xff\x14\xc7\x44\xbf\x6c\x3a\xc3"
-			  "\xff\xb6\x81\xbd\xe2\xd5\x06\xc7"
-			  "\x3c\xa1\x52\x13\x03\x8a\x23\x3a",
-		.alen	= 32,
-		.ptext	= "\x02\x87\x4d\x28\x80\x6e\xb2\xed"
-			  "\x99\x2a\xa8\xca\x04\x25\x45\x90"
-			  "\x1d\xdd\x5a\xd9\xe4\xdb\x9c\x9c"
-			  "\x49\xe9\x01\xfe\xa7\x80\x6d\x6b",
-		.plen	= 32,
-		.ctext	= "\x3f\x66\xb0\x9d\xe5\x4b\x38\x00"
-			  "\xc6\x0e\x6e\xe5\xd6\x98\xa6\x37"
-			  "\x8c\x26\x33\xc6\xb2\xa2\x17\xfa"
-			  "\x64\x19\xc0\x30\xd7\xfc\x14\x6b"
-			  "\xe3\x33\xc2\x04\xb0\x37\xbe\x3f"
-			  "\xa9\xb4\x2d\x68\x03\xa3\x44\xef",
-		.clen	= 48,
-		.novrfy	= 1,
-	}, {
-		.key	= "\xa4\x4b\x54\x29\x0a\xb8\x6d\x01"
-			  "\x5b\x80\x2a\xcf\x25\xc4\xb7\x5c"
-			  "\x20\x2c\xad\x30\xc2\x2b\x41\xfb"
-			  "\x0e\x85\xbc\x33\xad\x0f\x2b\xff",
-		.klen	= 32,
-		.iv	= "\x03\xee\x49\x83\xe9\xa9\xff\xe9"
-			  "\x57\xba\xfd\x9e\x00\x00\x00\x00",
-		.alen	= 0,
-		.ptext	= "\x00",
-		.plen	= 0,
-		.ctext	= "\x1f\xb8\x8f\xa3\xdd\x54\x00\xf2",
-		.clen	= 8,
 	}, {
 		.key	= "\x39\xbb\xa7\xbe\x59\x97\x9e\x73"
 			  "\xa2\xbc\x6b\x98\xd7\x75\x7f\xe3"
diff --git a/include/linux/crypto.h b/include/linux/crypto.h
index da5e0d74bb2f..10d392fd7646 100644
--- a/include/linux/crypto.h
+++ b/include/linux/crypto.h
@@ -593,9 +593,22 @@ static inline int crypto_wait_req(int err, struct crypto_wait *wait)
 	switch (err) {
 	case -EINPROGRESS:
 	case -EBUSY:
+#ifdef THB_OCS_tests_enable 
+	wait_for_completion(&wait->completion);
+	err = wait_for_completion_timeout(&wait->completion,
+			msecs_to_jiffies(5000));
+	reinit_completion(&wait->completion);
+	if (!err) {
+		pr_err("%s: timeout for %p\n", __func__, wait);
+//              err = -ETIMEDOUT;
+                break;
+          }
+          err = wait->err;
+#else
 		wait_for_completion(&wait->completion);
 		reinit_completion(&wait->completion);
 		err = wait->err;
+#endif
 		break;
 	}
 
-- 
2.27.0

