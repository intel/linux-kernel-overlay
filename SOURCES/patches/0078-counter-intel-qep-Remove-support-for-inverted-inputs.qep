From 0edf860f90e701c3dcd3d34221e0572df801b212 Mon Sep 17 00:00:00 2001
From: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date: Thu, 27 May 2021 14:18:10 +0300
Subject: [PATCH 78/81] counter: intel-qep: Remove support for inverted inputs

We discussed with the subsystem maintainer that this feature perhaps
should not be visible to userspace but come from firmware as it is board
specific feature not something userspace should configure.

And more over: "We should be careful in introducing new sysfs attributes
because once they're released we're stuck supporting them for the
indefinite future.".

Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
---
 Documentation/ABI/testing/sysfs-bus-counter | 10 ---
 drivers/counter/intel-qep.c                 | 72 ++-------------------
 2 files changed, 6 insertions(+), 76 deletions(-)

diff --git a/Documentation/ABI/testing/sysfs-bus-counter b/Documentation/ABI/testing/sysfs-bus-counter
index fc140f21935e..e9d9e50f03be 100644
--- a/Documentation/ABI/testing/sysfs-bus-counter
+++ b/Documentation/ABI/testing/sysfs-bus-counter
@@ -237,13 +237,3 @@ Description:
 		Read-only attribute that indicates the device-specific name of
 		Signal Y. If possible, this should match the name of the
 		respective signal as it appears in the device datasheet.
-
-What:		/sys/bus/counter/devices/counterX/signalY/invert
-KernelVersion:	5.14
-Contact:	linux-iio@vger.kernel.org
-Description:
-		Whether signal Y inversion is enabled. Valid attribute values
-		are boolean.
-
-		For counter devices that have feature to control inversion of
-		signal Y.
diff --git a/drivers/counter/intel-qep.c b/drivers/counter/intel-qep.c
index 1a95813a62cc..03380403346b 100644
--- a/drivers/counter/intel-qep.c
+++ b/drivers/counter/intel-qep.c
@@ -159,75 +159,15 @@ static const struct counter_ops intel_qep_counter_ops = {
 	.action_get = intel_qep_action_get,
 };
 
-static ssize_t intel_qep_signal_invert_read(struct counter_device *counter,
-					    struct counter_signal *signal,
-					    void *priv, char *buf)
-{
-	struct intel_qep *qep = counter->priv;
-	u32 reg;
-
-	pm_runtime_get_sync(qep->dev);
-	reg = intel_qep_readl(qep, INTEL_QEPCON);
-	pm_runtime_put(qep->dev);
-
-	return sysfs_emit(buf, "%u\n", !(reg & (uintptr_t)signal->priv));
-}
-
-static ssize_t intel_qep_signal_invert_write(struct counter_device *counter,
-					     struct counter_signal *signal,
-					     void *priv, const char *buf,
-					     size_t len)
-{
-	struct intel_qep *qep = counter->priv;
-	bool invert;
-	int ret;
-	u32 reg;
-
-	ret = kstrtobool(buf, &invert);
-	if (ret < 0)
-		return ret;
-
-	mutex_lock(&qep->lock);
-	if (qep->enabled) {
-		ret = -EBUSY;
-		goto out;
-	}
-
-	pm_runtime_get_sync(qep->dev);
-	reg = intel_qep_readl(qep, INTEL_QEPCON);
-	if (invert == true)
-		reg &= ~(uintptr_t)signal->priv;
-	else
-		reg |= (uintptr_t)signal->priv;
-	intel_qep_writel(qep, INTEL_QEPCON, reg);
-	pm_runtime_put(qep->dev);
-	ret = len;
-
-out:
-	mutex_unlock(&qep->lock);
-	return ret;
-}
-
-static const struct counter_signal_ext intel_qep_signal_ext[] = {
-	{
-		.name = "invert",
-		.read = intel_qep_signal_invert_read,
-		.write = intel_qep_signal_invert_write,
-	},
-};
-
-#define INTEL_QEP_SIGNAL(_id, _name, _priv) {		\
-	.id = (_id),					\
-	.name = (_name),				\
-	.ext = intel_qep_signal_ext,			\
-	.num_ext = ARRAY_SIZE(intel_qep_signal_ext),	\
-	.priv = (void *)_priv,				\
+#define INTEL_QEP_SIGNAL(_id, _name) {				\
+	.id = (_id),						\
+	.name = (_name),					\
 }
 
 static struct counter_signal intel_qep_signals[] = {
-	INTEL_QEP_SIGNAL(0, "Phase A", INTEL_QEPCON_EDGE_A),
-	INTEL_QEP_SIGNAL(1, "Phase B", INTEL_QEPCON_EDGE_B),
-	INTEL_QEP_SIGNAL(2, "Index", INTEL_QEPCON_EDGE_INDX),
+	INTEL_QEP_SIGNAL(0, "Phase A"),
+	INTEL_QEP_SIGNAL(1, "Phase B"),
+	INTEL_QEP_SIGNAL(2, "Index"),
 };
 
 #define INTEL_QEP_SYNAPSE(_signal_id) {				\
-- 
2.27.0

