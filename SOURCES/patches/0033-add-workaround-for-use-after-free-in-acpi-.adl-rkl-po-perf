From 7c77813319732e45f9944bef26942cb783cf1fd1 Mon Sep 17 00:00:00 2001
From: Andi Kleen <ak@linux.intel.com>
Date: Thu, 25 Jan 2018 10:18:09 -0800
Subject: [PATCH 33/88] add workaround for use-after-free in acpi for whitley
 seabios simics

Fixes

I'm using a internal only Whitley simics setup, which uses a Seabios based BIOS. It
is somewhat buggy and ACPI fails to initialize due to a SCI conflict and shuts down at boot.

Normally things work well enough for my purposes anyways, but when I enable page debugging
the ACPI shut down process crashes due to a use-after-free.

I did a KASAN run which clearly shows the problem (see below)

For now I commented out acpi_ns_terminate/delete_caches which makes the boot continue.
But it would be good to fix it properly.

I don't have ACPI tables because it is hard to get them with uninitialized ACPI.

HugeTLB registered 1 GB page size, pre-allocated 0 pages
HugeTLB registered 2 MB page size, pre-allocated 0 pages
ACPI: Added _OSI(Module Device)
ACPI: Added _OSI(Processor Device)
ACPI: Added _OSI(3.0 _SCP Extensions)
ACPI: Added _OSI(Processor Aggregator Device)
genirq: Flags mismatch irq 0. 00000080 (acpi) vs. 00015a00 (timer)
ACPI: SCI (IRQ0) allocation failed
ACPI Exception: AE_NOT_ACQUIRED, Unable to install System Control Interrupt hand
ler (20170303/evevent-131)
ACPI: Unable to start the ACPI Interpreter
ACPI Error: Could not remove SCI handler (20170303/evmisc-281)
==================================================================
BUG: KASAN: use-after-free in acpi_ut_update_ref_count+0x2e0/0x494
Read of size 1 at addr ffff8800beea67ba by task swapper/0/1

CPU: 13 PID: 1 Comm: swapper/0 Not tainted 4.12.0-rc6-DEBUG-00034-g9ddcf5129435-
dirty #3
Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
Call Trace:
 dump_stack+0x86/0xc5
 print_address_description+0x62/0x250
 ? acpi_ut_update_ref_count+0x2e0/0x494
 kasan_report+0x208/0x350
 __asan_load1+0x45/0x50
 acpi_ut_update_ref_count+0x2e0/0x494
 acpi_ut_update_object_reference+0x23f/0x2e4
 ? acpi_os_release_object+0xe/0x20
 ? acpi_ut_update_ref_count+0x494/0x494
 ? kmem_cache_free+0x206/0x260
 acpi_ut_remove_reference+0x3a/0x3d
 acpi_ns_detach_object+0xee/0xf5
 acpi_ns_delete_namespace_subtree+0x4b/0x98
 ? acpi_sleep_init+0x1dd/0x1dd
 acpi_ns_terminate+0x5e/0x93
 acpi_ut_subsystem_shutdown+0x6c/0x108
 ? acpi_sleep_init+0x1dd/0x1dd
 acpi_terminate+0xe/0x1a
 acpi_init+0x398/0x484
 ? acpi_sleep_init+0x1dd/0x1dd
 ? refcount_sub_and_test+0x15/0x70
 ? refcount_dec_and_test+0x11/0x20
 ? kobject_put+0x4e/0x210
 ? __class_register+0x283/0x360
 ? __class_create+0x77/0xa0
 ? video_setup+0xae/0xae
 ? acpi_sleep_init+0x1dd/0x1dd
 do_one_initcall+0xf0/0x1d0
 ? initcall_blacklisted+0x130/0x130
 ? do_early_param+0xba/0xba
 kernel_init_freeable+0x1c3/0x263
 ? rest_init+0x150/0x150
 kernel_init+0x13/0x120
 ? rest_init+0x150/0x150
 ret_from_fork+0x2a/0x40

Allocated by task 0:
 save_stack_trace+0x1b/0x20
 kasan_kmalloc+0xf3/0x190
 kasan_slab_alloc+0x12/0x20
 kmem_cache_alloc+0x129/0x260
 acpi_ns_create_node+0x4b/0x75
 acpi_ns_search_and_enter+0x17d/0x239
 acpi_ns_lookup+0x3fb/0x5b6
 acpi_ds_load1_begin_op+0x33b/0x467
 acpi_ps_build_named_op+0x164/0x26e
 acpi_ps_create_op+0x28f/0x4c3
 acpi_ps_parse_loop+0x2a2/0xaeb
 acpi_ps_parse_aml+0xfd/0x41f
 acpi_ns_one_complete_parse+0x1cd/0x20a
 acpi_ns_parse_table+0x41/0x59
 acpi_ns_load_table+0x42/0xdd
 acpi_tb_load_namespace+0x15e/0x2e5
 acpi_load_tables+0x36/0xb0
 acpi_early_init+0xf1/0x1d9
 start_kernel+0x404/0x4ba
 x86_64_start_reservations+0x2f/0x31
 x86_64_start_kernel+0x148/0x157
 verify_cpu+0x0/0xf1

Freed by task 1:
 save_stack_trace+0x1b/0x20
 kasan_slab_free+0xc4/0x170
 kmem_cache_free+0xdf/0x260
 acpi_os_release_object+0xe/0x20
 acpi_ns_delete_node+0xa7/0xae
 acpi_ns_delete_children+0x77/0x9b
 acpi_ns_delete_namespace_subtree+0x73/0x98
 acpi_ns_terminate+0x5e/0x93
 acpi_ut_subsystem_shutdown+0x6c/0x108
 acpi_terminate+0xe/0x1a
 acpi_init+0x398/0x484
 do_one_initcall+0xf0/0x1d0
 kernel_init_freeable+0x1c3/0x263
 kernel_init+0x13/0x120
 ret_from_fork+0x2a/0x40

The buggy address belongs to the object at ffff8800beea67b0
 which belongs to the cache Acpi-Namespace of size 40
The buggy address is located 10 bytes inside of
 40-byte region [ffff8800beea67b0, ffff8800beea67d8)
The buggy address belongs to the page:
page:ffffea0002fba980 count:1 mapcount:0 mapping:          (null) index:0x0 comp
ound_mapcount: 0
flags: 0x100000000008100(slab|head)
raw: 0100000000008100 0000000000000000 0000000000000000 0000000100140014
raw: ffffea0002fba5a0 ffffea0002fbaca0 ffff8800bec16d40 0000000000000000
page dumped because: kasan: bad access detected

Memory state around the buggy address:
 ffff8800beea6680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
 ffff8800beea6700: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>ffff8800beea6780: fc fc fc fc fc fc fb fb fb fb fb fc fc fc fc fc
                                        ^
 ffff8800beea6800: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
 ffff8800beea6880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
==================================================================
Disabling lock debugging due to kernel taint
---
 drivers/acpi/acpica/utinit.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/drivers/acpi/acpica/utinit.c b/drivers/acpi/acpica/utinit.c
index 7b606a1e6986..c6f344719eb9 100644
--- a/drivers/acpi/acpica/utinit.c
+++ b/drivers/acpi/acpica/utinit.c
@@ -269,9 +269,11 @@ void acpi_ut_subsystem_shutdown(void)
 	acpi_ut_interface_terminate();
 #endif
 
+#if 0
 	/* Close the Namespace */
 
 	acpi_ns_terminate();
+#endif
 
 	/* Delete the ACPI tables */
 
@@ -281,8 +283,10 @@ void acpi_ut_subsystem_shutdown(void)
 
 	acpi_ut_terminate();
 
+#if 0
 	/* Purge the local caches */
 
 	(void)acpi_ut_delete_caches();
+#endif
 	return_VOID;
 }
-- 
2.27.0

